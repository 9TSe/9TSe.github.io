<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NineTSe</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-03T15:55:30.029Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>NineTSe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python</title>
    <link href="http://example.com/2024/05/01/Python/"/>
    <id>http://example.com/2024/05/01/Python/</id>
    <published>2024-05-01T13:07:51.000Z</published>
    <updated>2024-05-03T15:55:30.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h1><blockquote><p>python为弱语言类型, 根据赋予的值决定具体数据类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准输入输出</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;inputyour name&quot;</span>)</span><br><span class="line"><span class="comment"># sep 为分割符(默认为空格), end 为结束符号(默认为换行符)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;im&quot;</span>, sep = <span class="string">&quot;-&quot;</span>, end = <span class="string">&quot;joke&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化精度控制</span></span><br><span class="line">c = <span class="number">11.5551</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span> %c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> %c) <span class="comment">#浮点型输出会自动四舍五入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%5.1f&quot;</span> %c)</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 11.56</span></span><br><span class="line"><span class="comment">#  11.6</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-1-基本数据类型"><a href="#1-1-基本数据类型" class="headerlink" title="1.1 基本数据类型"></a>1.1 基本数据类型</h2><p><strong>int 类型</strong></p><p><code>无大小限制, 内存许可就无限大</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0b1101</span>) <span class="comment">#13 二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0o734</span>) <span class="comment">#476 八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0x81</span>) <span class="comment">#129 16进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">21</span>)) <span class="comment"># 0b10101</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">21</span>)) <span class="comment"># 0o25 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">21</span>)) <span class="comment"># 0x15</span></span><br></pre></td></tr></table></figure><p><strong>float 类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">130</span>)) <span class="comment">#130.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.3e4</span>) <span class="comment">#13000.0</span></span><br></pre></td></tr></table></figure><p><strong>bool 类型</strong></p><p>空字符串, 空数组, 空集合均为false</p><p><strong>复数类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> + <span class="number">3j</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.real, a.imag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">#(10+3j)</span></span><br><span class="line"><span class="comment">#10.0 3.0</span></span><br><span class="line"><span class="comment">#(3+4j)</span></span><br></pre></td></tr></table></figure><p><strong>字符串类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="comment">#a[0] = &quot;b&quot; # error, not support</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a+a)</span><br><span class="line"><span class="comment">#a</span></span><br><span class="line"><span class="comment">#b</span></span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#d</span></span><br><span class="line"><span class="comment">#abcdabcdabcd</span></span><br><span class="line"><span class="comment">#abcdabcd</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span> : <span class="number">2</span>]) <span class="comment">#ab, 切片, [begin : end) , begin默认为0, end默认为字符串长度</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>]) <span class="comment">#字符串逆转</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串常用函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;aaBcD 123a&quot;</span></span><br><span class="line"><span class="built_in">str</span>.capitalize() <span class="comment">#首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.find(<span class="string">&quot;13&quot;</span>)) <span class="comment">#寻找下标, fail -&gt; -1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.index(<span class="string">&quot;1&quot;</span>)) <span class="comment">#寻找下标, fail -&gt; error</span></span><br><span class="line"><span class="built_in">str</span>.lower() <span class="comment">#全小写</span></span><br><span class="line"><span class="built_in">str</span>.upper() <span class="comment">#全大写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split(<span class="string">&quot; &quot;</span>)) <span class="comment">#[&#x27;aaBcD&#x27;, &#x27;123a&#x27;] list列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.strip(<span class="string">&quot;a&quot;</span>)) <span class="comment"># BcD 123 默认去除两边的空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>) <span class="comment">#以上函数的更改只是返回了一个新的字符串, 没有改变真正的对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line">b1 = <span class="number">40</span></span><br><span class="line"><span class="comment">#f&quot;内容&#123;变量&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> + <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a+b1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a-<span class="number">3</span>&#125;</span> + <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a+<span class="number">10</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 10 + 30 = 50</span></span><br><span class="line"><span class="comment"># 7 + 30 = 20</span></span><br></pre></td></tr></table></figure><p><strong>部分类型转换函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">1.2</span>))      <span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">77</span>))       <span class="comment">#M</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;3 * 9&quot;</span>)) <span class="comment">#27</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span>; y = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;x * y&quot;</span>)) <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">16</span>),<span class="number">2</span>) <span class="comment">#16的二进制, 二进制转换为十进制整数</span></span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="number">16</span>),<span class="number">8</span>)</span><br><span class="line">c = <span class="built_in">int</span>(<span class="string">&quot;aB234&quot;</span>,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b, c) <span class="comment"># 16 16 700980</span></span><br></pre></td></tr></table></figure><h2 id="1-2-基本运算符"><a href="#1-2-基本运算符" class="headerlink" title="1.2 基本运算符"></a>1.2 基本运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>; b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a**b) <span class="comment">#a的b次方</span></span><br><span class="line"><span class="built_in">print</span>(a // b) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(a / b) <span class="comment"># 2.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">5</span> <span class="keyword">and</span> b == <span class="number">2</span>: <span class="comment">#true</span></span><br><span class="line">    <span class="built_in">print</span>(b &lt;&lt; <span class="number">2</span>) <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">2</span> <span class="keyword">or</span> b == <span class="number">2</span>: <span class="comment">#true</span></span><br><span class="line">    <span class="built_in">print</span>(a &gt;&gt; <span class="number">1</span>) <span class="comment">#2 101 &gt;&gt; 1 == 010</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">arry=[<span class="string">&quot;hi&quot;</span>,<span class="string">&quot;im&quot;</span>,<span class="string">&quot;fine&quot;</span>,<span class="string">&quot;ok&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span> <span class="keyword">in</span> arry) <span class="comment">#true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;thank&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> arry) <span class="comment">#true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#is 和 is not 判断变量是否引用同一个对象</span></span><br><span class="line">a = <span class="string">&quot;1&quot;</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="keyword">not</span> b) <span class="comment">#true</span></span><br><span class="line">b = <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment">#true</span></span><br></pre></td></tr></table></figure><h2 id="1-3-基本语句"><a href="#1-3-基本语句" class="headerlink" title="1.3 基本语句"></a>1.3 基本语句</h2><p><strong>if 语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以嵌套</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">12</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> a == <span class="number">10</span>:</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p><strong>for, while 语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#乘法表</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">a = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">b = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> b:</span><br><span class="line">        <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">            <span class="built_in">sum</span> = i*j</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%d*%d=%d&quot;</span>%(i,j,<span class="built_in">sum</span>), end = <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加法表</span></span><br><span class="line">pp=<span class="number">0</span></span><br><span class="line">sum2=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pp&lt;=<span class="number">10</span>:</span><br><span class="line">    pp+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        sum2=pp+o</span><br><span class="line">        <span class="keyword">if</span> pp&gt;=o:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%d+%d=%d&quot;</span>%(pp,o,sum2),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#else用于for语句</span></span><br><span class="line"><span class="comment">#若for被break打断, 则不进入else</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;for normal end&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2. 数据结构"></a>2. 数据结构</h1><h2 id="2-1-list-列表"><a href="#2-1-list-列表" class="headerlink" title="2.1 list(列表)"></a>2.1 list(列表)</h2><p>有序的<code>可变</code>序列<br>列表用于存储任意大小的数据集合, 可以是不同数据类型, 包括列表(嵌套)</p><blockquote><p>关于初始化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>=<span class="built_in">list</span>(<span class="string">&quot;like u&quot;</span>) <span class="comment">#构造函数字符串创建列表</span></span><br><span class="line">list1=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;forever&quot;</span>,<span class="literal">True</span>] <span class="comment">#方括号</span></span><br><span class="line">list2=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x&gt;<span class="number">2</span>] <span class="comment">#列表推导式</span></span><br><span class="line"><span class="comment"># [&#x27;l&#x27;, &#x27;i&#x27;, &#x27;k&#x27;, &#x27;e&#x27;, &#x27; &#x27;, &#x27;u&#x27;]</span></span><br><span class="line"><span class="comment"># [1, 23, 4, &#x27;i&#x27;, &#x27;forever&#x27;, True]</span></span><br><span class="line"><span class="comment"># [3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构造函数初始化list</span></span><br><span class="line">_<span class="built_in">list</span> = <span class="built_in">list</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">#元组创建列表 [1, 2, 3]</span></span><br><span class="line">_<span class="built_in">list</span> = <span class="built_in">list</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;) <span class="comment"># [1, 2, 3]集合创建列表</span></span><br><span class="line">_<span class="built_in">list</span> = <span class="built_in">list</span>(&#123;<span class="string">&quot;a&quot;</span> : <span class="number">1</span>, <span class="string">&quot;b&quot;</span> : <span class="number">2</span>&#125;) <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;] 字典创建列表</span></span><br><span class="line">_<span class="built_in">list</span> = <span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">if</span>(x &gt; <span class="number">5</span>)) <span class="comment"># 列表推导式创建列表 [6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><blockquote><p>关于列表的访问</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">a.append(<span class="number">11</span>)</span><br><span class="line">a.insert(<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>) <span class="comment">#下标为1的位置加入&#x27;x&#x27;</span></span><br><span class="line">b = <span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">111</span>,<span class="number">114</span>))</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="comment">#[1, &#x27;x&#x27;, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 111, 112, 113]</span></span><br><span class="line">a.remove(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">a.pop(<span class="built_in">len</span>(a) - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">del</span> a[a.index(<span class="number">112</span>)]</span><br><span class="line"><span class="comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 111]</span></span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="number">1</span>)) <span class="comment">#统计元素出现个数 1</span></span><br><span class="line">a.reverse() <span class="comment">#反转</span></span><br><span class="line">a.sort() <span class="comment">#默认正排序</span></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>) <span class="comment">#逆排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a)) <span class="comment">#函数返回排序后的对象, 不改变操作对象, 也是默认正排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a, reverse=<span class="literal">True</span>))</span><br><span class="line">a.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sort函数补充</span></span><br><span class="line">b = [[<span class="string">&quot;a&quot;</span>, <span class="number">15</span>], [<span class="string">&quot;b&quot;</span>, <span class="number">12</span>], [<span class="string">&quot;c&quot;</span>, <span class="number">10</span>]] <span class="comment">#拥有子列表的列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line">b.sort(key=cmp, reverse = <span class="literal">True</span>) <span class="comment">#通过对比索引为1的元素进行sort, key为指定排序的依据</span></span><br><span class="line"><span class="comment">#[[&#x27;a&#x27;, 15], [&#x27;b&#x27;, 12], [&#x27;c&#x27;, 10]]</span></span><br><span class="line">b.sort(key = <span class="keyword">lambda</span> y: y[<span class="number">1</span>]) <span class="comment">#接受一个参数y 并返回y[1]</span></span><br><span class="line"><span class="comment">#[[&#x27;c&#x27;, 10], [&#x27;b&#x27;, 12], [&#x27;a&#x27;, 15]]</span></span><br><span class="line"></span><br><span class="line">c = [<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;dasdasdas&#x27;</span>,<span class="string">&#x27;h1&#x27;</span>]</span><br><span class="line">c.sort(key = <span class="built_in">len</span>) <span class="comment">#依据len进行排序</span></span><br><span class="line"><span class="comment"># [&#x27;h1&#x27;, &#x27;apple&#x27;, &#x27;dasdasdas&#x27;]</span></span><br><span class="line"></span><br><span class="line">k=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">k.sort(key=<span class="keyword">lambda</span> x:x) <span class="comment">#sort函数默认接受返回布尔类型的函数作为参数</span></span><br><span class="line">k.sort(key=<span class="keyword">lambda</span> x:-x)</span><br><span class="line"><span class="comment"># [1, 2, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment"># [5, 4, 3, 2, 2, 1]</span></span><br></pre></td></tr></table></figure><h2 id="2-2-tuple-元组"><a href="#2-2-tuple-元组" class="headerlink" title="2.2 tuple(元组)"></a>2.2 tuple(元组)</h2><p>有序的<code>不可变</code>序列<br>元组用于存储任意大小的数据集合, 可以是不同数据类型, 包括元组(嵌套)</p><blockquote><p>关于元组的初始化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=(<span class="number">1</span>) </span><br><span class="line">b=(<span class="number">1</span>,) <span class="comment">#加了逗号, 括号才被理解为元组的()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment">#&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b)) <span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">t1 = (<span class="string">&quot;aa&quot;</span>, )</span><br><span class="line">t1 = <span class="built_in">tuple</span>(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">t1 = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)) <span class="comment">#默认为生成器对象&lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line">t1 = <span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><blockquote><p>元组的访问和遍历</p></blockquote><p>简单的for遍历, 可以访问, 但是无法修改和删除, 这也是和列表最大的区别<br>因此其常用的成员函数较少</p><ul><li>.count(x)</li><li>.index(x)</li><li>.len()</li></ul><p><code>ps</code>: 当元组内放置一个列表, 该子列表可以进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">m[<span class="number">3</span>][<span class="number">0</span>]=<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="2-3-序列"><a href="#2-3-序列" class="headerlink" title="2.3 序列"></a>2.3 序列</h2><p>序列是基本的数据结构, 常见的序列有, 字符串, 元组, 列表</p><blockquote><p>序列的通用操作</p></blockquote><p><strong>切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;0123456789&quot;</span></span><br><span class="line"><span class="comment"># 切片[i:j:k] 操作并不会改变原来的序列, 只是返回一个新序列</span></span><br><span class="line"><span class="comment"># i 表示切片的开始, j 表示切片的结束, k 表示步长, 即打印每隔k步打印一次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="built_in">len</span>(<span class="built_in">str</span>)]) <span class="comment"># 等价于 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[::])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>]) <span class="comment"># 1234</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">3</span>])) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">4</span>:<span class="number">1</span>:-<span class="number">1</span>])  <span class="comment"># i &gt; j 返回一个空序列, 若 k&lt;0 即可配合倒序</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>[::-<span class="number">1</span>] <span class="comment">#因此可以通过这种方式,将序列倒序</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>[::-<span class="number">1</span>][::-<span class="number">1</span>] <span class="comment">#get</span></span><br></pre></td></tr></table></figure><p><strong>连接和复制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">b = <span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line">c = a + b <span class="comment">#(1, 2, 4, 5) </span></span><br><span class="line">d = a * <span class="number">3</span> <span class="comment">#(1, 2, 1, 2, 1, 2)</span></span><br></pre></td></tr></table></figure><p><strong>成员检查</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">11</span> <span class="keyword">not</span> <span class="keyword">in</span> d)</span><br></pre></td></tr></table></figure><p><strong>内置函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d)) <span class="comment"># 6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(d)) <span class="comment"># 6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(d)) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p><strong>序列的相互转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;hi&quot;</span></span><br><span class="line">list_ = <span class="built_in">list</span>(<span class="built_in">str</span>)</span><br><span class="line">tuple_ = <span class="built_in">tuple</span>(<span class="built_in">str</span>)</span><br><span class="line">tuple_ = <span class="built_in">list</span>(tuple_) <span class="comment">#元组转列表</span></span><br><span class="line">list_ = <span class="built_in">tuple</span>(list_) <span class="comment">#列表转元组</span></span><br><span class="line"></span><br><span class="line">f = [<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&quot;nine&quot;</span>,<span class="string">&quot;tse&quot;</span>]</span><br><span class="line">e = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(e.join(f)) <span class="comment"># hininetse</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(f)) <span class="comment">#[&#x27;h&#x27;, &#x27;i&#x27;, &#x27;nine&#x27;, &#x27;tse&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>关于str()函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">10</span>))  <span class="comment"># 将整数转换为字符串 &#x27;10&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">3.14</span>) ) <span class="comment"># 将浮点数转换为字符串 &#x27;3.14&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 将列表转换为字符串 &#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)))  <span class="comment"># 将元组转换为字符串 &quot;(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;))  <span class="comment"># 将字典转换为字符串 &quot;&#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 25&#125;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-dict-字典"><a href="#2-4-dict-字典" class="headerlink" title="2.4 dict(字典)"></a>2.4 dict(字典)</h2><blockquote><p>字典的创建</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#花括号创建字典</span></span><br><span class="line">a = &#123;<span class="string">&quot;key1&quot;</span> : <span class="number">1</span>, <span class="string">&quot;key2&quot;</span> : <span class="number">2</span>&#125; <span class="comment"># &#123;&#x27;key1&#x27;: 1, &#x27;key2&#x27;: 2&#125;  </span></span><br><span class="line">a[<span class="string">&quot;key1&quot;</span>] = <span class="number">2</span> <span class="comment"># &#123;&#x27;key1&#x27;: 2, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#函数创建字典</span></span><br><span class="line">b = [(<span class="string">&quot;red&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;green&quot;</span>,<span class="number">3</span>)]</span><br><span class="line">c = <span class="built_in">dict</span>(b) <span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;green&#x27;: 3&#125;</span></span><br><span class="line">c = <span class="built_in">dict</span>(red = <span class="number">1</span>, blue = <span class="number">2</span>) <span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;blue&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#推导式创建字典</span></span><br><span class="line">p = &#123;x : x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)&#125; <span class="comment"># &#123;1: 2, 2: 4, 3: 6, 4: 8, 5: 10&#125;</span></span><br><span class="line">l = [(<span class="string">&quot;red&quot;</span>, <span class="number">1</span>),(<span class="string">&quot;green&quot;</span>, <span class="number">3</span>)]</span><br><span class="line">p = &#123;x : j <span class="keyword">for</span> x, j <span class="keyword">in</span> l&#125; <span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;green&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>字典的更新</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span> = &#123;<span class="string">&quot;sewerperson&quot;</span> : &#123;<span class="string">&quot;music&quot;</span> : <span class="number">700</span>, <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;man&quot;</span>&#125;, <span class="string">&quot;nientail&quot;</span> : &#123;<span class="string">&quot;music&quot;</span> : <span class="number">200</span>, <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;women&quot;</span>&#125;&#125;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">&quot;ninetse&quot;</span>] = &#123;<span class="string">&quot;music&quot;</span> : <span class="number">0</span>, <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;manman&quot;</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>.keys()) <span class="comment">#dict_keys([&#x27;sewerperson&#x27;, &#x27;nientail&#x27;, &#x27;ninetse&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>.values()) <span class="comment">#dict_values([&#123;&#x27;music&#x27;: 700, &#x27;sex&#x27;: &#x27;man&#x27;&#125;, &#123;&#x27;music&#x27;: 200, &#x27;sex&#x27;: &#x27;women&#x27;&#125;, &#123;&#x27;music&#x27;: 0, &#x27;sex&#x27;: &#x27;manman&#x27;&#125;])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">map</span>.items()) <span class="comment">#dict_items([(&#x27;sewerperson&#x27;, &#123;&#x27;music&#x27;: 700, &#x27;sex&#x27;: &#x27;man&#x27;&#125;), (&#x27;nientail&#x27;, &#123;&#x27;music&#x27;: 200, &#x27;sex&#x27;: &#x27;women&#x27;&#125;), (&#x27;ninetse&#x27;, &#123;&#x27;music&#x27;: 0, &#x27;sex&#x27;: &#x27;manman&#x27;&#125;)])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">map</span>: <span class="comment">#直接遍历key</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;key is <span class="subst">&#123;key&#125;</span>, value is <span class="subst">&#123;<span class="built_in">map</span>[key]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#key is sewerperson, value is &#123;&#x27;music&#x27;: 700, &#x27;sex&#x27;: &#x27;man&#x27;&#125;</span></span><br><span class="line"><span class="comment">#key is nientail, value is &#123;&#x27;music&#x27;: 200, &#x27;sex&#x27;: &#x27;women&#x27;&#125;</span></span><br><span class="line"><span class="comment">#key is ninetse, value is &#123;&#x27;music&#x27;: 0, &#x27;sex&#x27;: &#x27;manman&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.pop(<span class="string">&quot;ninetse&quot;</span>) <span class="comment">#直接清除key and value</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">map</span>[<span class="string">&quot;nientail&quot;</span>]</span><br><span class="line"><span class="comment">#&#123;&#x27;sewerperson&#x27;: &#123;&#x27;music&#x27;: 700, &#x27;sex&#x27;: &#x27;man&#x27;&#125;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>字典的复制和查询函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a.get(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;404&quot;</span>))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(a.get(<span class="string">&quot;k3&quot;</span>))        <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(a.get(<span class="string">&quot;k3&quot;</span>,<span class="string">&quot;404&quot;</span>))  <span class="comment"># 404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line">b = a</span><br><span class="line">c = a.copy()</span><br><span class="line">a[<span class="string">&quot;k1&quot;</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># &#123;&#x27;k1&#x27;: 2, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># &#123;&#x27;k1&#x27;: 2, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment">#&#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br></pre></td></tr></table></figure><p><code>ps: 字典转为 list , tuple , set 都会只保留 key</code></p><h2 id="2-5-set-集合"><a href="#2-5-set-集合" class="headerlink" title="2.5 set(集合)"></a>2.5 set(集合)</h2><p>可容纳不同类型<br>集合的特点是, 无序(元素位置和创建时不一), 不会出现重复元素</p><blockquote><p>集合的创建</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="string">&#x27;black&#x27;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="number">1</span>&#125; <span class="comment"># 花括号创建集合 &#123;1, &#x27;blue&#x27;, &#x27;white&#x27;, &#x27;black&#x27;&#125;</span></span><br><span class="line">s1 = <span class="built_in">set</span>(<span class="string">&quot;ninetse&quot;</span>) <span class="comment"># set()函数创建 &#123;&#x27;i&#x27;, &#x27;t&#x27;, &#x27;n&#x27;, &#x27;e&#x27;, &#x27;s&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">m1 = [<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">m2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">s1 = <span class="built_in">set</span>(m1) <span class="comment"># &#123;2, 3, 4, &#x27;1&#x27;&#125;</span></span><br><span class="line">s1 = <span class="built_in">set</span>(m2) <span class="comment"># &#123;1, 2, 3, &#x27;2&#x27;&#125;</span></span><br><span class="line">s1 = <span class="built_in">set</span>()   <span class="comment"># set()</span></span><br><span class="line"></span><br><span class="line">s1 = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)&#125; <span class="comment"># 推导式创建 &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;</span></span><br></pre></td></tr></table></figure><p><code>集合的访问: 由于set是无序的, 所以无法用下标访问, 但还是可以用for访问</code></p><blockquote><p>集合的常用方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">a.add(<span class="number">9</span>) <span class="comment"># 添加</span></span><br><span class="line">a.remove(<span class="number">9</span>) <span class="comment"># 移除, 不存在就报错</span></span><br><span class="line">a.discard(<span class="number">5</span>) <span class="comment"># 移除, 不存在返回None</span></span><br><span class="line">a.pop() <span class="comment">#随即移除</span></span><br><span class="line"></span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a.union(b)) <span class="comment">#并集 &#123;2, 3, 4, 5, 9&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.difference(b)) <span class="comment"># &#123;4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(b.difference(a)) <span class="comment"># &#123;9, 2, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span> <span class="keyword">in</span> b) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> b) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">a.clear() <span class="comment"># set()</span></span><br><span class="line"><span class="keyword">del</span> a   <span class="comment"># 直接全删, 若再次调用会直接报错</span></span><br></pre></td></tr></table></figure><p><code>ps : 在集合中, 还重载了 各类运算符, 如 &lt;=, ==, !=, &amp;(交集), |(并集), -(差集), ^(差集)</code></p><hr><h1 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h1><p>在python中, 貌似没有成员函数, 而被称之为方法<br>函数内部创建的变量为局部变量<br>函数内部若想<code>修改</code>全局变量, 需要在函数内先将要访问的变量前 + global</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">oo</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line"><span class="built_in">print</span>(oo(<span class="number">1</span>, <span class="number">4</span>)) <span class="comment"># None, 没有返回值的函数</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a+=<span class="number">100</span></span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数有多个返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">x, y = func() <span class="comment"># 1 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(func())) <span class="comment"># # &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">True</span></span><br><span class="line">a, b, c = func1() <span class="comment"># 1 hello True</span></span><br><span class="line"><span class="built_in">print</span>(func1()) <span class="comment"># (1, &#x27;hello&#x27;, True)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(func1())) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#缺省参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x,y,z = <span class="number">9</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line"><span class="built_in">print</span>(func3(x = <span class="number">1</span>, y = <span class="number">2</span>, z = <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(func3(x = <span class="number">1</span>, y = <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入参数的个数不受限制, 以元组的形式接受实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcc</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;args的类型是<span class="subst">&#123;<span class="built_in">type</span>(args)&#125;</span>,值是<span class="subst">&#123;args&#125;</span>&quot;</span>)</span><br><span class="line">funcc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="comment"># args的类型是&lt;class &#x27;tuple&#x27;&gt;,值是(1, 2, 3, &#x27;小明&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入参数的个数不受限制, 以字典的形式接受实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funccc</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;kwargs的类型是<span class="subst">&#123;<span class="built_in">type</span>(kwargs)&#125;</span>,值是<span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line">funccc(key1=<span class="number">1</span>,key2=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># kwargs的类型是&lt;class &#x27;dict&#x27;&gt;,值是&#123;&#x27;key1&#x27;: 1, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#函数作为参数传入函数</span></span><br><span class="line">a=<span class="number">19</span>;b=<span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">func</span>):</span><br><span class="line">    result=func(a,b)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">compute(a,b) <span class="comment"># 39</span></span><br><span class="line">text(compute) <span class="comment"># 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lambda定义匿名函数</span></span><br><span class="line">a=<span class="number">19</span>;b=<span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computee</span>):</span><br><span class="line">    result=computee(a,b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">text(<span class="keyword">lambda</span> x,y:x+y) <span class="comment"># 39</span></span><br></pre></td></tr></table></figure><h1 id="4-文件操作"><a href="#4-文件操作" class="headerlink" title="4. 文件操作"></a>4. 文件操作</h1><blockquote><p>文件读取</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_file_info</span>(<span class="params">file_name</span>):</span><br><span class="line">    f = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(file_name, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(f)) <span class="comment"># # &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> reason:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open file fail&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 如果未抛出异常会进入else</span></span><br><span class="line">        <span class="built_in">print</span>(f.read()) <span class="comment">#读取文件并打印</span></span><br><span class="line">    <span class="keyword">finally</span>: <span class="comment"># 该部分都会执行</span></span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">2</span>)) <span class="comment">#读取n个字符</span></span><br><span class="line"><span class="built_in">print</span>(f.readline(<span class="number">5</span>)) <span class="comment"># 读取当前行的字符, 若超过当前行字符, 则读取下一行</span></span><br><span class="line"><span class="built_in">print</span>(f.readline()) <span class="comment">#默认读取当前行所有字符</span></span><br><span class="line"><span class="built_in">print</span>(f.readlines(<span class="number">1</span>)) <span class="comment"># 读取 n 行封装至列表内, 无参数则把文件每一行都封装 [&#x27;\\name\n&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f: </span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.read()) <span class="comment">#续着上次未读完的继续</span></span><br><span class="line">f.close() <span class="comment">#关闭文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf=8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.readlines())</span><br><span class="line"><span class="built_in">print</span>(f.read()) <span class="comment"># ValueError: I/O operation on closed file.</span></span><br></pre></td></tr></table></figure><blockquote><p>文件的写操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="comment"># 如果存在直接覆盖, 不存在就新建</span></span><br><span class="line">f.write(<span class="string">&quot;add&quot;</span>) <span class="comment"># write 并没有真正写入硬盘中, 而是放置于缓冲区</span></span><br><span class="line">f.flush()   <span class="comment"># 直到调用 flush() 或 close() 时, 缓冲区中的内容才真正写入</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding= <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f: <span class="comment"># 追加</span></span><br><span class="line">    f.write(<span class="string">&quot;new&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        w = line.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(w)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> w:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&quot;the&quot;</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;the出现的次数是<span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>, <span class="string">&quot;r&quot;</span>,encoding = <span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    k = f.read()</span><br><span class="line">p = k.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.count(<span class="string">&quot;the&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        line.strip()</span><br><span class="line">        g = <span class="built_in">open</span>(<span class="string">&quot;xxx.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        g.write(<span class="string">f&quot;<span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">data=f.read()</span><br><span class="line">data=data.replace(<span class="string">&quot;replace me&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">data=data[:-<span class="number">2</span>] <span class="comment">#略去后两个字符</span></span><br></pre></td></tr></table></figure><hr><h1 id="5-异常"><a href="#5-异常" class="headerlink" title="5. 异常"></a>5. 异常</h1><p>常见异常 : </p><ul><li>assertionError assert (后面条件为假)</li><li>attributeError (尝试访问未知的对象属性)</li><li>index Error (索引超出序列范围)</li><li>keyError (字典中找到不存在的关键字)</li><li>osError (操作系统产生的异常)</li><li>nameError (尝试访问一个不存在的变量)</li><li>synataxError python (语法错误)</li><li>typeError (不同类型之间的无效操作)</li><li>zerodivisionError (除零错误)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;none.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error &quot;</span>, <span class="built_in">str</span>(reason)) <span class="comment">#error [Errno 2] No such file or directory: &#x27;none.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> reason: <span class="comment">#输入不是数字</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error &quot;</span>, <span class="built_in">str</span>(result))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> reason: <span class="comment">#输入0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;annoymouse error %s&quot;</span>%<span class="built_in">str</span>(reason))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result: <span class="comment">#二者都是捕获所有异常, 是等价的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some error %s&quot;</span> %result)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some error&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;none error&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dont care error&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>异常的传递</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1 start&quot;</span>)</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2 start&quot;</span>)</span><br><span class="line">    func1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2 end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func2()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> op:</span><br><span class="line">        <span class="built_in">print</span>(op)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># func2 start</span></span><br><span class="line"><span class="comment"># func1 start</span></span><br><span class="line"><span class="comment"># division by zero</span></span><br></pre></td></tr></table></figure><hr><h1 id="6-模块和包"><a href="#6-模块和包" class="headerlink" title="6. 模块和包"></a>6. 模块和包</h1><blockquote><p>外部模块的引入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time <span class="comment">#引入模块</span></span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="comment"># 直接引入模块对应的功能, 只需要模块部分功能</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> * <span class="comment"># 引入模块所有功能</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> op <span class="comment"># 用别名代替功能</span></span><br><span class="line">op(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line">t.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>自定义模块和包</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file: app0.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">surplus</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">    </span><br><span class="line"><span class="comment">#file: app1.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x - y)</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">surplus</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">add(<span class="number">9</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>: <span class="comment"># 只有当程序是直接执行的才会进入</span></span><br><span class="line">    add(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">__all__ = [<span class="string">&#x27;add&#x27;</span>] <span class="comment">#控制那些功能会被导入</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#file: app2.py</span></span><br><span class="line"><span class="keyword">from</span> pakage.app0 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pakage.app1 <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">7</span>, <span class="number">3</span>)) <span class="comment"># 8 4 4 后者会覆盖前者, 并且from时模块就开始执行</span></span><br><span class="line"><span class="built_in">print</span>(surplus(<span class="number">7</span>, <span class="number">3</span>)) <span class="comment"># 4, 调用的app0, 因为 app1 中使用了 __all__</span></span><br></pre></td></tr></table></figure><blockquote><p>引入第三方包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#国外</span></span><br><span class="line">pip install 第三方包名</span><br><span class="line"><span class="comment">#国内</span></span><br><span class="line">pip install https://pypi.tuna.tsinghua.edu.cn/simple/ 包名</span><br></pre></td></tr></table></figure><blockquote><p>json包</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;&#123;&quot;a&quot; : 1, &quot;b&quot; : 2, &quot;c&quot; : 3, &quot;name&quot; : &quot;中文&quot;&#125;&#x27;</span></span><br><span class="line">obj = json.loads(data) <span class="comment"># 将json格式的字符串转换为对象, 接受json字符串作为参数</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125; dict</span></span><br><span class="line">jsondata = json.dumps(obj) <span class="comment"># 将对象转换为json格式的字符串, 返回字符串</span></span><br><span class="line">readchinese = json.dumps(obj, ensure_ascii = <span class="literal">False</span>) <span class="comment">#禁用ASCII即可展现中文</span></span><br><span class="line"><span class="comment">#&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3, &quot;name&quot;: &quot;\u4e2d\u6587&quot;&#125;</span></span><br><span class="line"><span class="comment">#&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3, &quot;name&quot;: &quot;中文&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:/Users/sewerperson/Desktop/intro.cpp&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(obj, file) <span class="comment"># 将obj转换为json格式写入 file</span></span><br></pre></td></tr></table></figure><hr><h1 id="7-类"><a href="#7-类" class="headerlink" title="7. 类"></a>7. 类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    sex = <span class="string">&quot;man&quot;</span></span><br><span class="line">    age = <span class="number">1</span></span><br><span class="line">    __privatemsg = <span class="number">1980</span> <span class="comment">#私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__privatefunc</span>(<span class="params">self</span>): <span class="comment">#私有方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;private func&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">callprivate</span>(<span class="params">self</span>): <span class="comment">#公共方法可以调用</span></span><br><span class="line">        self.__privatefunc()</span><br><span class="line">        <span class="built_in">print</span>(self.__privatemsg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">classfunc</span>(<span class="params">self</span>): <span class="comment">#类方法, 必须加入参数 self</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;show my name <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sex, age</span>): <span class="comment">#魔术方法 操控原来的构造方法</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>): <span class="comment">#魔术方法 操控原来的str()</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;self.sex&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__it__</span>(<span class="params">self, other</span>): <span class="comment">#魔术方法, 操控原来的 &lt;</span></span><br><span class="line">        <span class="keyword">return</span> self.age &lt; other.age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>): <span class="comment">#操控原来的 &lt;=</span></span><br><span class="line">        <span class="keyword">return</span> self.age &lt;= other.age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self, other</span>): <span class="comment"># &gt;</span></span><br><span class="line">        <span class="keyword">return</span> self.age &gt; other.age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ge__</span>(<span class="params">self, other</span>): <span class="comment"># &gt;=</span></span><br><span class="line">        <span class="keyword">return</span> self.age &gt;= other.age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>): <span class="comment"># ==</span></span><br><span class="line">        <span class="keyword">return</span> self.age == other.age</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student2 = student(<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;manb&quot;</span>, <span class="number">18</span>) <span class="comment"># 构造方法</span></span><br><span class="line">student3 = student(<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;woman&quot;</span>, <span class="number">17</span>)</span><br><span class="line"><span class="built_in">print</span>(student2.__it__(student3)) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(student2 &lt; student3) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(student2 &lt;= student3) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(student2 &gt; student3) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(student2 &gt;= student3) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(student2 == student3) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(student2)) <span class="comment">#替换原本的str方法 tail, manb</span></span><br></pre></td></tr></table></figure><blockquote><p>类的继承</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line">    name = <span class="string">&quot;honor&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ptname</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;im honor&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone2022</span>:</span><br><span class="line">    name = <span class="string">&quot;huawei&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ptname</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;im huawei&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone2024</span>(phone, phone2022): <span class="comment">#同名方法或成员, 左边优先级最高</span></span><br><span class="line">    age = <span class="number">12</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ptage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;12 year&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ptname</span>(<span class="params">self</span>): <span class="comment">#同名直接复写</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;im xiaomi&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>().ptname() <span class="comment">#默认查找最左边的父类</span></span><br><span class="line">        phone2022.ptname(self) <span class="comment">#传参</span></span><br><span class="line"></span><br><span class="line">a = phone2024()</span><br><span class="line">a.ptname()</span><br><span class="line"><span class="comment">#im xiaomi</span></span><br><span class="line"><span class="comment">#im honor</span></span><br><span class="line"><span class="comment">#im huawei</span></span><br></pre></td></tr></table></figure><blockquote><p>多态的简单实现</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bark&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;mi&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">voice</span>(<span class="params">a : animal</span>):</span><br><span class="line">    a.speak()</span><br><span class="line"></span><br><span class="line">dog = dog()</span><br><span class="line">cat = cat()</span><br><span class="line">voice(dog)</span><br><span class="line">voice(cat)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">airconditioner</span>: <span class="comment">#定义抽象类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>): <span class="comment">#抽象方法 子类需要复写抽象方法</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;??? me&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">geli</span>(<span class="title class_ inherited__">airconditioner</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;geli make cool&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;geli make warm&quot;</span>)</span><br><span class="line">    <span class="comment">#def swing(self):</span></span><br><span class="line">    <span class="comment">#    print(&quot;geli wave&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">meidi</span>(<span class="title class_ inherited__">airconditioner</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;meidi make cool&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;meidi make warm&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;meidi wave&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makecool</span>(<span class="params"><span class="built_in">object</span> : airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.make_cool()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makewarm</span>(<span class="params"><span class="built_in">object</span> : airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.make_hot()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params"><span class="built_in">object</span> : airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.swing()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">airmeidi = meidi()</span><br><span class="line">airgeli = geli()</span><br><span class="line">makecool(airgeli)</span><br><span class="line">makecool(airmeidi)</span><br><span class="line"></span><br><span class="line">makewarm(airgeli)</span><br><span class="line">makewarm(airmeidi)</span><br><span class="line"></span><br><span class="line">swing(airgeli) <span class="comment"># ??? me</span></span><br><span class="line">swing(airmeidi)</span><br></pre></td></tr></table></figure><hr><h1 id="8-类型注解"><a href="#8-类型注解" class="headerlink" title="8. 类型注解"></a>8. 类型注解</h1><p>类型注解(Type Annotations)为变量、参数、函数返回值等提供了类型信息。<br>这在代码的可读性, 代码分析和开发工具的支持方面有帮助<br>但是在运行时, 类型注解<code>不会强制执行</code>, 也不会引发错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a:<span class="built_in">int</span>, b:<span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">3</span>, <span class="string">&quot;hello&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(func(<span class="string">&quot;hello&quot;</span>, <span class="number">9</span>))</span><br><span class="line"><span class="comment">#3 hello</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#hello 9</span></span><br><span class="line"><span class="comment">#hello</span></span><br></pre></td></tr></table></figure><blockquote><p>Union 的使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line">mylist : <span class="built_in">list</span>[<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = [<span class="number">1</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment"># mylist 为 list类型, list内部只有两种类型(int或str)</span></span><br><span class="line">mydict : <span class="built_in">dict</span>[<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>], <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = &#123;<span class="number">1</span> : <span class="number">2</span>, <span class="number">1</span> : <span class="string">&quot;hi&quot;</span>, <span class="string">&quot;l&quot;</span> : <span class="number">1</span>, <span class="string">&quot;i&quot;</span> : <span class="string">&quot;b&quot;</span>&#125; </span><br><span class="line"><span class="comment"># mydict 为dict 类型, dict内部可 两种类型 : 两种类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">useunion</span>(<span class="params">data : <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]:</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 传入的参数为 int 或 str类型, 返回也是</span></span><br></pre></td></tr></table></figure><h1 id="9-进阶功能"><a href="#9-进阶功能" class="headerlink" title="9. 进阶功能"></a>9. 进阶功能</h1><h2 id="9-1-闭包"><a href="#9-1-闭包" class="headerlink" title="9.1 闭包"></a>9.1 闭包</h2><blockquote><p>不定义全局变量, 让函数持续访问或修改一个外部的变量</p></blockquote><p><code>nonlocal</code>是一个关键字, 用于在嵌套函数中声明一个变量为非局部变量<br>默认情况下, 内部函数只能读取外部函数的变量, 而不能修改它们<br>在内部函数中使用<code>nonlocal</code>关键字声明一个变量时<br>Python会沿着作用域链向上查找, 找到最近的外部<code>函数中</code>具有相同名的变量, 并将其标记为非局部变量<br><code>nonlocal</code>关键字只能在嵌套函数中使用，而不能在全局作用域或单独的函数中使用<br>无需通过定义全局变量，就可以通过函数实现持续访问，操作某个值<br>闭包使用的变量在函数内，很难被错误的误改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">account_mount</span>(<span class="params">total = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">money, choose = <span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> total</span><br><span class="line">        <span class="keyword">if</span> choose:</span><br><span class="line">            total += money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;put money: +<span class="subst">&#123;money&#125;</span>, remain:<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total -= money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;get money: -<span class="subst">&#123;money&#125;</span>, remain:<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> atm</span><br><span class="line"></span><br><span class="line">atm = account_mount()</span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">100</span>, <span class="literal">False</span>)</span><br><span class="line"><span class="comment">#put money: +100, remain:100</span></span><br><span class="line"><span class="comment">#put money: +100, remain:200</span></span><br><span class="line"><span class="comment">#get money: -100, remain:100</span></span><br></pre></td></tr></table></figure><p>缺点 : 由于一直持续的引用外部函数的变量，会<code>占用内存</code></p><h2 id="9-2-装饰器"><a href="#9-2-装饰器" class="headerlink" title="9.2 装饰器"></a>9.2 装饰器</h2><blockquote><p>不修改原函数内容情况下为函数添加新功能</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">sleep</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;now sleep&quot;</span>)</span><br><span class="line">        sleep()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;now get up&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer </span><span class="comment">#装饰器 等价于 sleep = outer(sleep)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sleeping&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sleep()</span><br><span class="line"><span class="comment">#now sleep</span></span><br><span class="line"><span class="comment">#sleeping</span></span><br><span class="line"><span class="comment">#now get up</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若没有装饰器则需要这样写</span></span><br><span class="line">sheep = outer(sleep)</span><br><span class="line">sheep()</span><br></pre></td></tr></table></figure><h2 id="9-3-多线程"><a href="#9-3-多线程" class="headerlink" title="9.3 多线程"></a>9.3 多线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">song</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;sing <span class="subst">&#123;song&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">music</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;dance <span class="subst">&#123;music&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sing = threading.Thread(target = sing, args = (<span class="string">&quot;kk&quot;</span>, )) <span class="comment">#返回的是Thread对象 , arg要以元组的形式传出</span></span><br><span class="line">dance = threading.Thread(target = dance, kwargs = &#123;<span class="string">&quot;music&quot;</span> : <span class="string">&quot;msg&quot;</span>&#125;)  <span class="comment">#kwargs要以字典的形式传出</span></span><br><span class="line"></span><br><span class="line">sing.start()</span><br><span class="line">dance.start()</span><br></pre></td></tr></table></figure><p><code>target</code>:  指定线程要执行的函数或可调用对象 默认是 None<br><code>args</code>:  指定传递给 target 的位置参数。默认是 () 元组<br><code>kwargs</code>:  指定传递给 target 的关键字参数 默认是 {} 字典<br><code>daemon</code>:  指定线程是否是守护线程, 守护线程在主线程结束后会自动终止, 默认是 None, 表示继承主线程的守护状态<br><code>name</code>:  指定线程的名字, 默认会生成一个唯一的线程名, 如 Thread-1、Thread-2</p><h2 id="9-4-网络编程"><a href="#9-4-网络编程" class="headerlink" title="9.4 网络编程"></a>9.4 网络编程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">socket_severe = socket.socket()</span><br><span class="line">      </span><br><span class="line"><span class="comment">#服务端绑定在本机和端口</span></span><br><span class="line">socket_severe.bind((<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>))</span><br><span class="line">      </span><br><span class="line"><span class="comment">#设置服务端允许连接的数量</span></span><br><span class="line">socket_severe.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待客户端连接，阻塞语句, 成功链接了才会执行下一句, 返回一个二元元组</span></span><br><span class="line">client_socket, client_address = socket_severe.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;client address is <span class="subst">&#123;client_address&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client_msg = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    <span class="comment">#阻塞语句,只有成功链接了才会执行下一句</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;client send : <span class="subst">&#123;client_msg&#125;</span>&quot;</span>)</span><br><span class="line">      </span><br><span class="line">    severe_sentmsg = <span class="built_in">input</span>(<span class="string">&quot;reply to client : &quot;</span>)</span><br><span class="line">    client_socket.send(severe_sentmsg.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> severe_sentmsg == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">client_socket.close()</span><br><span class="line">socket_severe.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#client端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">client_socket=socket.socket()</span><br><span class="line"><span class="comment">#客户端连接具体的服务端</span></span><br><span class="line">client_socket.connect((<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sent_data=<span class="built_in">input</span>(<span class="string">&quot;send server is : &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> sent_data == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    client_socket.send(sent_data.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">    recv_data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;server reply : <span class="subst">&#123;recv_data.decode(<span class="string">&#x27;UTF-8&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure><h2 id="9-5-正则表达式"><a href="#9-5-正则表达式" class="headerlink" title="9.5 正则表达式"></a>9.5 正则表达式</h2><blockquote><p>正则表达式, 又称规则表达式( Regular Expression), 是使用单个字符串来描述、匹配某个句法规则的字符串<br>常被用来检索、替换那些符合其个模式(规则)的文本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment"># RE模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;python ppypyyp python&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>) <span class="comment">#match对象实例化, 0索引到len-1索引如果不是 所查找的, 忽略掉后面直接返回none </span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">#&lt;re.Match object; span=(0, 6), match=&#x27;python&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(result.span()) <span class="comment">#(0, 6)</span></span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment">#python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;ppppythonnn pp pythonnn&quot;</span></span><br><span class="line">result = re.search(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>) <span class="comment">#只找第一个, 失败返回none</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">#&lt;re.Match object; span=(3, 9), match=&#x27;python&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(result.span()) <span class="comment">#(3, 9)</span></span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment">#python</span></span><br><span class="line"></span><br><span class="line">result = re.findall(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment">#[&#x27;python&#x27;, &#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>元字符匹配</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符之外的任何单个字符</td></tr><tr><td>[]</td><td>匹配[]中列举的字符</td></tr><tr><td>\d</td><td>匹配任何数字（等同于<code>[0-9]</code>）</td></tr><tr><td>\D</td><td>匹配任何非数字</td></tr><tr><td>\w</td><td>匹配任何字母数字或下划线字符</td></tr><tr><td>\W</td><td>匹配任何非字母数字或下划线字符</td></tr><tr><td>\s</td><td>匹配任何空白字符（空格、制表、换行）</td></tr><tr><td>\S</td><td>匹配任何非空白字符</td></tr></tbody></table><p><strong>数量匹配</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配0次或多次</td></tr><tr><td>+</td><td>匹配1次或多次</td></tr><tr><td>?</td><td>匹配0次或1次</td></tr><tr><td>{n}</td><td>精确匹配<code>n</code>次</td></tr><tr><td>{n,}</td><td>匹配至少<code>n</code>次</td></tr><tr><td>{n,m}</td><td>匹配至少<code>n</code>次，但不超过<code>m</code>次</td></tr></tbody></table><p><strong>边界匹配</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr><tr><td>\b</td><td>匹配单词边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr><tr><td>\A</td><td>匹配整个字符串的开始</td></tr><tr><td>\Z</td><td>匹配整个字符串的结束</td></tr></tbody></table><p><strong>分组匹配</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>()</td><td>用于创建分组</td></tr><tr><td>|</td><td>匹配左右任意一个表达式</td></tr></tbody></table><blockquote><p>案例</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">只能数字和字母, 长度6-10</span><br><span class="line">^[0-9a-zA-Z]&#123;6, 10&#125;$</span><br><span class="line"></span><br><span class="line">纯数字, 长度5-11, 第一位不为0</span><br><span class="line">^[1-9][0-9]&#123;4, 10&#125;$</span><br><span class="line"></span><br><span class="line">只允许qq,163,gmail三种邮箱地址</span><br><span class="line">^[\w]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$</span><br></pre></td></tr></table></figure><p>以上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基本语法&quot;&gt;&lt;a href=&quot;#1-基本语法&quot; class=&quot;headerlink&quot; title=&quot;1. 基本语法&quot;&gt;&lt;/a&gt;1. 基本语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;python为弱语言类型, 根据赋予的值决定具体数据类型&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    <category term="音视频" scheme="http://example.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GB28181</title>
    <link href="http://example.com/2024/04/18/GB28181/"/>
    <id>http://example.com/2024/04/18/GB28181/</id>
    <published>2024-04-18T07:38:27.000Z</published>
    <updated>2024-05-01T13:08:29.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-国标GB28181摄像头模拟"><a href="#1-国标GB28181摄像头模拟" class="headerlink" title="1. 国标GB28181摄像头模拟"></a>1. 国标GB28181摄像头模拟</h1><blockquote><p>实现了将h264封装ps流并打包rtp推流到服务器<br>先抛开标题, 整体的GBServer需要交互Sip和流媒体(ZLMediaKit实现)两部分<br>目前先了解Sip信令部分</p></blockquote><p>ZLMediaKit获取实时流API<br><a href="127.0.0.1/index/api/getMediaList">127.0.0.1&#x2F;index&#x2F;api&#x2F;getMediaList</a></p><h2 id="1-1-Sip信令简介"><a href="#1-1-Sip信令简介" class="headerlink" title="1.1 Sip信令简介"></a>1.1 Sip信令简介</h2><p><a href="https://www.cnblogs.com/11sgXL/p/13553517.html">详细协议介绍见此</a></p><ul><li><p><code>Sip(session initiation protocol)</code> : 由互联网工程任务组制定的, 用于多方多媒体通信的框架协议<br>是一个基于文本的应用层控制协议, 独立于底层传输协议, 用于建立、修改和终止IP网络上的双方或多方多媒体会话</p></li><li><p><code>信令</code> : 控制电路的信号，是终端和终端、终端和网络之间传递的一种消息，专门用来控制电路，建立、管理、删除连接, 以使用户能够正常通过这些连接进行通信</p></li><li><p><code>事务</code> : 客户和服务器之间的操作从第 1 个请求至最终响应为止的所有消息构成一个SIP事务<br>一个正常的呼叫一般包含三个事务<br>其中，呼叫启动包含两个操作请求：邀请(Invite)和证实(ACK)，前者需要回送响应, 后者只是证实已收到最终响应, 不需要回送响应<br>呼叫终结包含一个操作请求：Bye</p></li><li><p><code>SIP URL (Uniform Resource Locators)</code> : 一般结构为<br>SIP: 用户名: 口令 @ 主机: 端口;传送参数: 用户参数; 方法参数; 生存期参数; 服务器地址参数? 头部名&#x3D;头部值</p></li></ul><p><img src="/img/GB2.png"></p><p><em><strong>Sip信令交互过程</strong></em></p><p><img src="/img/GB1.png"></p><ol><li><p>摄像头(客户端)像服务段发送注册请求</p></li><li><p>服务器回复 <code>401</code> (未授权, 未携带密码)</p></li><li><p>摄像头收到 <code>401</code> 第二次发起注册, 此次注册携带密码(密钥)</p></li><li><p>服务器返回注册成功(<code>200</code> OK)</p></li><li><p>服务器像摄像头发起 <code>invite</code> 请求,告诉摄像机我要接受流媒体,并包含SDP(解释自己能处理的流)</p></li><li><p>摄像机收到 <code>invite</code> 后回复 <code>100</code>(Trying) </p></li><li><p>摄像机传输message(必要信息,ip port…)</p></li><li><p>摄像机回复状态码 <code>101</code>(Establishment)</p></li><li><p>摄像机回复状态码 <code>200</code>, 并且包含了 SDP(摄像机告诉服务器, 我的摄像头有哪些流)</p></li><li><p>服务器收到 <code>200</code></p></li><li><p>服务器收到SDP后, 向摄像机发送 <code>ACK</code> 确认</p></li><li><p>摄像机开始推流</p></li><li><p>摄像机发送 <code>BYE</code></p></li><li><p>服务器回复 <code>200</code></p></li></ol><h2 id="1-2-PS流"><a href="#1-2-PS流" class="headerlink" title="1.2 PS流"></a>1.2 PS流</h2><p>PS流封装标准如下,其详细信息暂不去了解</p><p><img src="/img/GB3.png"></p><blockquote><p>GB28181要求的RTP流格式</p></blockquote><p>I帧的PS流格式，这里需要注意的是SPS、PPS之前要加上PES头部<br>如下图所示, 其中绿色部分就是我们拿到的H.264裸流数据, 须将它拆分成三段并在前面加上PES头部<br>这一点在GB28181标准中没有细说，需要通过分析海康IPC流才能看出<br><img src="/img/GB4.png"></p><p>一般情况下IDR帧很大, 超过了RTP的负载长度限制(1400字节), 所以上面这一个I帧要拆分成若干包RTP分多次发送<br>第一包的结构如上图所示, 第二包以后RTP的结构就简单多了, 如下<br><img src="/img/GB5.png"></p><p>上面提到的是I帧的情况,P&#x2F;B帧的帧格式较为简单了, 因为它既没有SYS、PSM, 也没有SPS、PPS<br><img src="/img/GB6.png"></p><p>P&#x2F;B帧大小一般不超过1400字节, 如果超过1400字节, 也需分成多包RTP数据进行传输, 超出1400部分的第二包RTP结构<br><img src="/img/GB7.png"></p><blockquote><p>头部信息:</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RTPHeader</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_HDR_LEN 12</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gb28181_make_rtp_header</span><span class="params">(<span class="type">char</span> *pData, <span class="type">int</span> marker_flag, <span class="type">unsigned</span> <span class="type">short</span> cseq, <span class="type">long</span> <span class="type">long</span> curpts, <span class="type">unsigned</span> <span class="type">int</span> ssrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bits_buffer_s      bitsBuffer;</span><br><span class="line">    <span class="keyword">if</span> (pData == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    bitsBuffer.i_size = RTP_HDR_LEN;</span><br><span class="line">    bitsBuffer.i_data = <span class="number">0</span>;</span><br><span class="line">    bitsBuffer.i_mask = <span class="number">0x80</span>;</span><br><span class="line">    bitsBuffer.p_data =    (<span class="type">unsigned</span> <span class="type">char</span> *)(pData);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(bitsBuffer.p_data, <span class="number">0</span>, RTP_HDR_SIZE);</span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">2</span>, RTP_VERSION);    <span class="comment">// rtp version   版本号，固定为2  </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span>);              <span class="comment">// rtp padding     </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span>);              <span class="comment">// rtp extension     </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">4</span>, <span class="number">0</span>);              <span class="comment">// rtp CSRC count </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>, (marker_flag));  <span class="comment">// rtp marker  结束标志位，一帧图像的最后一包RTP置1</span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">7</span>, <span class="number">96</span>);             <span class="comment">// rtp payload type，96代表PS</span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">16</span>, (cseq));        <span class="comment">// rtp sequence      </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">32</span>, (curpts));      <span class="comment">// rtp timestamp      </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">32</span>, (ssrc));        <span class="comment">// rtp SSRC          </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PSH(PS Header)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PS_HDR_LEN  14</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gb28181_make_ps_header</span><span class="params">(<span class="type">char</span> *pData, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> s64Scr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> lScrExt = (s64Scr) % <span class="number">100</span>;    </span><br><span class="line">    s64Scr = s64Scr / <span class="number">100</span>;</span><br><span class="line">    bits_buffer_s      bitsBuffer;</span><br><span class="line">    bitsBuffer.i_size = PS_HDR_LEN;    </span><br><span class="line">    bitsBuffer.i_data = <span class="number">0</span>;</span><br><span class="line">    bitsBuffer.i_mask = <span class="number">0x80</span>;</span><br><span class="line">    bitsBuffer.p_data =    (<span class="type">unsigned</span> <span class="type">char</span> *)(pData);</span><br><span class="line">    <span class="built_in">memset</span>(bitsBuffer.p_data, <span class="number">0</span>, PS_HDR_LEN);</span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">32</span>, <span class="number">0x000001BA</span>);              <span class="comment">//start codes 起始码 </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">2</span>,     <span class="number">1</span>);                    <span class="comment">//marker bits &#x27;01b&#x27; </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">3</span>,     (s64Scr&gt;&gt;<span class="number">30</span>)&amp;<span class="number">0x07</span>);    <span class="comment">//System clock [32..30] </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>,     <span class="number">1</span>);                    <span class="comment">//marker bit </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">15</span>, (s64Scr&gt;&gt;<span class="number">15</span>)&amp;<span class="number">0x7FFF</span>);     <span class="comment">//System clock [29..15] </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>,     <span class="number">1</span>);                    <span class="comment">//marker bit </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">15</span>, s64Scr &amp; <span class="number">0x7fff</span>);         <span class="comment">//System clock [14..0] </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>,     <span class="number">1</span>);                    <span class="comment">//marker bit </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">9</span>,     <span class="number">0</span>);                    <span class="comment">//SCR extension </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>,     <span class="number">1</span>);                    <span class="comment">//marker bit </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">22</span>, (<span class="number">255</span>)&amp;<span class="number">0x3fffff</span>);          <span class="comment">//bit rate(n units of 50 bytes per second.) </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">2</span>,     <span class="number">3</span>);                    <span class="comment">//marker bits &#x27;11&#x27; </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">5</span>,     <span class="number">0x1f</span>);                 <span class="comment">//reserved(reserved for future use) </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">3</span>,     <span class="number">0</span>);                    <span class="comment">//stuffing length </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SYS，它包含了流类型信息，比如音频还是视频、视频编码格式</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_HDR_LEN 18</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gb28181_make_sys_header</span><span class="params">(<span class="type">char</span> *pData)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    bits_buffer_s      bitsBuffer;</span><br><span class="line">    bitsBuffer.i_size = SYS_HDR_LEN;</span><br><span class="line">    bitsBuffer.i_data = <span class="number">0</span>;</span><br><span class="line">    bitsBuffer.i_mask = <span class="number">0x80</span>;</span><br><span class="line">    bitsBuffer.p_data =    (<span class="type">unsigned</span> <span class="type">char</span> *)(pData);</span><br><span class="line">    <span class="built_in">memset</span>(bitsBuffer.p_data, <span class="number">0</span>, SYS_HDR_LEN);</span><br><span class="line">    <span class="comment">//system header </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">32</span>, <span class="number">0x000001BB</span>);    <span class="comment">//start code </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">16</span>, SYS_HDR_LEN<span class="number">-6</span>);  <span class="comment">// 减6，是因为start code加上length这两位，占了6个字节 </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,     <span class="number">1</span>);            <span class="comment">//marker_bit </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">22</span>, <span class="number">50000</span>);        <span class="comment">//rate_bound </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">1</span>);            <span class="comment">//marker_bit </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">6</span>,  <span class="number">1</span>);            <span class="comment">//audio_bound </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">0</span>);            <span class="comment">//fixed_flag  </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">1</span>);            <span class="comment">//CSPS_flag  </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">1</span>);            <span class="comment">//system_audio_lock_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">1</span>);            <span class="comment">//system_video_lock_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">1</span>);            <span class="comment">//marker_bit </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">5</span>,  <span class="number">1</span>);            <span class="comment">//video_bound </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">0</span>);            <span class="comment">//dif from mpeg1 </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">7</span>,  <span class="number">0x7F</span>);         <span class="comment">//reserver </span></span><br><span class="line">    <span class="comment">//audio stream bound </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">8</span>,  <span class="number">0xC0</span>);         <span class="comment">//stream_id 音频的流id </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">2</span>,  <span class="number">3</span>);            <span class="comment">//marker_bit  </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">0</span>);            <span class="comment">//PSTD_buffer_bound_scale </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">13</span>, <span class="number">512</span>);          <span class="comment">//PSTD_buffer_size_bound </span></span><br><span class="line">    <span class="comment">//video stream bound </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">8</span>,  <span class="number">0xE0</span>);         <span class="comment">//stream_id 视频的流id </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">2</span>,  <span class="number">3</span>);            <span class="comment">//marker_bit  </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>,  <span class="number">1</span>);            <span class="comment">//PSTD_buffer_bound_scale </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">13</span>, <span class="number">2048</span>);         <span class="comment">//PSTD_buffer_size_bound </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PSM，这里面记录了媒体信息，比如音视频的编码格式：</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gb28181_make_psm_header</span><span class="params">(<span class="type">char</span> *pData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    bits_buffer_s      bitsBuffer;</span><br><span class="line">    bitsBuffer.i_size = PSM_HDR_LEN; </span><br><span class="line">    bitsBuffer.i_data = <span class="number">0</span>;</span><br><span class="line">    bitsBuffer.i_mask = <span class="number">0x80</span>;</span><br><span class="line">    bitsBuffer.p_data =    (<span class="type">unsigned</span> <span class="type">char</span> *)(pData);</span><br><span class="line">    <span class="built_in">memset</span>(bitsBuffer.p_data, <span class="number">0</span>, PSM_HDR_LEN);  <span class="comment">//24Bytes</span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">24</span>,<span class="number">0x000001</span>);       <span class="comment">//start code </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0xBC</span>);           <span class="comment">//map stream id </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">16</span>,<span class="number">18</span>);             <span class="comment">//program stream map length  </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span>);              <span class="comment">//current next indicator  </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">2</span>, <span class="number">3</span>);              <span class="comment">//reserved </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">5</span>, <span class="number">0</span>);              <span class="comment">//program stream map version </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">7</span>, <span class="number">0x7F</span>);           <span class="comment">//reserved  </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span>);              <span class="comment">//marker bit  </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">16</span>,<span class="number">0</span>);              <span class="comment">//programe stream info length </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">16</span>, <span class="number">8</span>);             <span class="comment">//elementary stream map length    is </span></span><br><span class="line">    <span class="comment">//video </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0x1B</span>);           <span class="comment">//stream_type 视频编码格式H.264 </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0xE0</span>);           <span class="comment">//elementary_stream_id </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">16</span>, <span class="number">0</span>);             <span class="comment">//elementary_stream_info_length  </span></span><br><span class="line">    <span class="comment">//audio </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0x90</span>);           <span class="comment">//stream_type 音频编码格式G711 </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0xC0</span>);           <span class="comment">//elementary_stream_id </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">16</span>, <span class="number">0</span>);             <span class="comment">//elementary_stream_info_length is </span></span><br><span class="line">    <span class="comment">//crc (2e b9 0f 3d) </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0x45</span>);           <span class="comment">//crc (24~31) bits </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0xBD</span>);           <span class="comment">//crc (16~23) bits </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0xDC</span>);           <span class="comment">//crc (8~15) bits </span></span><br><span class="line">    <span class="built_in">bits_write</span>(&amp;bitsBuffer, <span class="number">8</span>, <span class="number">0xF4</span>);           <span class="comment">//crc (0~7) bits </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PES头部,它记录了帧的时间戳,DTS可以不填,如果填写要和PTS保持一致,且同一帧数据的PTS要也要一样(即SPS、PPS、IDR的PES要一致)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PES_HDR_LEN 19</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">gb28181_make_pes_header</span><span class="params">(<span class="type">char</span> *pData, <span class="type">int</span> stream_id, <span class="type">int</span> payload_len, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> pts, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> dts)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    bits_buffer_s      bitsBuffer;</span><br><span class="line">    bitsBuffer.i_size = PES_HDR_LEN;</span><br><span class="line">    bitsBuffer.i_data = <span class="number">0</span>;</span><br><span class="line">    bitsBuffer.i_mask = <span class="number">0x80</span>;</span><br><span class="line">    bitsBuffer.p_data =    (<span class="type">unsigned</span> <span class="type">char</span> *)(pData);</span><br><span class="line">    <span class="built_in">memset</span>(bitsBuffer.p_data, <span class="number">0</span>, PES_HDR_LEN);</span><br><span class="line">    <span class="comment">//system header </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">24</span>,<span class="number">0x000001</span>);    <span class="comment">//start code </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">8</span>, (stream_id));    <span class="comment">//streamID </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">16</span>,(payload_len)+<span class="number">13</span>);    <span class="comment">//packet_len pes剩余头部以及后面的es长度之和，比如SPS长度+13 </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">2</span>, <span class="number">2</span> );        <span class="comment">//&#x27;10&#x27; </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">2</span>, <span class="number">0</span> );        <span class="comment">//scrambling_control </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );        <span class="comment">//priority </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );        <span class="comment">//data_alignment_indicator </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//copyright </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//original_or_copy </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );        <span class="comment">//PTS_flag 是否有PTS </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );        <span class="comment">//DTS_flag 是否有DTS信息 </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//ESCR_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//ES_rate_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//DSM_trick_mode_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//additional_copy_info_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//PES_CRC_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">0</span> );        <span class="comment">//PES_extension_flag </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">8</span>, <span class="number">10</span>);        <span class="comment">//header_data_length  </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//PTS,DTS     </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">4</span>, <span class="number">3</span> );                    <span class="comment">//&#x27;0011&#x27; </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">3</span>, ((pts)&gt;&gt;<span class="number">30</span>)&amp;<span class="number">0x07</span> );     <span class="comment">//PTS[32..30] </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">15</span>,((pts)&gt;&gt;<span class="number">15</span>)&amp;<span class="number">0x7FFF</span>);    <span class="comment">//PTS[29..15] </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">15</span>,(pts)&amp;<span class="number">0x7FFF</span>);          <span class="comment">//PTS[14..0] </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">4</span>, <span class="number">1</span> );                    <span class="comment">//&#x27;0001&#x27; </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">3</span>, ((dts)&gt;&gt;<span class="number">30</span>)&amp;<span class="number">0x07</span> );     <span class="comment">//DTS[32..30] </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">15</span>,((dts)&gt;&gt;<span class="number">15</span>)&amp;<span class="number">0x7FFF</span>);    <span class="comment">//DTS[29..15] </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">15</span>,(dts)&amp;<span class="number">0x7FFF</span>);          <span class="comment">//DTS[14..0] </span></span><br><span class="line">    <span class="built_in">bits_write</span>( &amp;bitsBuffer, <span class="number">1</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间戳的比特位结构，下图表示的比较清晰<br><img src="/img/GB8.jpg"></p><p>难度太高,暂时搁置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-国标GB28181摄像头模拟&quot;&gt;&lt;a href=&quot;#1-国标GB28181摄像头模拟&quot; class=&quot;headerlink&quot; title=&quot;1. 国标GB28181摄像头模拟&quot;&gt;&lt;/a&gt;1. 国标GB28181摄像头模拟&lt;/h1&gt;&lt;blockquote&gt;
&lt;p</summary>
      
    
    
    
    <category term="音视频" scheme="http://example.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="GB28181" scheme="http://example.com/tags/GB28181/"/>
    
  </entry>
  
  <entry>
    <title>RTMP</title>
    <link href="http://example.com/2024/03/18/RTMP/"/>
    <id>http://example.com/2024/03/18/RTMP/</id>
    <published>2024-03-18T04:14:50.000Z</published>
    <updated>2024-04-16T14:29:41.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-协议简介"><a href="#1-协议简介" class="headerlink" title="1. 协议简介"></a>1. 协议简介</h1><h2 id="1-1-RTMP"><a href="#1-1-RTMP" class="headerlink" title="1.1 RTMP"></a>1.1 RTMP</h2><p>RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议<code>基于TCP</code>，是一个协议族，包括RTMP基本协议RTMPT&#x2F;RTMPS&#x2F;RTMPE等多种变种。<br>RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash&#x2F;AIR平台和支持RTMP协议的流媒体&#x2F;交互服务器之间进行音视频和数据通信。<br>支持该协议的软件包括Adobe Media Server&#x2F;Ultrant Media Server&#x2F;red5等。RTMP与HTTP一样，都属于TCP&#x2F;IP四层模型的应用层。</p><ul><li><p>应用层协议，依靠TCP保证可靠传输。</p></li><li><p>默认端口：<code>1953</code>，可能被防火墙屏蔽。</p></li><li><p>在流媒体&#x2F;交互服务器之间进行音视频和数据<code>通信</code>。</p></li></ul><h2 id="1-2-HLS"><a href="#1-2-HLS" class="headerlink" title="1.2 HLS"></a>1.2 HLS</h2><p>HLS(HTTP Live Streaming)是一个由苹果公司提出的<strong>基于HTTP</strong>的流媒体网络传输协议。<br>所以在 Apple 的全系列产品包括 iPhone、 iPad、safari 都不需要安装任何插件就可以原生支持播放 HLS， 现在 Android 也加入了对 HLS 的支持。</p><p><font color = red>工作原理 : 把整个流分成一个个小的基于HTTP的TS文件来下载，每次只下载一些。</font><br>当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。</p><p>HLS请求基本的HTTP报文，与实时传输协议（<code>RTP</code>)不同<br><font color = red>HLS可以穿过任何允许HTTP数据通过的防火墙或者代理服务器。它也很容易使用内容分发网络来传输媒体流。 </font></p><p>HLS缺陷:</p><ul><li>实时性差，延迟高。延迟基本在 10s+ 以上</li><li>ts 切片较小，会造成海量小文件，对存储和缓存有影响</li></ul><p>HLS规范：</p><ul><li><p>视频的封装格式是<code>TS</code>。</p></li><li><p>音视频采用<code>H264</code>编码和<code>AAC</code>编码。</p></li><li><p>除了<code>TS</code>视频文件本身，还定义了用来控制播放的<code>m3u8</code>索引文件</p></li></ul><h2 id="1-3-对比RTMP，HLS-HTTP-FLV"><a href="#1-3-对比RTMP，HLS-HTTP-FLV" class="headerlink" title="1.3  对比RTMP，HLS, HTTP-FLV"></a>1.3  对比RTMP，HLS, HTTP-FLV</h2><p>在开始之前，我们先要明确一个问题，根据应用场景不同，流媒体协议分为：</p><ul><li><p>推流协议</p></li><li><p>拉流播放协议</p></li></ul><blockquote><p><code>RTMP</code>  &gt;&gt; 双端<br><code>HLS</code> &gt;&gt; 拉流端<br><code>HTTP-FLV</code> &gt;&gt; 拉流端。</p></blockquote><table><thead><tr><th></th><th>RTMP</th><th>HTTP-FLV</th><th>HLS</th></tr></thead><tbody><tr><td>传输协议</td><td>TCP</td><td>HTTP</td><td>HTTP</td></tr><tr><td>视频封装格式</td><td>flv</td><td>flv</td><td>ts</td></tr><tr><td>延时</td><td>1-3秒</td><td>1-3秒</td><td>5-20秒</td></tr><tr><td>Web支持</td><td>H5需要使用插件</td><td>H5需要使用插件</td><td>支持H5</td></tr><tr><td>数据</td><td>连续流</td><td>连续流</td><td>切片文件</td></tr></tbody></table><p>ps: H5 是 <code>HTML5</code></p><p><strong>1. RTMP &amp; HTTP-FLV</strong></p><ul><li><p>这两个协议实际上传输的数据是一样的，数据都是<code>flv文件的tag</code>。</p></li><li><p>RTMP：实时播放服务器的 FLV 文件或服务器转发的FLV数据，本地<code>无 FLV 缓存文件</code>，<code>FLV保密性好</code>。</p></li><li><p>HTTP-FLV：将 FLV <code>下载到本地</code>再播放，FLV<code>保密性不好</code>。</p></li></ul><p><strong>2. HLS &amp; RTMP</strong></p><ul><li><p>RTMP：采用<code>1935</code>端口，而非HTTP<code>80</code>端口，在某些网络环境下可能被<code>屏蔽</code>。</p></li><li><p>RTMP：是一种<code>有状态协议</code>，需要为每一个播放视频流的客户端维护状态，服务器平滑<code>扩展难度大</code>。</p></li><li><p>HLS：基于<code>无状态HTTP协议</code>，客户端只需要按顺序使用下载的TS文件就可，负载均衡如同普通的HTTP文件服务器负载均衡一样。</p></li></ul><p><strong>3. HTTP-FLV</strong></p><p>HTTP-FLV 结合了 RTMP 和 HLS 的优点，易用（HTTP协议）低延时（flv）</p><p><strong>4. 为什么 RTPM 比 HLS 快</strong></p><ul><li><p>HLS拉流：服务器音视频数据切片生成 TS 文件</p></li><li><p>HLS拉流：客户端必须等待服务端至少生成一个 TS 文件<br>通常下载完两个媒体文件后才能保证不同分段音视频间的无缝连接。</p></li><li><p>HLS一直在等切片数据，<code>RTMP不需要切片</code></p></li></ul><hr><h1 id="2-封装简介"><a href="#2-封装简介" class="headerlink" title="2. 封装简介"></a>2. 封装简介</h1><h2 id="2-1-FLV"><a href="#2-1-FLV" class="headerlink" title="2.1 FLV"></a>2.1 FLV</h2><p><strong>1. FLV的封装格式</strong></p><p><code>FLV</code>（Flash Video），Adobe公司设计开发的一种流行的流媒体格式，由于其视频文件体积轻巧、封装简单等特点，使其很适合在互联网上进行应用。除了播放视频，在直播时也可以使用。采用FLV格式封装的文件后缀为<code>.flv</code>，格式如下（<code>FLV = FLV Header + Body</code>）</p><p><img src="/img/mv1.13.png"></p><p><strong>2. FLV Header</strong></p><p>Header 部分记录了FLV的类型、版本、流信息、Header 长度等。<br>一般整个Header占用<code>9</code>个字节，大于9个字节则表示头部信息在这基础之上还存在扩展数据。<br>FLV Header 的信息排布如下所示：</p><p><img src="/img/mv1.14.png"></p><p><strong>3. FLV Body</strong></p><p>Body 是由一个个<code>Tag</code>组成的，每个Tag下面有一块<code>4</code>个字节的空间，用来记录这个Tag 的长度。<br>这个后置的<code>PreviousTagSize</code>用于<code>逆向</code>读取处理，表示的是前面的Tag的大小。<br>FLV Body 的信息排布如下：</p><p><img src="/img/mv1.15.png"></p><p><strong>4. FLV Tag</strong></p><p>每个Tag 也是由两部分组成的：<code>Tag Header</code> 和 <code>Tag Data</code>。<br>Tag Header 存放了当前Tag的类型，数据长度、时间戳、时间戳扩展、StreamsID等信息，然后再接着数据区Tag Data。<br>Tag的排布如下：</p><p><img src="/img/mv1.16.png"></p><p><strong>5. Tag Data</strong></p><p>Tag Data分成 <code>Audio</code>，<code>Video</code>，<code>Script</code> 三种。</p><p><strong>5.1 Audio Tag Data</strong></p><p>音频的Tag Data又分为 <code>AudioTagHeader</code> 和 <code>Data</code> 数据区，其排布结构如下图所示：</p><p><img src="/img/mv1.17.png"></p><p><strong>5.2 Video Tag Data</strong></p><ul><li>Video Tag 由<code>一个字节的VideoTagHeader</code> 和 <code>Video数据区</code>部分组成</li></ul><p><img src="/img/mv1.18.png"></p><ul><li>Video数据区部分格式不确定。对于<code>AVC (H.264)</code>编码部分，Video数据区排布如下:</li></ul><p><img src="/img/mv1.19.png"></p><p><strong>5.3 Script Tag Data</strong></p><p><img src="/img/mv1.20.png"></p><h2 id="2-2-TS"><a href="#2-2-TS" class="headerlink" title="2.2 TS"></a>2.2 TS</h2><blockquote><p><code>TS</code>（Transport Stream，<code>传输流</code>），一种常见的视频封装格式，是基于<code>MPEG-2</code>的封装格式（所以也叫<code>MPEG-TS</code>），后缀为<code>.ts</code>。</p></blockquote><p><strong>1. TS的分层结构</strong></p><p>TS文件分为三层，如下所示（可以倒序看更好理解）：</p><ul><li><p><code>TS层</code>（Transport Stream）<br>在PES层基础上加入了数据流识别信息和传输信息。</p></li><li><p><code>PES层</code>（Packet Elemental Stream）<br>在ES层基础上加入时间戳（PTS&#x2F;DTS）等信息。</p></li><li><p><code>ES层</code>（Elementary Stream）<br>压缩编码后的音视频数据。</p></li></ul><p><img src="/img/mv1.21.png"></p><p><strong>2. TS层</strong></p><blockquote><p>ts包大小<code>固定为188字节</code> ，ts层分为三个部分：<code>ts header</code>、<code>adaptation field</code>、<code>payload</code>。</p></blockquote><ul><li><p><code>ts header</code>固定<code>4</code>个字节；</p></li><li><p><code>adaptation field</code>可能存在也可能不存在，主要作用是给不足188字节的数据做<code>填充</code>。</p></li><li><p><code>payload</code>是 <code>PES</code> 数据，或者<code>PAT</code>，<code>PMT</code>等。</p></li></ul><p>◆ ts Header + adaptation field 格式如下：</p><p><img src="/img/mv1.22.png"></p><p><strong>2.1 TS Header</strong></p><ul><li>TS Header格式如下：</li></ul><p><img src="/img/mv1.23.png"></p><ul><li><code>pid</code> 决定了<code>负载内容</code>的类型，主要包括：PAT表，PMT表，视频流，音频流。常用的PID值：</li></ul><table><thead><tr><th>表</th><th>PAT</th><th>CAT</th><th>TSDT</th><th>EIT,ST</th><th>RST,ST</th><th>TDT,TOT,ST</th></tr></thead><tbody><tr><td>PID</td><td>0x0000</td><td>0x0001</td><td>0x0002</td><td>0x0012</td><td>0x0013</td><td>0x0014</td></tr></tbody></table><p><strong>2.2 调整字段</strong></p><p><img src="/img/mv1.24.png"></p><p><strong>2.3 PAT表结构（指明PMT表的PID值）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TS_PAT</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> table_id                 :<span class="number">8</span>  <span class="comment">//固定位0x00，表示该表是PAT</span></span><br><span class="line">    <span class="type">unsigned</span> section_syntax_indicator :<span class="number">1</span>  <span class="comment">//段语法标志，固定为1</span></span><br><span class="line">    <span class="type">unsigned</span> zero                     :<span class="number">1</span>  <span class="comment">//固定为0</span></span><br><span class="line">    <span class="type">unsigned</span> reserved_1               :<span class="number">2</span>  <span class="comment">//第一个保留位</span></span><br><span class="line">    <span class="type">unsigned</span> section_length           :<span class="number">12</span> <span class="comment">//表示这个字节之后有用的字节数，包括CRC_32</span></span><br><span class="line">    <span class="type">unsigned</span> transport_stream_id      :<span class="number">16</span> <span class="comment">//传输流的ID，区别于一个网络中其他多路复用的流</span></span><br><span class="line">    <span class="type">unsigned</span> reserved_2               :<span class="number">2</span>  <span class="comment">//第二个保留位</span></span><br><span class="line">    <span class="type">unsigned</span> version_number           :<span class="number">5</span>  <span class="comment">//表示PAT的版本号</span></span><br><span class="line">    <span class="type">unsigned</span> current_next_indicator   :<span class="number">1</span>  <span class="comment">//表示发送的PAT是当前有效还是下一个有效，为1时代表当前有效</span></span><br><span class="line">    <span class="type">unsigned</span> section_number           :<span class="number">8</span>  <span class="comment">//如果PAT分段传输，那么此值每次递增1</span></span><br><span class="line">    <span class="type">unsigned</span> last_section_number      :<span class="number">8</span>  <span class="comment">//最后一个分段的号码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="type">unsigned</span> Program_number           :<span class="number">16</span> <span class="comment">//节目号</span></span><br><span class="line">        <span class="type">unsigned</span> Reversed_3               :<span class="number">3</span>  <span class="comment">//保留位</span></span><br><span class="line">        <span class="keyword">if</span>(Program_number == <span class="number">0</span>)</span><br><span class="line">            Network_id                    :<span class="number">13</span> <span class="comment">//网络信息表（NIT）的PID</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Program_MAP_PID               :<span class="number">13</span> <span class="comment">//节目映射表的PID，每个节目都有一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> CRC_32                   :<span class="number">32</span> <span class="comment">//CRC32校检码</span></span><br><span class="line">&#125;TS_PAT</span><br></pre></td></tr></table></figure><p><strong>2.4 PMT表（指明音视频流的PID值）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TS_program_map_section</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> Table_id                    :<span class="number">8</span>  <span class="comment">//标志PSI分段的内容，对于PMT，此值为0x02</span></span><br><span class="line">    <span class="type">unsigned</span> Section_syntax_indicator    :<span class="number">1</span>  <span class="comment">//置为1</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="string">&#x27;0&#x27;</span>                         :<span class="number">1</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">2</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> Section_length              :<span class="number">12</span> <span class="comment">//指明了自此到最后CRC_32的字节数</span></span><br><span class="line">    <span class="type">unsigned</span> Program_number              :<span class="number">16</span> <span class="comment">//指出该节目的节目号，与PAT表对应</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">2</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> Version_number              :<span class="number">5</span>  <span class="comment">//取值0-31，代表当前PMT的版本号</span></span><br><span class="line">    <span class="type">unsigned</span> Current_next_indicator      :<span class="number">1</span>  <span class="comment">//代表当前PMT是否有效</span></span><br><span class="line">    <span class="type">unsigned</span> Section_number              :<span class="number">8</span>  <span class="comment">//给出了当前所处段的数目</span></span><br><span class="line">    <span class="type">unsigned</span> Last_section_number         :<span class="number">8</span>  <span class="comment">//给出了最后一个分段，即分段的最大数目</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">3</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> PCR_PID                     :<span class="number">13</span> <span class="comment">//指示TS包的PCR值，该TS包含有PCR字段</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">4</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> Program_info_length         :<span class="number">12</span> <span class="comment">//该字段描述跟随其后对节目信息描述的字节数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">Descriptr</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="type">unsigned</span> Stream_type             :<span class="number">8</span>  <span class="comment">//0x00：保留， 0x01：MPEG1视频，0x02：MPEG2视频，0x03:MPEG1音频，0x04：MPEG2音频，0x05：私有字段，0x06：含有私有数据的PES包 ......</span></span><br><span class="line">        <span class="type">unsigned</span> Reserved                :<span class="number">3</span>  <span class="comment">//保留</span></span><br><span class="line">        <span class="type">unsigned</span> Elementary_PID          :<span class="number">13</span> <span class="comment">//指示TS包的PID，这些TS包含有相同的PID</span></span><br><span class="line">        <span class="type">unsigned</span> Reserved                :<span class="number">4</span>  <span class="comment">//保留</span></span><br><span class="line">        <span class="type">unsigned</span> ES_info_length          :<span class="number">12</span> <span class="comment">//指示跟随其后描述相关节目元素的字节数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N2; j++)</span><br><span class="line">            <span class="built_in">Descriptr</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> CRC_32                      :<span class="number">32</span> <span class="comment">//循环校检位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.5 补充</strong></p><ul><li><p>打包ts流时<code>PAT</code>和<code>PMT</code>表是没有调整字段的，不够的长度直接补<code>0xff</code>即可。</p></li><li><p><code>视频流</code>和<code>音频流</code>都需要加<code>adaptation field</code>，<font color = red>通常加在一个帧的第一个ts包和最后一个ts包里，中间的ts包不加。</font></p></li></ul><p><strong>3. PES 层</strong></p><ul><li><p><code>PES</code>（Packetized Elementary Stream，打包的ES），在 ES 层的基础上加入了时间戳（PTS&#x2F;TDS）等信息。</p></li><li><p>ES数据包比较大，加入PES头时需<code>将ES进行分割</code>，只在<code>第一个分割的ES上加PES头</code>，如下图所示</p></li></ul><p><img src="/img/mv1.25.png"></p><ul><li><p><code>PES packet length</code> — 指示PES 包中跟随该字段最后字节的字节数。0 值指示PES 包长度既未指示也未限定并且仅在这样的PES 包中才被允许，该PES 包的有效载荷由来自传输流包中所包含的视频基本流的字节组成。</p></li><li><p>PES结构如下：</p></li></ul><p><img src="/img/mv1.26.png"></p><ul><li>PES 关键字段说明</li></ul><p><img src="/img/mv1.27.png"></p><p><strong>4. ES 层</strong></p><ul><li><p><code>ES</code>（Elementary Stream，基本码流），就是<code>音视频编码数据流</code>，比如视频<code>H.264</code>，音频<code>AAC</code>。</p></li><li><p><font color = red>一个 ES 流中只包含一种类型的数据（视频，或音频，或字幕）。</font></p></li></ul><hr><h1 id="3-HLS-Server-demo"><a href="#3-HLS-Server-demo" class="headerlink" title="3. HLS_Server(demo)"></a>3. HLS_Server(demo)</h1><h2 id="3-1-ffmpeg-命令生成m3u8切片"><a href="#3-1-ffmpeg-命令生成m3u8切片" class="headerlink" title="3.1 ffmpeg 命令生成m3u8切片"></a>3.1 ffmpeg 命令生成m3u8切片</h2><blockquote><p>第一种方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx264 -c:a copy -f hls -hls_time 10 -hls_list_size 0 -hls_start_number 0 input/index.m3u8</span><br></pre></td></tr></table></figure><p><strong>注解 :</strong></p><ul><li>-<code>c:v</code> codec（编解码器）: video（视频）。 &#x3D;&#x3D; -vcodec</li><li>-<code>c:a</code> audio（音频）  &#x3D;&#x3D; -acodec </li><li>-<code>f</code> (format) 以<code>hls</code>格式</li><li>-<code>hls_time n</code>: 设置每片的长度，默认值为2,单位为秒</li><li>-<code>hls_list_size n</code>:设置播放列表保存的最多条目，设置为0会保存有所片信息，默认值为5</li><li>-<code>hls_start_number n</code>:设置播放列表中sequence number的值为number，默认值为0</li><li>-<code>hls_wrap n</code>:设置多少片之后开始覆盖，如果设置为0则不会覆盖，默认值为0<br> 这个选项能够避免在磁盘上存储过多的片，而且能够限制写入磁盘的最多的片的数量</li><li>input 文件需要自己新建</li></ul><blockquote><p>第二种方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -fflags flush_packets -max_delay 2 -flags -global_header </span><br><span class="line">-hls_time 5 -hls_list_size 0 -vcodec libx264 -acodec aac -r 30 -g 60 index.m3u8</span><br></pre></td></tr></table></figure><p><strong>注解:</strong></p><ul><li><code>-fflags</code> 设置输入&#x2F;输出文件或流的标志（flags）<br>用来激活或修改 FFmpeg 内部的标志，以控制特定的行为</li><li><code>-flush_packets</code> 导致 FFmpeg 立即输出已经在内存缓冲中的数据包（packets）<br>而不是等待缓冲区满或其他条件触发输出。</li><li><code>-max_delay 2</code>：设置最大延迟时间为 2 秒</li></ul><ul><li><p><code>-flags -global_header</code>：这是一个设置视频编码器标志的选项。在这个情况下，<code>-flags</code> 用于设置特定的编码器标志。<code>-global_header</code> 标志指示在视频流的第一个关键帧（I帧）中包含全局头信息（global headers），这对于某些视频流的处理和解码非常重要。</p></li><li><p><code>-vcodec libx264</code>：指定视频编码器为 libx264，用于对视频进行 H.264 编码。</p></li><li><p><code>-acodec aac</code>：指定音频编码器为 AAC，用于对音频进行 AAC 编码。</p></li></ul><h2 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h2><blockquote><p>Log.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> std::string <span class="title">GetCur_FormatTime</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">time_t</span> t = <span class="built_in">time</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">char</span> str[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">strftime</span>(str, <span class="built_in">sizeof</span>(str), format, <span class="built_in">localtime</span>(&amp;t));</span><br><span class="line">    std::string time;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGI(format, ...) \</span></span><br><span class="line"><span class="meta">fprintf(stderr, <span class="string">&quot;[INFO]%s, [%s:%d %s()]&quot;</span> format <span class="string">&quot;\n&quot;</span>, GetCur_FormatTime().data(), __FILE__, __LINE__,__func__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGE(format, ...) \</span></span><br><span class="line"><span class="meta">fprintf(stderr, <span class="string">&quot;[INFO]%s, [%s:%d %s()]&quot;</span> format <span class="string">&quot;\n&quot;</span>, GetCur_FormatTime().data(), __FILE__, __LINE__, __func__, ##__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><blockquote><p>main.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ffplay -i http://127.0.0.1:8080/index.m3u8</span></span><br><span class="line">    WSADATA wsadata;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsadata) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;WSAStartup error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> port = <span class="number">8080</span>;</span><br><span class="line">    SOCKET serverFd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    SOCKADDR_IN server_addr;</span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(serverFd, (SOCKADDR*)&amp;server_addr, <span class="built_in">sizeof</span>(SOCKADDR)) == SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;socket bind error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serverFd, SOMAXCONN) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;socket bind error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;wait new connect&quot;</span>);</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line">        SOCKADDR_IN accept_addr;</span><br><span class="line">        <span class="type">int</span> clientFd = <span class="built_in">accept</span>(serverFd, (SOCKADDR*)&amp;accept_addr, &amp;len);</span><br><span class="line">        <span class="keyword">if</span> (clientFd == SOCKET_ERROR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOGE</span>(<span class="string">&quot;accept connection error&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;new connect clientFd = %d&quot;</span>, clientFd);</span><br><span class="line">        <span class="function">Connection <span class="title">conn</span><span class="params">(clientFd)</span></span>;</span><br><span class="line">        conn.<span class="built_in">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(serverFd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>connection.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Log.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Connection</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Connection</span>(<span class="type">int</span> clientFd);</span><br><span class="line">    ~<span class="built_in">Connection</span>();</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> mclientFd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>connection.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;connection.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connection::<span class="built_in">Connection</span>(<span class="type">int</span> clientFd)</span><br><span class="line">    :<span class="built_in">mclientFd</span>(clientFd)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Connection::~<span class="built_in">Connection</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">closesocket</span>(mclientFd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">1500000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Connection::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> bufRecv[<span class="number">2000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> bufRecvSize = <span class="built_in">recv</span>(mclientFd, bufRecv, <span class="built_in">sizeof</span>(bufRecv), <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> uri[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//index0.ts, index1.ts</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* sep = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* line = <span class="built_in">strtok</span>(bufRecv, sep); <span class="comment">//before sep</span></span><br><span class="line">    <span class="keyword">while</span> (line)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;GET&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;GET %s HTTP/1.1\r\n&quot;</span>, &amp;uri) != <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">LOGE</span>(<span class="string">&quot;parse uri error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        line = <span class="built_in">strtok</span>(<span class="literal">nullptr</span>, sep); <span class="comment">//after sep</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;uri = %s\n&quot;</span>, uri);</span><br><span class="line"></span><br><span class="line">    std::string filename = <span class="string">&quot;D:/ffmpeg/learn/m3u8/test&quot;</span> + std::<span class="built_in">string</span>(uri);</span><br><span class="line">    FILE* fp = <span class="built_in">fopen</span>(filename.<span class="built_in">data</span>(), <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;fopen error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> buflen = <span class="built_in">fread</span>(buf, <span class="number">1</span>, <span class="built_in">sizeof</span>(buf), fp);</span><br><span class="line">    <span class="built_in">LOGI</span>(<span class="string">&quot;buflen = %d&quot;</span>, buflen);</span><br><span class="line">    <span class="keyword">if</span> (fp) <span class="built_in">fclose</span>(fp);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> http_headers[<span class="number">2000</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;/index.m3u8&quot;</span>, uri) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(http_headers, <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Access-Control-Allow-Origin: * \r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Connection: keep-alive\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Content-Length: %d\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Content-Type: application/vnd.apple.mpegurl; charset=utf-8\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Keep-Alive: timeout=30, max=100\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Server: hlsServer\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">            buflen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(http_headers, <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Access-Control-Allow-Origin: * \r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Connection: close\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Content-Length: %d\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Content-Type: video/mp2t; charset=utf-8\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Keep-Alive: timeout=30, max=100\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Server: hlsServer\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">            buflen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">send</span>(mclientFd, http_headers, <span class="built_in">strlen</span>(http_headers), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">send</span>(mclientFd, buf, buflen, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>抓包分析</strong></em></p><p><img src="/img/rtmp1.png"></p><hr><h1 id="4-Http-Flv-Server-demo"><a href="#4-Http-Flv-Server-demo" class="headerlink" title="4. Http-Flv Server(demo)"></a>4. Http-Flv Server(demo)</h1><h2 id="4-1-ffmpeg命令-mp4转flv"><a href="#4-1-ffmpeg命令-mp4转flv" class="headerlink" title="4.1 ffmpeg命令 mp4转flv"></a>4.1 ffmpeg命令 mp4转flv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg.exe -i source.mp4 -c:v libx264 -crf 24 destination.flv</span><br></pre></td></tr></table></figure><h2 id="4-2-源码"><a href="#4-2-源码" class="headerlink" title="4.2 源码"></a>4.2 源码</h2><blockquote><p>Log.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> std::string <span class="title">Get_CurTime</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* fmt = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">time_t</span> t = <span class="built_in">time</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">char</span> str[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">strftime</span>(str, <span class="built_in">sizeof</span>(str), fmt, <span class="built_in">localtime</span>(&amp;t));</span><br><span class="line">    <span class="function">std::string <span class="title">time</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGI(format, ...) \</span></span><br><span class="line"><span class="meta">fprintf(stderr, <span class="string">&quot;[INFO]%s [%s:%d %s()]&quot;</span> format<span class="string">&quot;\n&quot;</span>, Get_CurTime().data(), __FILE__, __LINE__, __func__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGE(format, ...) \</span></span><br><span class="line"><span class="meta">fprintf(stderr, <span class="string">&quot;[ERROR]%s [%s:%d %s()]&quot;</span> format<span class="string">&quot;\n&quot;</span>, Get_CurTime().data(), __FILE__, __LINE__, __func__, ##__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><blockquote><p>main.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> port = <span class="number">8080</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;D:/ffmpeg/learn/test.flv&quot;</span>;</span><br><span class="line"></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;WSAStartup error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SOCKADDR_IN sockAddr;</span><br><span class="line">    sockAddr.sin_family = AF_INET;</span><br><span class="line">    sockAddr.sin_addr.S_un.S_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    sockAddr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line"></span><br><span class="line">    SOCKET serverFd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(serverFd, (SOCKADDR*)&amp;sockAddr, <span class="built_in">sizeof</span>(SOCKADDR)) == SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;socket bind error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serverFd, SOMAXCONN) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;socket listen error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Expires 设置资源的有效期来控制http的缓存</span></span><br><span class="line">    <span class="comment">//pragma 用于客户端发送的请求中, 客户端会要求所有的中间服务器不返回缓存的资源</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> http_headers[] = \</span><br><span class="line">        <span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span> \</span><br><span class="line">        <span class="string">&quot;Access-Control-Allow-Origin: * \r\n&quot;</span> \</span><br><span class="line">        <span class="string">&quot;Content-Type: video/x-flv\r\n&quot;</span> \</span><br><span class="line">        <span class="string">&quot;Content-Length: -1\r\n&quot;</span> \</span><br><span class="line">        <span class="string">&quot;Connection: Keep-Alive\r\n&quot;</span> \</span><br><span class="line">        <span class="string">&quot;Expires: -1\r\n&quot;</span> \</span><br><span class="line">        <span class="string">&quot;Pragma: no-cache\r\n&quot;</span> \</span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    <span class="type">int</span> http_headersLen = <span class="built_in">strlen</span>(http_headers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;wait connection&quot;</span>);</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line">        SOCKADDR_IN accept_addr;</span><br><span class="line">        <span class="type">int</span> clientFd = <span class="built_in">accept</span>(serverFd, (SOCKADDR*)&amp;accept_addr, &amp;len);</span><br><span class="line">        <span class="keyword">if</span> (clientFd == SOCKET_ERROR)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LOGE</span>(<span class="string">&quot;accept connection error&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;new connetion clientFd = %d&quot;</span>, clientFd);</span><br><span class="line"></span><br><span class="line">        FILE* fp = <span class="built_in">fopen</span>(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!fp) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">5000</span>];</span><br><span class="line">        <span class="type">char</span> bufRecv[<span class="number">2000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="type">int</span> times = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++times;</span><br><span class="line">            <span class="keyword">if</span> (times == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> bufRecvSize = <span class="built_in">recv</span>(clientFd, bufRecv, <span class="number">2000</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">LOGI</span>(<span class="string">&quot;bufRecvSize = %d, bufRecv =\n%s&quot;</span>, bufRecvSize, bufRecv);</span><br><span class="line">                <span class="built_in">send</span>(clientFd, http_headers, http_headersLen, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line">                <span class="type">int</span> bufLen = <span class="built_in">fread</span>(buf, <span class="number">1</span>, <span class="built_in">sizeof</span>(buf), fp);</span><br><span class="line">                <span class="type">int</span> ret = <span class="built_in">send</span>(clientFd, (<span class="type">char</span>*)buf, bufLen, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fp) <span class="built_in">fclose</span>(fp);</span><br><span class="line">        <span class="built_in">closesocket</span>(clientFd);</span><br><span class="line">        <span class="built_in">LOGI</span>(<span class="string">&quot;close connect clientFd = %d&quot;</span>, clientFd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(serverFd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抓包分析</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i http://127.0.0.1:8080</span><br></pre></td></tr></table></figure><p><img src="/img/rtmp2.png"></p><p>与运行结果一致<br><img src="/img/rtmp3.png"></p><hr><h1 id="5-RTMPServer"><a href="#5-RTMPServer" class="headerlink" title="5. RTMPServer"></a>5. RTMPServer</h1><h2 id="5-1-RTMP协议推流流程简介"><a href="#5-1-RTMP协议推流流程简介" class="headerlink" title="5.1 RTMP协议推流流程简介"></a>5.1 RTMP协议推流流程简介</h2><p>RTMP协议规范详细可看<code>rtmp_specification_1.0.pdf</code><br><a href="https://www.cnblogs.com/Kingfans/p/7083100.html">中文版</a></p><p>TCP三次握手后, RTMP协议的流媒体推流需经过以下步骤:</p><p><strong>握手</strong><br>RTMP连接都是以握手作为开始的<br>服务端与客户端需要通过3次交换报文完成握手,RTMP是由三个静态大小的块,而非可变的块<br>客户端与服务器发送相同的三个chunk,客户端发送c0,c1,c2,服务端发送s0,s1,s2</p><p><img src="/img/rtmp4.png"></p><blockquote><p>客户端发送 C0，C1 块，握手开始<br>服务端在发送 S0 和 S1 之前必须等待接收 C0, 也可等待 C1, 发送 S2 之前必须等待接收 C1<br>客户端在发送 C2 之前客户端必须等待接收 S1<br>客户端在发送任何数据之前客户端必须等待接收 S2<br>服务端在发送任何数据之前必须等待接收 C2.</p></blockquote><p><strong>RTMP建立连接</strong></p><p><img src="/img/rtmp5.png"></p><blockquote><ol><li>客户端发送<code>命令消息</code>中的连接(<code>connect</code>)到服务器，请求与一个服务应用实例建立连接。</li><li>服务器接收到连接命令消息后，发送确认窗口大小(<code>Window Acknowledgement Size</code>)协议消息到客户端，同时连接到连接命令中提到的<code>应用程序</code>, 并且发送设置带宽协议(<code>Set Peer Bandwidth</code>)消息到客户端。</li><li>客户端处理设置带宽协议(<code>Set Peer Bandwidth</code>)消息后，发送确认窗口大小(<code>Window Acknowledgement Size</code>)协议消息到服务器端。</li><li>服务器发送<code>用户控制消息</code>中的流开始(<code>Stream Begin</code>)消息到客户端, 并发送<code>命令消息</code>中的结果(<code>_result</code>)，通知客户端连接的状态。</li></ol></blockquote><p><strong>RTMP建流</strong></p><p><img src="/img/rtmp6.png"></p><blockquote><p>客户端在收到来自服务器的建流命令(<code>createstream</code>)的成功结果(<code>_result</code>)后发送<code>play</code>命令。<br>服务器在接收到<code>play</code>命令后，发送一个来设置块大小(<code>SetChunkSize</code>)消息。<br>再发送另一个用户控制消息，指定事件“流记录”(<code>StreamIsRecorded</code>)和<code>流ID</code>, 这个消息的头2字节携带事件类型，最后4字节携带流ID。<br>再发送另一个用户控制消息，指定事件“流开始”(<code>StreamBegin</code>)。向客户端指示流的开始。<br>如果客户端发送的播放(<code>play</code>)命令成功，服务器发送命令消息(<code>onStatus</code>)，<code>NeStream.Play.Start &amp; NeStream.Play.Reset</code>。<br>只有当客户端发送的<code>play</code>命令设置了<code>reset</code>标志时，服务器才会发送<code>NeStream.Play.Reset</code>。<br>如果没有找到要播放的流，服务器将发送<code>onStatus</code>消息<code>NeStream.Play.StreamNotFound</code>。<br>之后，客户端播放服务器发送的音频和视频数据</p></blockquote><p><em><strong>通过抓包理解</strong></em><br><img src="/img/rtmp7.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Client :</span><br><span class="line">connect(‘livetv’)</span><br><span class="line">#</span><br><span class="line">Server :</span><br><span class="line">Window Acknowledgement Size 5000000</span><br><span class="line">Set Peer Bandwidth 5000000,Dynamic</span><br><span class="line">Set Chunk Size 4096</span><br><span class="line">_result(‘NetConnection.Connect.Success’)</span><br><span class="line">#</span><br><span class="line">Client :</span><br><span class="line">Window Acknowledgement Size 5000000</span><br><span class="line">createStream()</span><br><span class="line">#</span><br><span class="line">Server :</span><br><span class="line">_result()</span><br><span class="line">#</span><br><span class="line">Client :</span><br><span class="line">getStreamLength()</span><br><span class="line">play(‘hunantv’)</span><br><span class="line">Set Buffer Length 1,3000ms</span><br><span class="line">#</span><br><span class="line">Server :</span><br><span class="line">Stream Begin 1</span><br><span class="line">onStatus(‘NetStream.Play.Start’)</span><br><span class="line">RtmpSampleAccess()</span><br><span class="line">onMetaData()</span><br><span class="line">#</span><br><span class="line">Server :</span><br><span class="line">Video Data</span><br><span class="line">Audio Data</span><br><span class="line">…</span><br></pre></td></tr></table></figure><h2 id="5-2-源码"><a href="#5-2-源码" class="headerlink" title="5.2 源码"></a>5.2 源码</h2><p><a href="https://github.com/9TSe/RTMPServer">RTMPServer</a></p><hr><h1 id="6-浏览器播放HLS和HTTP-FLV流"><a href="#6-浏览器播放HLS和HTTP-FLV流" class="headerlink" title="6. 浏览器播放HLS和HTTP-FLV流"></a>6. 浏览器播放HLS和HTTP-FLV流</h1><h2 id="6-1-zlm-命令"><a href="#6-1-zlm-命令" class="headerlink" title="6.1 zlm 命令"></a>6.1 zlm 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// rtsp推流（文件推流）</span><br><span class="line">ffmpeg -re -i test.mp4 -rtsp_transport tcp -c copy -f rtsp rtsp://127.0.0.1:554/live/test</span><br><span class="line"></span><br><span class="line">// rtsp推流（文件循环推流）</span><br><span class="line">ffmpeg -re -stream_loop  -1  -i test.mp4 -rtsp_transport tcp -c copy -f rtsp rtsp://127.0.0.1:554/live/test</span><br><span class="line"></span><br><span class="line">// rtmp推流（文件推流）</span><br><span class="line">ffmpeg -re -i test.mp4 -vcodec h264_nvenc  -acodec aac -f flv  rtmp://192.168.1.3:1935/live/test</span><br><span class="line"></span><br><span class="line">// rtmp推流（文件循环推流）</span><br><span class="line">ffmpeg -re -stream_loop  -1 -i test.mp4 -vcodec h264  -acodec aac -f flv  rtmp://127.0.0.1:1935/live/test</span><br><span class="line"></span><br><span class="line">// ZLMediaKit支持多种流媒体协议的转换，协议转换后的播放地址</span><br><span class="line"></span><br><span class="line">//rtsp播放</span><br><span class="line">rtsp://127.0.0.1:554/live/test</span><br><span class="line"></span><br><span class="line">//rtmp播放</span><br><span class="line">rtmp://127.0.0.1:1935/live/test</span><br><span class="line"></span><br><span class="line">//hls播放</span><br><span class="line">http://127.0.0.1:80/live/test/hls.m3u8</span><br><span class="line"></span><br><span class="line">//http-flv播放</span><br><span class="line">http://127.0.0.1:80/live/test.live.flv</span><br><span class="line"></span><br><span class="line">//http-ts播放</span><br><span class="line">http://127.0.0.1:80/live/test.live.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-2-网页播放hls"><a href="#6-2-网页播放hls" class="headerlink" title="6.2 网页播放hls"></a>6.2 网页播放hls</h2><blockquote><p>视频需要先推流给zlm(服务端)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HlsPlayer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://vjs.zencdn.net/7.20.3/video-js.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>网页端播放 HLS(<span class="tag">&lt;<span class="name">code</span>&gt;</span>.m3u8<span class="tag">&lt;/<span class="name">code</span>&gt;</span>) 视频<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>借助 video.js 和 videojs-contrib-hls<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>由于 videojs-contrib-hls 需要通过 XHR 来获取解析 m3u8 文件, 因此会遭遇跨域问题, 请设置浏览器运行跨域<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">class</span>=<span class="string">&quot;video-js vjs-default-skin vjs-big-play-centered&quot;</span> <span class="attr">controls</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;268&quot;</span> &gt;</span></span><br><span class="line">    &lt;<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:80/live/test/hls.m3u8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-mpegURL&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--source src=&quot;http://127.0.0.1:9003/live/S4de6606d99305/hls.m3u8&quot; type=&quot;application/x-mpegURL&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://vjs.zencdn.net/7.20.3/video.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页端浏览器不支持播放 hls 文件(m3u8), 需要 videojs-contrib-hls 来解码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> player = <span class="title function_">videojs</span>(<span class="string">&#x27;video&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    player.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-网页播放http-flv"><a href="#6-3-网页播放http-flv" class="headerlink" title="6.3 网页播放http-flv"></a>6.3 网页播放http-flv</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>httpflvplayer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#flv-player</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*background-color: rgba(0,0,00,0.6);*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-height</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*object-fit: fill;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#flv-player</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">outline</span>: -webkit-focus-ring-color auto <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;flv-player&quot;</span>  <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line">    Your browser is too old which doesn&#x27;t support HTML5 video.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;play&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;play()&quot;</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;stop&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;stop()&quot;</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;flv/flv.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> eleFlvPlayer= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flv-player&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> eleBtnPlay = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;play&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> eleBtnStop = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;stop&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">play</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//let flvUrl = &quot;http://127.0.0.1:8080/test.flv&quot;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> flvUrl = <span class="string">&quot;http://127.0.0.1:80/live/test.live.flv&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(flvUrl);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(!flvjs.<span class="title function_">isSupported</span>())&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;浏览器不支持flv.js！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="keyword">typeof</span> flvUrl === <span class="string">&quot;undefined&quot;</span> || !flvUrl.<span class="title function_">endsWith</span>(<span class="string">&quot;.flv&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;播放地址格式不正确！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> mediaDataSource = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;flv&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">enableStashBuffer</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isLive</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">withCredentials</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hasAudio</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hasVideo</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:flvUrl</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//console.log(&#x27;MediaDataSource&#x27;, mediaDataSource);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//eleFlvPlayer.setAttribute(&#x27;poster&#x27;,&quot;/static/images/media.jpg&quot;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> player !== <span class="string">&quot;undefined&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (player != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                player.<span class="title function_">unload</span>();</span></span><br><span class="line"><span class="language-javascript">                player.<span class="title function_">detachMediaElement</span>();</span></span><br><span class="line"><span class="language-javascript">                player.<span class="title function_">destroy</span>();</span></span><br><span class="line"><span class="language-javascript">                player = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        player = flvjs.<span class="title function_">createPlayer</span>(mediaDataSource, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">enableWorker</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lazyLoadMaxDuration</span>: <span class="number">3</span> * <span class="number">60</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">seekType</span>: <span class="string">&#x27;range&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        player.<span class="title function_">attachMediaElement</span>(eleFlvPlayer);</span></span><br><span class="line"><span class="language-javascript">        player.<span class="title function_">load</span>();</span></span><br><span class="line"><span class="language-javascript">        player.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">stop</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> player === <span class="string">&quot;undefined&quot;</span> || player === <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;播放器暂未启动！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        player.<span class="title function_">pause</span>();</span></span><br><span class="line"><span class="language-javascript">        player.<span class="title function_">unload</span>();</span></span><br><span class="line"><span class="language-javascript">        player.<span class="title function_">detachMediaElement</span>();</span></span><br><span class="line"><span class="language-javascript">        player.<span class="title function_">destroy</span>();</span></span><br><span class="line"><span class="language-javascript">        player = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    eleBtnPlay.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-4-高性能HTTP-FLV服务器"><a href="#6-4-高性能HTTP-FLV服务器" class="headerlink" title="6.4 高性能HTTP-FLV服务器"></a>6.4 高性能HTTP-FLV服务器</h2><h3 id="6-4-1-配置boost库和jsoncpp库"><a href="#6-4-1-配置boost库和jsoncpp库" class="headerlink" title="6.4.1 配置boost库和jsoncpp库"></a>6.4.1 配置boost库和jsoncpp库</h3><p><img src="/img/rtmp8.png"></p><p><img src="/img/rtmp9.png"></p><p><img src="/img/rtmp10.png"></p><p><img src="/img/rtmp11.png"></p><h3 id="6-4-2-源码"><a href="#6-4-2-源码" class="headerlink" title="6.4.2 源码"></a>6.4.2 源码</h3><p><a href="https://github.com/9TSe/HTTP-FLVServer">HTTP-FLVServer</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-协议简介&quot;&gt;&lt;a href=&quot;#1-协议简介&quot; class=&quot;headerlink&quot; title=&quot;1. 协议简介&quot;&gt;&lt;/a&gt;1. 协议简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-RTMP&quot;&gt;&lt;a href=&quot;#1-1-RTMP&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="音视频" scheme="http://example.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="RTMP" scheme="http://example.com/tags/RTMP/"/>
    
  </entry>
  
  <entry>
    <title>RTSP</title>
    <link href="http://example.com/2023/12/05/RTSP1/"/>
    <id>http://example.com/2023/12/05/RTSP1/</id>
    <published>2023-12-05T13:58:26.000Z</published>
    <updated>2024-03-18T04:32:47.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-RTSP协议简介"><a href="#1-RTSP协议简介" class="headerlink" title="1. RTSP协议简介"></a>1. RTSP协议简介</h1><blockquote><p>配置属性 -&gt; 调试 -&gt; 环境 :<br>PATH&#x3D;D:\ffmpeg\ffmpeg-master-latest-win64-gpl-shared\bin;D:\ffmpeg\SDL2-2.28.5\lib\x64<br>用分号来写多个路径,可以指定dll文件,不必再必须配置环境变量<br>.<br>配置属性 -&gt; VC++目录 -&gt; 包含目录 :<br>D:\ffmpeg\SDL2-2.28.5\include<br>D:\ffmpeg\ffmpeg-master-latest-win64-gpl-shared\include<br>D:\ffmpeg\vcpkg\include<br>.<br>配置属性 -&gt; VC++目录 -&gt; 库目录 :<br>D:\ffmpeg\ffmpeg-master-latest-win64-gpl-shared\lib<br>D:\ffmpeg\SDL2-2.28.5\lib\x64<br>D:\ffmpeg\vcpkg\lib<br>.<br>链接器 -&gt; 输入 -&gt; 附加依赖项 :<br>avcodec.lib<br>avdevice.lib<br>avfilter.lib<br>avformat.lib<br>avutil.lib<br>postproc.lib<br>swresample.lib<br>swscale.lib<br>SDL2.lib<br>SDL2main.lib<br>SDL2test.lib<br>fdk-aac.lib<br>zlib.lib<br>event.lib<br>event_core.lib<br>event_extra.lib</p></blockquote><h2 id="1-1-RTSP服务器基础框架"><a href="#1-1-RTSP服务器基础框架" class="headerlink" title="1.1 RTSP服务器基础框架"></a>1.1 RTSP服务器基础框架</h2><blockquote><p>以下代码并没有使用功能,只是通过wireshark进行抓包分析来了解RTSP协议的大致流程</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>) <span class="comment">//链接阶段将指定的库文件 ws2_32.lib 加入到当前项目中。(套接字编程的文件)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4996 )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT      8554</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_RTP_PORT  55532</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_RTCP_PORT 55533</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CreateTcpSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> on = <span class="number">1</span>; <span class="comment">//在setsockopt中如果是1就会避免地址被占用的问题,帮助快速启动服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//SOL_SOCKET 是一个常量，表示套接字级别的选项，适用于所有套接字类型，不限于特定的传输协议</span></span><br><span class="line"><span class="comment">//如果是其他值,可能会代表,用于IPV6,4,TCP,UDP协议相关的选项</span></span><br><span class="line"><span class="built_in">setsockopt</span>(fd, SOL_SOCKET, SO_REUSEADDR, (<span class="type">const</span> <span class="type">char</span>*)&amp;on, <span class="built_in">sizeof</span>(on));</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">BindSocketAddr</span><span class="params">(<span class="type">int</span> fd)</span> <span class="comment">//加上static封装函数,仅当前文件能够使用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockaddr_in addr;</span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = <span class="built_in">htons</span>(SERVER_PORT);</span><br><span class="line">addr.sin_addr.s_addr = INADDR_ANY; <span class="comment">//0 == 0.0.0.0(本机任意IP地址)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(fd, (sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(sockaddr)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">AcceptClient</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span>* ip, <span class="type">int</span>* port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockaddr_in addr;</span><br><span class="line"><span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(addr));</span><br><span class="line"><span class="type">socklen_t</span> len = <span class="built_in">sizeof</span>(addr);</span><br><span class="line"><span class="type">int</span> clientfd = <span class="built_in">accept</span>(fd, (sockaddr*)&amp;addr, &amp;len);</span><br><span class="line"><span class="keyword">if</span> (clientfd &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//32位地址转换为点分十进制字符串</span></span><br><span class="line"><span class="built_in">strcpy</span>(ip, <span class="built_in">inet_ntoa</span>(addr.sin_addr)); <span class="comment">//inet_ntop更安全(包括线程安全),但是参数更多</span></span><br><span class="line">*port = <span class="built_in">ntohs</span>(addr.sin_port); <span class="comment">//转换为小端后存储</span></span><br><span class="line"><span class="keyword">return</span> clientfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Option</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Public: OPTIONS, DESCRIBE, SETUP, PlAY\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">cseq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Describe</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq, <span class="type">char</span>* url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> sdp[<span class="number">500</span>];</span><br><span class="line"><span class="type">char</span> local_ip[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sscanf</span>(url, <span class="string">&quot;rtsp://%[^:]:&quot;</span>, local_ip); <span class="comment">//%[^:] 匹配除了:以外的任意字符</span></span><br><span class="line"><span class="built_in">sprintf</span>(sdp, <span class="string">&quot;v=0\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;o=- 9%ld 1 IN IP4 %s\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;t=0 0\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;a=control:*\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;m=video 0 RTP/AVP 96\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;a=rtpmap:96 H264/90000\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;a=control:track0\r\n&quot;</span>,</span><br><span class="line"><span class="built_in">time</span>(<span class="literal">NULL</span>), local_ip);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\nCSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Content-Base: %s\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Content-type: application/sdp\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Content-length: %zu\r\n\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;%s&quot;</span>,</span><br><span class="line">cseq,url,<span class="built_in">strlen</span>(sdp),sdp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Setup</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq, <span class="type">int</span> rtp_port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Transport: RTP/AVP;unicast;client_port=%d-%d;server_port=%d-%d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Session: 66334873\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">cseq, rtp_port, rtp_port + <span class="number">1</span>, SERVER_RTP_PORT, SERVER_RTCP_PORT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Play</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Range: npt=0.000-\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Session: 66334873; timeout=10\r\n\r\n&quot;</span>,</span><br><span class="line">cseq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">DoClient</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//客户端可能发送来的信息(请求) DESCRIBE rtsp ://127.0.0.1:8554/stream1 RTSP/1.0</span></span><br><span class="line"><span class="type">char</span> method[<span class="number">40</span>]; <span class="comment">//DESCRIBE</span></span><br><span class="line"><span class="type">char</span> url[<span class="number">100</span>]; <span class="comment">//rtsp://127.0.0.1:8554/stream1</span></span><br><span class="line"><span class="type">char</span> version[<span class="number">40</span>]; <span class="comment">//RTSP/1.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> CSeq; <span class="comment">//请求中的序列号</span></span><br><span class="line"><span class="type">int</span> client_Rtp_port;</span><br><span class="line"><span class="type">int</span> client_Rtcp_port;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* r_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10000</span>); <span class="comment">//读缓冲区,读取客户端数据</span></span><br><span class="line"><span class="type">char</span>* w_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10000</span>); <span class="comment">//写缓冲区,向客户端发送数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) <span class="comment">//more reuqest</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> recv_len = <span class="built_in">recv</span>(fd, r_buf, <span class="number">2000</span>, <span class="number">0</span>); <span class="comment">//从客户端(fd)中读取最多2000个数据到r_buf;</span></span><br><span class="line"><span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>) <span class="comment">//return readed len</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">r_buf[recv_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl &lt;&lt; __FUNCTION__ &lt;&lt; <span class="string">&quot; r_buf  = &quot;</span> &lt;&lt; r_buf &lt;&lt; std::endl;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* sepe = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="type">char</span>* line = <span class="built_in">strtok</span>(r_buf, sepe);</span><br><span class="line"><span class="keyword">while</span> (line) <span class="comment">//only one request do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;OPTIONS&quot;</span>) ||</span><br><span class="line"><span class="built_in">strstr</span>(line, <span class="string">&quot;DESCRIBE&quot;</span>) ||</span><br><span class="line"><span class="built_in">strstr</span>(line, <span class="string">&quot;SETUP&quot;</span>) ||</span><br><span class="line"><span class="built_in">strstr</span>(line, <span class="string">&quot;PLAY&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;%s %s %s\r\n&quot;</span>, method, url, version) != <span class="number">3</span>) <span class="comment">//return success args num</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sscanf method url version fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;CSeq&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;CSeq: %d\r\n&quot;</span>, &amp;CSeq) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sscanf CSeq&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(line, <span class="string">&quot;Transport:&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Transport:&quot;</span>))) <span class="comment">//suces</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;Transport: RTP/AVP/UDP;unicast;client_port=%d-%d\r\n&quot;</span>, &amp;client_Rtp_port, &amp;client_Rtcp_port) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sscanf 2 port fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">line = <span class="built_in">strtok</span>(<span class="literal">NULL</span>, sepe);</span><br><span class="line"><span class="comment">//nullptr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;OPTIONS&quot;</span>))</span><br><span class="line"><span class="built_in">Handle_Option</span>(w_buf, CSeq); <span class="comment">//no check</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;DESCRIBE&quot;</span>))</span><br><span class="line"><span class="built_in">Handle_Describe</span>(w_buf, CSeq, url);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;SETUP&quot;</span>))</span><br><span class="line"><span class="built_in">Handle_Setup</span>(w_buf, CSeq, client_Rtp_port);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>))</span><br><span class="line"><span class="built_in">Handle_Play</span>(w_buf, CSeq);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;nb method : &quot;</span> &lt;&lt; method &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; std::endl &lt;&lt; __FUNCTION__ &lt;&lt; <span class="string">&quot;w_buf = &quot;</span> &lt;&lt; w_buf &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">send</span>(fd, w_buf, <span class="built_in">strlen</span>(w_buf), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;start play\n&quot;</span> &lt;&lt; <span class="string">&quot;client ip:&quot;</span> &lt;&lt; ip &lt;&lt; std::endl &lt;&lt; <span class="string">&quot;client port:&quot;</span> &lt;&lt; client_Rtp_port &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(method, <span class="number">0</span>, <span class="built_in">sizeof</span>(method));</span><br><span class="line"><span class="built_in">memset</span>(url, <span class="number">0</span>, <span class="built_in">sizeof</span>(url));</span><br><span class="line">CSeq = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//next while</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">closesocket</span>(fd);</span><br><span class="line"><span class="built_in">free</span>(r_buf);</span><br><span class="line"><span class="built_in">free</span>(w_buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA winsock;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;winsock) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;winsock start error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> server_fd = <span class="built_in">CreateTcpSocket</span>();</span><br><span class="line"><span class="keyword">if</span> (server_fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;tcpsocket create fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">BindSocketAddr</span>(server_fd) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;bind fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">listen</span>(server_fd, <span class="number">128</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;listen fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot; rtsp://127.0.0.1:&quot;</span> &lt;&lt; SERVER_PORT &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> client_fd;</span><br><span class="line"><span class="type">char</span> client_ip[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> client_port;</span><br><span class="line">client_fd = <span class="built_in">AcceptClient</span>(server_fd, client_ip, &amp;client_port);</span><br><span class="line"><span class="keyword">if</span> (client_fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept client ip:&quot;</span> &lt;&lt; client_ip &lt;&lt; <span class="string">&quot; port:&quot;</span> &lt;&lt; client_port;</span><br><span class="line"><span class="built_in">DoClient</span>(client_fd, client_ip, client_port);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(server_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-分析抓包数据"><a href="#1-2-分析抓包数据" class="headerlink" title="1.2 分析抓包数据"></a>1.2 分析抓包数据</h2><p><code>以下服务器的回复抓包数据都是根据以上代码的接受发送数据决定的</code></p><p><img src="/img/rtsp1.png"></p><blockquote><p>客户端第一次发出请求(OPTIONS)<br>向服务器询问有那种请求方式</p></blockquote><p><img src="/img/rtsp2.png"></p><blockquote><p>服务器回应OPTIONS<br>服务器给出发出请求的方式</p></blockquote><p><img src="/img/rtsp3.png"></p><blockquote><p>客户端第二次发出请求(DESCRIBE)<br>请求指定流媒体的描述信息（<code>SDP</code>，Session Description Protocol）</p></blockquote><p><img src="/img/rtsp4.png"></p><blockquote><p>服务器回应DESCRIBE<br>回应会话描述(<code>SDP</code>) 返回流媒体的描述信息，包括媒体类型、编解码器、流地址等。</p></blockquote><p><img src="/img/rtsp5.png"></p><blockquote><p>客户端第三次发出请求(SETUP)<br>请求建立媒体流传输的通道<br>两个(RTCP和RTP通道)端口号</p></blockquote><p><img src="/img/rtsp6.png"></p><blockquote><p>服务器回应SETUP<br>返回确认或者错误消息。<br>在这个步骤中，可以指定传输协议（UDP、TCP、RTP 等）和端口号等参数。</p></blockquote><p><img src="/img/rtsp7.png"></p><blockquote><p>客户端第四次发出请求(PLAY)<br>请求开始播放流媒体</p></blockquote><p><img src="/img/rtsp8.png"></p><blockquote><p>服务器回应PLAY<br>接受请求，并开始向客户端发送媒体数据。</p></blockquote><p><img src="/img/rtsp9.png"></p><h1 id="2-UDP的RTP传输h264的RTSP服务器，能拉流播放"><a href="#2-UDP的RTP传输h264的RTSP服务器，能拉流播放" class="headerlink" title="2. UDP的RTP传输h264的RTSP服务器，能拉流播放"></a>2. UDP的RTP传输h264的RTSP服务器，能拉流播放</h1><blockquote><p>上一部分已经实现了一个<code>RTSP</code>协议交互的案例，客户端播放器能够向我们的RTSP服务端发起连接建立的请求，并且客户端在发起RTSP的<code>Play</code>请求以后，RTSP服务端也已经回复了<code>Play</code>请求的确认。</p></blockquote><p>这部分需要实现，客户端建立与RTSP服务端的连接后，并且在RTSP服务端回复了客户端的Play请求以后.<br>服务端需要源源不断的读取一个本地h264视频文件，并将读取到的h264视频流封装到RTP数据包中，再推送至客户端。<br>这样我们就实现了一个简单的支持RTSP协议流媒体分发服务。</p><p>问题的关键就是 <code>如何将H264封装到RTP数据包</code></p><h2 id="2-1-RTP理解"><a href="#2-1-RTP理解" class="headerlink" title="2.1 RTP理解"></a>2.1 RTP理解</h2><h3 id="2-1-1-RTP简述"><a href="#2-1-1-RTP简述" class="headerlink" title="2.1.1 RTP简述"></a>2.1.1 RTP简述</h3><p>RTP:实时传输协议（Real-time Transport Protocol或简写RTP）是一个网络传输协议.<br>RTP定义了两种报文：<code>RTP报文</code>和<code>RTCP报文</code></p><ul><li><code>RTP报文</code>用于传送媒体数据（如音频和视频,包括自定义类型,如字幕等）<br>它由 RTP报头和数据两部分组成，RTP数据部分称为有效载荷(payload)；</li><li><code>RTCP报文</code>用于传送控制信息，以实现协议控制功能。</li><li><code>RTP报文和RTCP报文</code>将作为下层协议的数据单元进行传输。<br><font color = red>如果使用UDP，则RTP报文和RTCP报文分别使用两个相邻的UDP端口，RTP报文使用低端口，RTCP报文使用高端口。</font><br>如果使用其它的下层协议，RTP报文和RTCP报文可以合并，放在一个数据单元中一起传送，控制<code>信息在前</code>，媒体<code>数据在后</code>。通常，RTP是由应用程序实现的。<br>eg: TCP作为协议时,RTP和RTCP甚至RTSP都是一个通道进行传输的</li></ul><p><img src="/img/rtsp10.png"></p><h3 id="2-1-2-RTP报文格式"><a href="#2-1-2-RTP报文格式" class="headerlink" title="2.1.2 RTP报文格式"></a>2.1.2 RTP报文格式</h3><ul><li><code>V</code>：RTP协议的版本号，占<code>2位</code><br>当前协议版本号为2。</li><li><code>P</code>：填充标志，占<code>1位</code><br>如果P&#x3D;1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。</li><li><code>X</code>：扩展标志，占<code>1位</code><br>如果X&#x3D;1，则在RTP报头后跟有一个扩展报头。</li><li><code>CC</code>：CSRC计数器，占<code>4位</code><br>指示CSRC 标识符的个数。</li><li><code>M</code>: 标记，占<code>1位</code>, 不同的有效载荷有不同的含义<br>对于视频，标记一帧的结束；<br>对于音频，标记会话的开始。</li><li><code>PT</code>: 有效载荷类型，占<code>7位</code><br>用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。</li><li><code>序列号</code>：占<code>16位</code><br>用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。<br>接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。</li><li><code>时戳(Timestamp)</code>：占<code>32位</code>，时戳反映了该RTP报文的第一个八位组的采样时刻。<br>接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。</li><li><code>同步信源(SSRC)标识符</code>：占<code>32位</code>，用于标识同步信源。<br>该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。</li><li><code>特约信源(CSRC)标识符</code>：每个CSRC标识符占<code>32位</code>，可以有0～15个。<br>每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源。</li></ul><blockquote><p>每一行占4字节,32位</p></blockquote><p><img src="/img/rtsp11.png"></p><blockquote><p>视频会议,直播连麦等类似情况时(多路流汇成一路流),CSRC才会存在(多个SSRC汇集为CSRC)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_VESION              2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_H264   96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_AAC    97</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_HEADER_SIZE         12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_MAX_PKT_SIZE        1400</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *    0                   1                   2                   3</span></span><br><span class="line"><span class="comment">  *    7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">  *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">  *   |V=2|P|X|  CC   |M|     PT      |       sequence number         |</span></span><br><span class="line"><span class="comment">  *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">  *   |                           timestamp                           |</span></span><br><span class="line"><span class="comment">  *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">  *   |           synchronization source (SSRC) identifier            |</span></span><br><span class="line"><span class="comment">  *   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span></span><br><span class="line"><span class="comment">  *   |            contributing source (CSRC) identifiers             |</span></span><br><span class="line"><span class="comment">  *   :                             ....                              :</span></span><br><span class="line"><span class="comment">  *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpHeader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//位段中,定义的占位数是倒着来的,即在第0个字节中,最后四位是csrcLen</span></span><br><span class="line">    <span class="comment">/* byte 0 */</span></span><br><span class="line">    <span class="type">uint8_t</span> csrcLen : <span class="number">4</span>;<span class="comment">//CSRC计数器，占4位，指示 CSRC 标识符的个数。</span></span><br><span class="line">    <span class="type">uint8_t</span> extension : <span class="number">1</span>;<span class="comment">//占1位，如果X=1，则在RTP报头后跟有一个扩展报头。</span></span><br><span class="line">                        <span class="comment">//一般只有传输类型是非音频,非视频的自定义类型或许需要这个X=1</span></span><br><span class="line">    <span class="type">uint8_t</span> padding : <span class="number">1</span>;<span class="comment">//填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组</span></span><br><span class="line">                        <span class="comment">//它们不是有效载荷的一部分。</span></span><br><span class="line">    <span class="type">uint8_t</span> version : <span class="number">2</span>;<span class="comment">//RTP协议的版本号，占2位，当前协议版本号为2。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* byte 1 */</span></span><br><span class="line">    <span class="type">uint8_t</span> payloadType : <span class="number">7</span>;<span class="comment">//有效载荷类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。</span></span><br><span class="line">    <span class="type">uint8_t</span> marker : <span class="number">1</span>;<span class="comment">//标记，占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；</span></span><br><span class="line">                        <span class="comment">//对于音频，标记会话的开始。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* bytes 2,3 */</span></span><br><span class="line">    <span class="type">uint16_t</span> seq;<span class="comment">//占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文(eg:每发送一帧)，序列号增1。</span></span><br><span class="line">                <span class="comment">//接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* bytes 4-7 */</span></span><br><span class="line">    <span class="type">uint32_t</span> timestamp;<span class="comment">//占32位，时戳反映了该RTP报文的第一个八位组的采样时刻。</span></span><br><span class="line">                    <span class="comment">//接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。(音视频进行同步)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* bytes 8-11 */</span></span><br><span class="line">    <span class="type">uint32_t</span> ssrc;<span class="comment">//占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*标准的RTP Header 还可能存在 0-15个特约信源(CSRC)标识符</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RTP包的结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpPacket</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">RtpHeader</span> rtpHeader;</span><br><span class="line">    <span class="type">uint8_t</span> payload[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//包含一个RTP头部和RTP载荷</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-RTP包发送前缀"><a href="#2-1-3-RTP包发送前缀" class="headerlink" title="2.1.3 RTP包发送前缀"></a>2.1.3 RTP包发送前缀</h3><p>RTP，RTCP 数据和 RTSP 数据<code>共享</code> TCP 数据通道，所以必须有一个标识来区别三种数据。<br>RTP 和 <code>RTCP</code> 数据会以 <code>$符号 + 1 个字节的通道编号 + 2 个字节的数据长度</code> 共 4 个字节的前缀开始，RTSP 数据没有前缀数据</p><p><strong>RTP 数据和 RTCP 数据的区别在于第二个字节的通道编号, RTP 通道编号是偶数，RTCP通道编号是奇数。</strong></p><h2 id="2-2-H264理解"><a href="#2-2-H264理解" class="headerlink" title="2.2 H264理解"></a>2.2 H264理解</h2><h3 id="2-2-1-压缩方式"><a href="#2-2-1-压缩方式" class="headerlink" title="2.2.1 压缩方式"></a>2.2.1 压缩方式</h3><p>H264压缩技术主要采用了以下几种方法对视频数据进行压缩:</p><ul><li>帧内预测压缩，解决的是空域数据冗余问题。(eg:jpg) 不借助于其他数据</li><li>帧间预测压缩（运动估计与补偿），解决的是时域数据冗徐问题。</li><li>整数离散余弦变换（DCT），将空间上的相关性变为频域上无关的数据然后进行量化。</li><li>CABAC压缩。</li></ul><p>经过<code>压缩后</code>的帧分为：I帧，P帧和B帧:</p><ul><li>I帧：关键帧，采用<code>帧内压缩</code>技术。</li><li>P帧：向前参考帧，在压缩时，只参考前面已经处理的帧。<br>采用帧间压缩技术。占I帧的一半大小</li><li>B帧：双向参考帧，在压缩时，它即参考前而的帧，又参考它后面的帧。采用帧间压缩技术。占I帧1&#x2F;4大小</li><li>图像序列GOP(GOP组),将一个视频分为若干部分,防止因为部分帧损坏而导致视频崩盘.GOP至少有一个I帧</li></ul><blockquote><p>虽然B帧的压缩率是最高，但是他占用的CPU以及耗时非常多，既然耗时，在实时直播视频情况就会导致一个延迟的情况。<br>如果只是想减少空间大小，B帧将是一个很好的选择。<br>所以一般在直播中是没有B帧，只有I帧和P帧。</p></blockquote><p>IDR帧和I帧的关系。</p><p>IDR(Instantannous Decoder Refresh) 解码器立即刷新 </p><p>作用：在解码的过程，一旦有一帧数据出现错误，将是无法恢复的过程，后面数据帧不能使用。<br>当有了IDR帧，解码器收到IDR帧时，就会将<code>缓冲区的数据清空</code>，找到第一个IDR帧，重新解码。<br>I和IDR帧都使用<code>帧内预测</code>，在编码解码中为了方便，首个I帧要和其他I帧区别开，把<code>第一个I帧叫IDR</code>，这样方便控制编码和解码流程。<br>IDR帧必须是一个I帧，但是I帧不一定是IDR帧，这个帧出现的时候，是告诉解码器，可以清除掉所有的参考帧，这是一个全新的序列，新的<code>GOP</code>已经开始。I帧有被跨帧参考的可能,IDR不会。<br>每个GOP中的第一帧就是IDR帧。<br><code>IDR帧是一种特殊的I帧。</code></p><p>帧与分组的关系：</p><p><img src="/img/rtsp12.png"></p><h3 id="2-2-2-h264组成"><a href="#2-2-2-h264组成" class="headerlink" title="2.2.2 h264组成"></a>2.2.2 h264组成</h3><ol><li>网络提取层 (Network Abstraction Layer，<code>NAL</code>), 编码(压缩)后的流</li><li>视讯编码层 (Video Coding Layer，<code>VCL</code>), 产生NAL的过程</li></ol><h3 id="2-2-3-码流结构"><a href="#2-2-3-码流结构" class="headerlink" title="2.2.3 码流结构"></a>2.2.3 码流结构</h3><p>H.264的功能分为两层，视频编码层（VCL）和网络提取层（NAL）。<br>1.VCL数据即被压缩编码后的视频数据序列。<br>2.在VCL数据要封装到NAL单元中之后，才可以用来传输或存储。</p><p><img src="/img/rtsp13.png"></p><ul><li>SPS：序列参数集，作用于一系列连续的编码图像；</li><li>PPS：图像参数集，作用于编码视频序列中一个或多个独立的图像；</li></ul><p>NALU根据<code>nal_unit_type</code>的类型，可以分为：<br><code>VCL的NAL单元 </code>和 <code>非VCL的NAL单元</code></p><h2 id="2-3-解封装mp4生成h264文件"><a href="#2-3-解封装mp4生成h264文件" class="headerlink" title="2.3 解封装mp4生成h264文件"></a>2.3 解封装mp4生成h264文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i test.mp4 -codec copy -bsf: h264_mp4toannexb -f h264 test.h264</span><br></pre></td></tr></table></figure><h2 id="2-4-将H264封装到RTP数据包"><a href="#2-4-将H264封装到RTP数据包" class="headerlink" title="2.4 将H264封装到RTP数据包"></a>2.4 将H264封装到RTP数据包</h2><p>H.264由一个一个的NALU组成，每个NALU之间使用<code>00 00 00 01</code>或<code>00 00 01</code>分隔开，每个NALU的第一次字节都有特殊的含义,</p><p><img src="/img/rtsp14.png"></p><p><img src="/img/rtsp15.png"></p><ol><li><code>F(forbiden):禁止位</code>，占用NAL头的第一个位，当禁止位值为1时表示语法错误；</li><li><code>NRI:参考级别</code>，占用NAL头的第二到第三个位；值越大，该NAL越重要。</li><li><code>Type:Nal单元数据类型</code>，也就是标识该NAL单元的数据类型是哪种，占用NAL头的第四到第8个位；</li></ol><p>常用Nalu_type：</p><ul><li><p>0x06 (0 00 00110) <code>SEI</code>      type &#x3D; 6<br>0x67 (0 11 00111) <code>SPS</code>     type &#x3D; 7<br>0x68 (0 11 01000) <code>PPS</code>      type &#x3D; 8</p></li><li><p>0x65 (0 11 00101) <code>IDR</code>      type &#x3D; 5<br>0x61 (0 11 00001) <code>I帧</code>      type &#x3D; 1<br>0x41 (0 10 00001) <code>P帧</code>     type &#x3D; 1<br>0x01 (0 00 00001) <code>B帧</code>     type &#x3D; 1</p></li></ul><p><img src="/img/rtsp16.png"></p><p>对于H.264格式了解这些就够了，我们的目的是想从一个H.264的文件中将一个一个的NALU提取出来，然后封装成RTP包，下面介绍如何将NALU封装成RTP包。</p><p> H.264可以由三种RTP打包方式</p><ul><li><p><code>单NALU打包</code>： 一个RTP包包含一个完整的NALU</p></li><li><p><code>聚合打包</code>：对于较小的NALU，一个RTP包可包含多个完整的NALU</p></li><li><p><code>分片打包</code>：对于较大的NALU，一个NALU可以分为多个RTP包发送</p></li></ul><p><code>注意</code>：这里要区分好概念，每一个RTP包都包含一个RTP头部和RTP荷载，这是固定的。而H.264发送数据可支持三种RTP打包方式</p><p>比较常用的是单NALU打包和分片打包，这里只介绍两种</p><p><strong>单NALU打包</strong><br>所谓单NALU打包就是将一整个NALU的数据放入RTP包的载荷中，这是最简单的一种方式。</p><p><strong>分片打包</strong><br>每个RTP包都有大小限制的，因为RTP一般都是使用UDP发送，UDP没有流量控制，所以要限制每一次发送的大小，所以如果一个NALU的太大，就需要分成多个RTP包发送，至于如何分成多个RTP包，如下：</p><p>首先要明确，RTP包的格式是绝不会变的，永远多是RTP头+RTP载荷</p><p><img src="/img/rtsp17.png"></p><p>RTP头部是固定的，那么只能在RTP载荷中去添加额外信息来说明这个RTP包是表示同一个NALU<br>如果是分片打包的话，那么在RTP载荷开始有两个字节的信息，然后再是NALU的内容</p><p><img src="/img/rtsp18.png"></p><p>第一个字节位<code>FU Indicator</code>，其格式如下</p><p><img src="/img/rtsp19.png"></p><p>高三位：与NALU第一个字节的高三位相同<br>Type：<code>28</code>，表示该RTP包一个分片，为什么是28？<br>因为H.264的规范中定义的，此外还有许多其他Type</p><p>第二个字节位<code>FU Header</code>，其格式如下</p><p><img src="/img/rtsp20.png"></p><p>S：标记该分片打包的第一个RTP包<br>E：比较该分片打包的最后一个RTP包<br>Type：NALU的Type</p><h2 id="2-5-代码实现"><a href="#2-5-代码实现" class="headerlink" title="2.5 代码实现"></a>2.5 代码实现</h2><blockquote><p>rtp.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma once</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_VESION              2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_H264   96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_AAC    97</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_HEADER_SIZE         12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_MAX_PKT_SIZE        1400</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *    0                   1                   2                   3</span></span><br><span class="line"><span class="comment"> *    7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment"> *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment"> *   |V=2|P|X|  CC   |M|     PT      |       sequence number         |</span></span><br><span class="line"><span class="comment"> *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment"> *   |                           timestamp                           |</span></span><br><span class="line"><span class="comment"> *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment"> *   |           synchronization source (SSRC) identifier            |</span></span><br><span class="line"><span class="comment"> *   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span></span><br><span class="line"><span class="comment"> *   |            contributing source (CSRC) identifiers             |</span></span><br><span class="line"><span class="comment"> *   :                             ....                              :</span></span><br><span class="line"><span class="comment"> *   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpHeader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* byte 0 */</span></span><br><span class="line">    <span class="type">uint8_t</span> csrcLen : <span class="number">4</span>;<span class="comment">//CSRC计数器，占4位，指示CSRC 标识符的个数。</span></span><br><span class="line">    <span class="type">uint8_t</span> extension : <span class="number">1</span>;<span class="comment">//占1位，如果X=1，则在RTP报头后跟有一个扩展报头。</span></span><br><span class="line">    <span class="type">uint8_t</span> padding : <span class="number">1</span>;<span class="comment">//填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。</span></span><br><span class="line">    <span class="type">uint8_t</span> version : <span class="number">2</span>;<span class="comment">//RTP协议的版本号，占2位，当前协议版本号为2。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* byte 1 */</span></span><br><span class="line">    <span class="type">uint8_t</span> payloadType : <span class="number">7</span>;<span class="comment">//有效载荷类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等。</span></span><br><span class="line">    <span class="type">uint8_t</span> marker : <span class="number">1</span>;<span class="comment">//标记，占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* bytes 2,3 */</span></span><br><span class="line">    <span class="type">uint16_t</span> seq;<span class="comment">//占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。接收者通过序列号来检测报文丢失情况，重新排序报文，恢复数据。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* bytes 4-7 */</span></span><br><span class="line">    <span class="type">uint32_t</span> timestamp;<span class="comment">//占32位，时戳反映了该RTP报文的第一个八位组的采样时刻。接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* bytes 8-11 */</span></span><br><span class="line">    <span class="type">uint32_t</span> ssrc;<span class="comment">//占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*标准的RTP Header 还可能存在 0-15个特约信源(CSRC)标识符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpPacket</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">RtpHeader</span> rtpHeader;</span><br><span class="line">    <span class="type">uint8_t</span> payload[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RtpHeaderInit</span><span class="params">(<span class="keyword">struct</span> RtpPacket* rtpPacket, <span class="type">uint8_t</span> csrcLen, <span class="type">uint8_t</span> extension,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint8_t</span> padding, <span class="type">uint8_t</span> version, <span class="type">uint8_t</span> payloadType, <span class="type">uint8_t</span> marker,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint16_t</span> seq, <span class="type">uint32_t</span> timestamp, <span class="type">uint32_t</span> ssrc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RtpSendPacketOverTcp</span><span class="params">(<span class="type">int</span> clientSockfd, <span class="keyword">struct</span> RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RtpSendPacketOverUdp</span><span class="params">(<span class="type">int</span> serverRtpSockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port, <span class="keyword">struct</span> RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>rtp.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RtpHeaderInit</span><span class="params">(RtpPacket* rtpPacket, <span class="type">uint8_t</span> csrcLen, <span class="type">uint8_t</span> extension,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint8_t</span> padding, <span class="type">uint8_t</span> version, <span class="type">uint8_t</span> payloadType, <span class="type">uint8_t</span> marker,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint16_t</span> seq, <span class="type">uint32_t</span> timestamp, <span class="type">uint32_t</span> ssrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.csrcLen = csrcLen;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.extension = extension;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.padding = padding;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.version = version;</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.payloadType = payloadType;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.marker = marker;</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = seq;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = timestamp;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = ssrc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RtpSendPacketOverTcp</span><span class="params">(<span class="type">int</span> clientSockfd, <span class="keyword">struct</span> RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">htons</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> rtpSize = RTP_HEADER_SIZE + dataSize;</span><br><span class="line">    <span class="type">char</span>* tempBuf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> + rtpSize);</span><br><span class="line">    tempBuf[<span class="number">0</span>] = <span class="number">0x24</span>;<span class="comment">//$ </span></span><br><span class="line">    tempBuf[<span class="number">1</span>] = <span class="number">0x00</span>;</span><br><span class="line">    tempBuf[<span class="number">2</span>] = (<span class="type">uint8_t</span>)(((rtpSize) &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    tempBuf[<span class="number">3</span>] = (<span class="type">uint8_t</span>)((rtpSize) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(tempBuf + <span class="number">4</span>, (<span class="type">char</span>*)rtpPacket, rtpSize);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">send</span>(clientSockfd, tempBuf, <span class="number">4</span> + rtpSize, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">ntohs</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tempBuf);</span><br><span class="line">    tempBuf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RtpSendPacketOverUdp</span><span class="params">(<span class="type">int</span> serverRtpSockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sockaddr_in addr;</span><br><span class="line"></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">htons</span>(rtpPacket-&gt;rtpHeader.seq);<span class="comment">//从主机字节顺序转变成网络字节顺序</span></span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从rtpPacket指针缓冲区读取数据,通过fd发送至sockaddr结构体中的位置</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">sendto</span>(serverRtpSockfd, (<span class="type">char</span>*)rtpPacket, dataSize + RTP_HEADER_SIZE, <span class="number">0</span>, (sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">ntohs</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>main.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于程序ffplay后速度和帧率都比较small的解释</span></span><br><span class="line"><span class="comment">//因为这个案例中读取h264码流的时候，每次读取一个nalu就会封装一次rtp包并发送，</span></span><br><span class="line"><span class="comment">//但事实上读取到一个nalu并不是对应一个视频帧，可能是sps，也可能是pps，也可能是其他类型的nalu，</span></span><br><span class="line"><span class="comment">//事实上这些nalu都不允许参与到休眠间隔时间的。所以sleep = 40，肯定会慢的，sleep = 20，肯定会快的。</span></span><br><span class="line"><span class="comment">//只有准确判断nalu类型，再进行封装rtp。 这个例子只是演示这样服务的原理，并没有处理这些细节。</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4996 )</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtp.h&quot;</span></span></span><br><span class="line"><span class="comment">//#pragma warning( disable : 4996 )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H264_FILE_NAME   <span class="string">&quot;D:\\ffmpeg\\learn\\test.h264&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT      8554</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_RTP_PORT  55532</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_RTCP_PORT 55533</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_MAX_SIZE     (1024*1024)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">CreateTcpSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> on = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">setsockopt</span>(fd, SOL_SOCKET, SO_REUSEADDR, (<span class="type">const</span> <span class="type">char</span>*)&amp;on, <span class="built_in">sizeof</span>(on));</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">CreateUdpSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fd = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> on = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setsockopt</span>(fd, SOL_SOCKET, SO_REUSEADDR, (<span class="type">const</span> <span class="type">char</span>*)&amp;on, <span class="built_in">sizeof</span>(on));</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">BindSocketAddr</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> port)</span> <span class="comment">//加上static封装函数,仅当前文件能够使用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockaddr_in addr;</span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">addr.sin_addr.s_addr = INADDR_ANY; <span class="comment">//0 == 0.0.0.0(本机任意IP地址)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(fd, (sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(sockaddr)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">AcceptClient</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span>* ip, <span class="type">int</span>* port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockaddr_in addr;</span><br><span class="line"><span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(addr));</span><br><span class="line"><span class="type">socklen_t</span> len = <span class="built_in">sizeof</span>(addr);</span><br><span class="line"><span class="type">int</span> clientfd = <span class="built_in">accept</span>(fd, (sockaddr*)&amp;addr, &amp;len);</span><br><span class="line"><span class="keyword">if</span> (clientfd &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//32位地址转换为点分十进制字符串</span></span><br><span class="line"><span class="built_in">strcpy</span>(ip, <span class="built_in">inet_ntoa</span>(addr.sin_addr)); <span class="comment">//inet_ntop更安全(包括线程安全),但是参数更多</span></span><br><span class="line">*port = <span class="built_in">ntohs</span>(addr.sin_port); <span class="comment">//转换为小端后存储</span></span><br><span class="line"><span class="keyword">return</span> clientfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Option</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Public: OPTIONS, DESCRIBE, SETUP, PlAY\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">cseq);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Describe</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq, <span class="type">char</span>* url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> sdp[<span class="number">500</span>];</span><br><span class="line"><span class="type">char</span> local_ip[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">sscanf</span>(url, <span class="string">&quot;rtsp://%[^:]:&quot;</span>, local_ip); <span class="comment">//%[^:] 匹配除了:以外的任意字符</span></span><br><span class="line"><span class="built_in">sprintf</span>(sdp, <span class="string">&quot;v=0\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;o=- 9%ld 1 IN IP4 %s\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;t=0 0\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;a=control:*\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;m=video 0 RTP/AVP 96\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;a=rtpmap:96 H264/90000\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;a=control:track0\r\n&quot;</span>,</span><br><span class="line"><span class="built_in">time</span>(<span class="literal">NULL</span>), local_ip);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\nCSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Content-Base: %s\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Content-type: application/sdp\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Content-length: %zu\r\n\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;%s&quot;</span>,</span><br><span class="line">cseq, url, <span class="built_in">strlen</span>(sdp), sdp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Setup</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq, <span class="type">int</span> rtp_port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Transport: RTP/AVP;unicast;client_port=%d-%d;server_port=%d-%d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Session: 66334873\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">cseq, rtp_port, rtp_port + <span class="number">1</span>, SERVER_RTP_PORT, SERVER_RTCP_PORT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Handle_Play</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> cseq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Range: npt=0.000-\r\n&quot;</span></span><br><span class="line"><span class="string">&quot;Session: 66334873; timeout=10\r\n\r\n&quot;</span>,</span><br><span class="line">cseq);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title">StartCode3</span><span class="params">(<span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//每个nalu单元都以这个开头</span></span><br><span class="line"><span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="number">1</span>) <span class="comment">//00 00 01</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title">StartCode4</span><span class="params">(<span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">3</span>] == <span class="number">1</span>) <span class="comment">// 00 00 00 01</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">char</span>* <span class="title">FindNextStartCode</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">StartCode3</span>(buf) || <span class="built_in">StartCode4</span>(buf))</span><br><span class="line"><span class="keyword">return</span> buf;</span><br><span class="line">++buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if (StartCode3(buf))</span></span><br><span class="line"><span class="comment">//return buf; 可能冗余了,运行test</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">GetFrameFromH264File</span><span class="params">(FILE* fp, <span class="type">char</span>* frame, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> read_size, framesize;</span><br><span class="line"><span class="type">char</span>* next_startcode;</span><br><span class="line"></span><br><span class="line">read_size = <span class="built_in">fread</span>(frame, <span class="number">1</span>, size, fp); <span class="comment">//从fp读取size个1大小的数据到frame,fp指针此时会移动</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">StartCode3</span>(frame) &amp;&amp; !<span class="built_in">StartCode4</span>(frame)) <span class="comment">//none startcode</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">next_startcode = <span class="built_in">FindNextStartCode</span>(frame + <span class="number">3</span>, read_size - <span class="number">3</span>); <span class="comment">//返回起始码处的指针</span></span><br><span class="line"><span class="keyword">if</span> (!next_startcode)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">framesize = (next_startcode - frame); <span class="comment">//返回起始的是3还是4</span></span><br><span class="line"><span class="comment">//由于前面的fread所以要将fp重新偏移回下一个frame的起始位置</span></span><br><span class="line"><span class="built_in">fseek</span>(fp, framesize - read_size, SEEK_CUR); <span class="comment">//fp指针相对于当前位置,偏移framesize - r_size</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> framesize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">RtpSendH264Frame</span><span class="params">(<span class="type">int</span> serverRtpSockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port,</span></span></span><br><span class="line"><span class="params"><span class="function">RtpPacket* rtpPacket, <span class="type">char</span>* frame, <span class="type">uint32_t</span> frameSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sendBytes = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="comment">//H.264由一个一个的NALU组成，每个NALU之间使用00 00 00 01或00 00 01分隔开，每个NALU的第一次字节都有特殊的含义</span></span><br><span class="line"><span class="type">uint8_t</span> naluType = frame[<span class="number">0</span>];</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;frame size = &quot;</span> &lt;&lt; frameSize &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (frameSize &lt;= RTP_MAX_PKT_SIZE) <span class="comment">// nalu长度小于最大包长：单一NALU单元模式</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//*   0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">//*  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">//*  |F|NRI|  Type   | a single NAL unit ... |</span></span><br><span class="line"><span class="comment">//*  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(rtpPacket-&gt;payload, frame, frameSize); <span class="comment">//将有效数据传输给有效载荷</span></span><br><span class="line">ret = <span class="built_in">RtpSendPacketOverUdp</span>(serverRtpSockfd, ip, port, rtpPacket, frameSize);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">rtpPacket-&gt;rtpHeader.seq++; <span class="comment">//序号加一</span></span><br><span class="line">sendBytes += ret;</span><br><span class="line"><span class="comment">//0 00 11111 &amp; 0 11 00111 0 00 00111  </span></span><br><span class="line"><span class="keyword">if</span> ((naluType &amp; <span class="number">0x1F</span>) == <span class="number">7</span> || (naluType &amp; <span class="number">0x1F</span>) == <span class="number">8</span>) <span class="comment">// 如果是SPS、PPS就不需要加时间戳</span></span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// nalu长度大于最大包场：分片模式</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*  0                   1                   2</span></span><br><span class="line"><span class="comment">//*  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3</span></span><br><span class="line"><span class="comment">//* +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">//* | FU indicator  |   FU header   |   FU payload   ...  |</span></span><br><span class="line"><span class="comment">//* +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*     FU Indicator</span></span><br><span class="line"><span class="comment">//*    0 1 2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">//*   +-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">//*   |F|NRI|  Type   |</span></span><br><span class="line"><span class="comment">//*   +---------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*      FU Header</span></span><br><span class="line"><span class="comment">//*    0 1 2 3 4 5 6 7</span></span><br><span class="line"><span class="comment">//*   +-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">//*   |S|E|R|  Type   |</span></span><br><span class="line"><span class="comment">//*   +---------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pktNum = frameSize / RTP_MAX_PKT_SIZE;       <span class="comment">// 有几个完整的包</span></span><br><span class="line"><span class="type">int</span> remainPktSize = frameSize % RTP_MAX_PKT_SIZE; <span class="comment">// 剩余不完整包的大小</span></span><br><span class="line"><span class="type">int</span> i, pos = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送完整的包</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pktNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 0110 0000 | 0001 1100</span></span><br><span class="line"><span class="comment">//分片打包载荷的第一个字节中,与NALU第一个字节的高三位相同,处理后, 0 ii 11100</span></span><br><span class="line">rtpPacket-&gt;payload[<span class="number">0</span>] = (naluType &amp; <span class="number">0x60</span>) | <span class="number">28</span>; <span class="comment">//2,3位  第一位保持一直为0</span></span><br><span class="line"><span class="comment">//0001 1111</span></span><br><span class="line">rtpPacket-&gt;payload[<span class="number">1</span>] = naluType &amp; <span class="number">0x1F</span>; <span class="comment">//后5位,处理后 0 0 0 iiiii 代表既不是第一个也不是最后一个包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) <span class="comment">//第一包数据中的</span></span><br><span class="line">rtpPacket-&gt;payload[<span class="number">1</span>] |= <span class="number">0x80</span>; <span class="comment">// start 0 1 0 00000 : S标为1代表是第一个包</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (remainPktSize == <span class="number">0</span> &amp;&amp; i == pktNum - <span class="number">1</span>) <span class="comment">//最后一个整包数据</span></span><br><span class="line">rtpPacket-&gt;payload[<span class="number">1</span>] |= <span class="number">0x40</span>; <span class="comment">// end 0 0 1 00000 : E标为1代表是最后一个包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//frame就是NALU类型,第一个字节是header,给予了RTP格式的前两位信息后,RTP之后就是数据,这个数据就从NALU+1,跳过header得到</span></span><br><span class="line"><span class="built_in">memcpy</span>(rtpPacket-&gt;payload + <span class="number">2</span>, frame + pos, RTP_MAX_PKT_SIZE); <span class="comment">//由于前两个字节是载荷的信息不是有效数据</span></span><br><span class="line">ret = <span class="built_in">RtpSendPacketOverUdp</span>(serverRtpSockfd, ip, port, rtpPacket, RTP_MAX_PKT_SIZE + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">rtpPacket-&gt;rtpHeader.seq++;</span><br><span class="line">sendBytes += ret;</span><br><span class="line">pos += RTP_MAX_PKT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送剩余的数据</span></span><br><span class="line"><span class="keyword">if</span> (remainPktSize &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">rtpPacket-&gt;payload[<span class="number">0</span>] = (naluType &amp; <span class="number">0x60</span>) | <span class="number">28</span>;</span><br><span class="line">rtpPacket-&gt;payload[<span class="number">1</span>] = naluType &amp; <span class="number">0x1F</span>;</span><br><span class="line">rtpPacket-&gt;payload[<span class="number">1</span>] |= <span class="number">0x40</span>; <span class="comment">//end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(rtpPacket-&gt;payload + <span class="number">2</span>, frame + pos, remainPktSize + <span class="number">2</span>);</span><br><span class="line">ret = <span class="built_in">RtpSendPacketOverUdp</span>(serverRtpSockfd, ip, port, rtpPacket, remainPktSize + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">rtpPacket-&gt;rtpHeader.seq++;</span><br><span class="line">sendBytes += ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rtpPacket-&gt;rtpHeader.timestamp += <span class="number">90000</span> / <span class="number">25</span>; <span class="comment">//  一秒定义为90000的单位 / 帧数 加时间戳</span></span><br><span class="line">out:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sendBytes;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">DoClient</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> method[<span class="number">40</span>],url[<span class="number">100</span>],version[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> CSeq, client_Rtp_port, client_Rtcp_port;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> server_Rtp_fd = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> server_Rtcp_fd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* r_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(BUF_MAX_SIZE); <span class="comment">//读缓冲区,读取客户端数据</span></span><br><span class="line"><span class="type">char</span>* w_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(BUF_MAX_SIZE); <span class="comment">//写缓冲区,向客户端发送数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> recv_len = <span class="built_in">recv</span>(fd, r_buf, BUF_MAX_SIZE, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (recv_len &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">r_buf[recv_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">std::cout &lt;&lt; std::endl &lt;&lt; __FUNCTION__ &lt;&lt; <span class="string">&quot; r_buf  = &quot;</span> &lt;&lt; r_buf &lt;&lt; std::endl;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* sepe = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="type">char</span>* line = <span class="built_in">strtok</span>(r_buf, sepe);</span><br><span class="line"><span class="keyword">while</span> (line)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;OPTIONS&quot;</span>) ||</span><br><span class="line"><span class="built_in">strstr</span>(line, <span class="string">&quot;DESCRIBE&quot;</span>) ||</span><br><span class="line"><span class="built_in">strstr</span>(line, <span class="string">&quot;SETUP&quot;</span>) ||</span><br><span class="line"><span class="built_in">strstr</span>(line, <span class="string">&quot;PLAY&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;%s %s %s\r\n&quot;</span>, method, url, version) != <span class="number">3</span>) <span class="comment">//return success args num</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sscanf method url version fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;CSeq&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;CSeq: %d\r\n&quot;</span>, &amp;CSeq) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sscanf CSeq&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(line, <span class="string">&quot;Transport:&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Transport:&quot;</span>))) <span class="comment">//suces</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;Transport: RTP/AVP/UDP;unicast;client_port=%d-%d\r\n&quot;</span>, &amp;client_Rtp_port, &amp;client_Rtcp_port) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sscanf 2 port fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">line = <span class="built_in">strtok</span>(<span class="literal">NULL</span>, sepe);</span><br><span class="line"><span class="comment">//nullptr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;OPTIONS&quot;</span>))</span><br><span class="line"><span class="built_in">Handle_Option</span>(w_buf, CSeq); <span class="comment">//no check</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;DESCRIBE&quot;</span>))</span><br><span class="line"><span class="built_in">Handle_Describe</span>(w_buf, CSeq, url);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;SETUP&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Handle_Setup</span>(w_buf, CSeq, client_Rtp_port);</span><br><span class="line">server_Rtp_fd = <span class="built_in">CreateUdpSocket</span>();</span><br><span class="line">server_Rtcp_fd = <span class="built_in">CreateUdpSocket</span>();</span><br><span class="line"><span class="keyword">if</span> (server_Rtp_fd &lt; <span class="number">0</span> || server_Rtcp_fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;create server udp fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">BindSocketAddr</span>(server_Rtp_fd, SERVER_RTP_PORT) &lt; <span class="number">0</span>||</span><br><span class="line"><span class="built_in">BindSocketAddr</span>(server_Rtcp_fd, SERVER_RTCP_PORT) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;bind server_fd fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>))</span><br><span class="line"><span class="built_in">Handle_Play</span>(w_buf, CSeq);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;nb method : &quot;</span> &lt;&lt; method &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; std::endl &lt;&lt; __FUNCTION__ &lt;&lt; <span class="string">&quot;w_buf = &quot;</span> &lt;&lt; w_buf &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">send</span>(fd, w_buf, <span class="built_in">strlen</span>(w_buf), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> framesize, startcode;</span><br><span class="line"><span class="type">char</span>* frame = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">500000</span>);</span><br><span class="line">RtpPacket* rtp_packet = (RtpPacket*)<span class="built_in">malloc</span>(<span class="number">500000</span>);</span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(H264_FILE_NAME, <span class="string">&quot;rb&quot;</span>); <span class="comment">//只读二进制</span></span><br><span class="line"><span class="keyword">if</span> (!fp)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;file fp fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">RtpHeaderInit</span>(rtp_packet, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, RTP_VESION, RTP_PAYLOAD_TYPE_H264, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0X88923423</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;start play\n&quot;</span> &lt;&lt; <span class="string">&quot;client ip:&quot;</span> &lt;&lt; ip &lt;&lt; std::endl &lt;&lt; <span class="string">&quot;client port:&quot;</span> &lt;&lt; client_Rtp_port &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">framesize = <span class="built_in">GetFrameFromH264File</span>(fp, frame, <span class="number">500000</span>); <span class="comment">//获取的是当前 00至00的大小</span></span><br><span class="line"><span class="keyword">if</span> (framesize &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;read &quot;</span> &lt;&lt; H264_FILE_NAME &lt;&lt; <span class="string">&quot;end, framesize = &quot;</span> &lt;&lt; framesize &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">StartCode3</span>(frame))</span><br><span class="line">startcode = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">startcode = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">framesize -= startcode; <span class="comment">//减去开头的起始码,真正的数据大小</span></span><br><span class="line"><span class="built_in">RtpSendH264Frame</span>(server_Rtp_fd, ip, client_Rtp_port, rtp_packet, frame + startcode, framesize);</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(frame);</span><br><span class="line"><span class="built_in">free</span>(rtp_packet);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(method, <span class="number">0</span>, <span class="built_in">sizeof</span>(method));</span><br><span class="line"><span class="built_in">memset</span>(url, <span class="number">0</span>, <span class="built_in">sizeof</span>(url));</span><br><span class="line">CSeq = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//next while</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">closesocket</span>(fd);</span><br><span class="line"><span class="keyword">if</span> (server_Rtp_fd) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server_Rtp_fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (server_Rtcp_fd &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(server_Rtcp_fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(r_buf);</span><br><span class="line"><span class="built_in">free</span>(w_buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WSADATA winsock;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;winsock) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;winsock start error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> server_fd = <span class="built_in">CreateTcpSocket</span>();</span><br><span class="line"><span class="keyword">if</span> (server_fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;tcpsocket create fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">BindSocketAddr</span>(server_fd,SERVER_PORT) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;bind fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">listen</span>(server_fd, <span class="number">128</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;listen fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot; rtsp://127.0.0.1:&quot;</span> &lt;&lt; SERVER_PORT &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> client_fd;</span><br><span class="line"><span class="type">char</span> client_ip[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> client_port;</span><br><span class="line">client_fd = <span class="built_in">AcceptClient</span>(server_fd, client_ip, &amp;client_port);</span><br><span class="line"><span class="keyword">if</span> (client_fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;accept client ip:&quot;</span> &lt;&lt; client_ip &lt;&lt; <span class="string">&quot; port:&quot;</span> &lt;&lt; client_port;</span><br><span class="line"><span class="built_in">DoClient</span>(client_fd, client_ip, client_port);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(server_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-音频原理"><a href="#3-音频原理" class="headerlink" title="3. 音频原理"></a>3. 音频原理</h1><h2 id="3-1-PCM数据格式"><a href="#3-1-PCM数据格式" class="headerlink" title="3.1 PCM数据格式"></a>3.1 PCM数据格式</h2><p><code>PCM</code>(Pulse Code Modulation)也被称为 脉码编码调制。<br>PCM中的声音数据没有被压缩，如果是单声道的文件，采样数据按时间的先后顺序依次存入。(它的基本组织单位是BYTE(8bit)或WORD(16bit))</p><p>一般情况下，一帧PCM是由<code>2048</code>次采样组成的</p><p>如果是双声道的文件，采样数据按时间先后顺序交叉地存入。如图所示:</p><p><img src="/img/rtsp21.png"></p><blockquote><p>对于解析PCM数据有所帮助</p></blockquote><p>麦克风在录音采样后，直接获得的就是音频原始数据pcm。<br>但由于pcm数据较大，所以通常需要压缩之后才能传输或保存，常见的音频压缩技术有aac，g711，opus，mp3等，最常用的就是<code>aac</code>。</p><p>1秒钟的pcm的声音大小 &#x3D; 44100 * 2(声道) * 2（字节） &#x2F; 1024 * 60(秒) &#x2F;1024<br>一分钟约等于5MB</p><h2 id="3-2-几个可能会用到的命令行"><a href="#3-2-几个可能会用到的命令行" class="headerlink" title="3.2 几个可能会用到的命令行"></a>3.2 几个可能会用到的命令行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//指定时间段录制</span><br><span class="line">ffmpeg -i input.mp4 -c:v copy -c:a copy -ss 00:10:20 -to 00:30:20 out.mp4</span><br><span class="line"></span><br><span class="line">//指定录制时长</span><br><span class="line">ffmpeg -i input.mp4 -c:v copy -c:a copy -t 30 out.mp4</span><br><span class="line">备注: -t 30 表示指定30秒的录制时长</span><br><span class="line"></span><br><span class="line">//ffmpeg命令行 从mp4视频文件提取aac 音频文件</span><br><span class="line">ffmpeg -i test.mp4  -vn -acodec aac test.aac</span><br><span class="line">备注：-i 表示输入文件 </span><br><span class="line">      -vm <span class="built_in">disable</span> video / 丢掉视频</span><br><span class="line">      -acodec 设置音频编码格式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//ffmpeg 从aac音频文件解码为pcm音频文件</span><br><span class="line">ffmpeg -i test.aac -f s16le test.pcm</span><br><span class="line">备注：-i 表示输入文件 </span><br><span class="line">      -f 表示输出格式</span><br><span class="line"></span><br><span class="line">//ffplay 播放.pcm音频文件</span><br><span class="line">备注：-i 表示指定的输入文件</span><br><span class="line">      -f 表示强制使用的格式</span><br><span class="line">      -ar 表示播放的音频数据的采样率</span><br><span class="line">      -ac 表示播放的音频数据的通道数</span><br></pre></td></tr></table></figure><h2 id="3-3-代码"><a href="#3-3-代码" class="headerlink" title="3.3  代码"></a>3.3  代码</h2><blockquote><p>Adts.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AdtsHeader</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> syncword;  <span class="comment">//12 bit 同步字 &#x27;1111 1111 1111&#x27;，说明一个ADTS帧的开始</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> id;        <span class="comment">//1 bit MPEG 标示符， 0 for MPEG-4，1 for MPEG-2</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> layer;     <span class="comment">//2 bit 总是&#x27;00&#x27;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> protectionAbsent;  <span class="comment">//1 bit 1表示没有crc，0表示有crc</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> profile;           <span class="comment">//1 bit 表示使用哪个级别的AAC  //2bit</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> samplingFreqIndex; <span class="comment">//4 bit 表示使用的采样频率</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> privateBit;        <span class="comment">//1 bit</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> channelCfg; <span class="comment">//3 bit 表示声道数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> originalCopy;         <span class="comment">//1 bit</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> home;                  <span class="comment">//1 bit</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*下面的为改变的参数即每一帧都不同*/</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> copyrightIdentificationBit;   <span class="comment">//1 bit</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> copyrightIdentificationStart; <span class="comment">//1 bit</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> aacFrameLength;               <span class="comment">//13 bit 一个ADTS帧的长度包括ADTS头和AAC原始流</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> adtsBufferFullness;           <span class="comment">//11 bit 0x7FF 说明是码率可变的码流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* number_of_raw_data_blocks_in_frame</span></span><br><span class="line"><span class="comment">     * 表示ADTS帧中有number_of_raw_data_blocks_in_frame + 1个AAC原始帧</span></span><br><span class="line"><span class="comment">     * 所以说number_of_raw_data_blocks_in_frame == 0</span></span><br><span class="line"><span class="comment">     * 表示说ADTS帧中有一个AAC数据块并不是说没有。(一个AAC原始帧包含一段时间内1024个采样及相关数据)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> numberOfRawDataBlockInFrame; <span class="comment">//2 bit</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Parse_AdtsHeader</span><span class="params">(<span class="type">uint8_t</span>* headerBuf, <span class="keyword">struct</span> AdtsHeader* adtsHeader)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Convert_AdtsHeader_ToBuf</span><span class="params">(<span class="keyword">struct</span> AdtsHeader* adtsHeader, <span class="type">uint8_t</span>* adtsHeaderBuf)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>Adts.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Adts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Parse_AdtsHeader</span><span class="params">(<span class="type">uint8_t</span>* headerBuf, AdtsHeader* adtsHeader)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(adtsHeader, <span class="number">0</span>, <span class="built_in">sizeof</span>(*adtsHeader)); <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((headerBuf[<span class="number">0</span>] == <span class="number">0xFF</span>) &amp;&amp; ((headerBuf[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) == <span class="number">0xF0</span>))<span class="comment">//三个 &#x27;1111&#x27;代表 1个ADTS帧的开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        adtsHeader-&gt;id = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">1</span>] &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span>; <span class="comment">//如果id==1, &gt;&gt;3后变为1</span></span><br><span class="line">        adtsHeader-&gt;layer = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">1</span>] &amp; <span class="number">0x06</span>) &gt;&gt; <span class="number">1</span>;<span class="comment">// 0000 0110, layer一般为0 &amp;后为0</span></span><br><span class="line">        adtsHeader-&gt;protectionAbsent = (<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">1</span>] &amp; <span class="number">0x01</span>;</span><br><span class="line">        adtsHeader-&gt;profile = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>; <span class="comment">//1100 0000</span></span><br><span class="line">        adtsHeader-&gt;samplingFreqIndex = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">2</span>] &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>; <span class="comment">// 0011 1100</span></span><br><span class="line">        adtsHeader-&gt;privateBit = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">2</span>] &amp; <span class="number">0x02</span>) &gt;&gt; <span class="number">1</span>; <span class="comment">// 0000 0010</span></span><br><span class="line">        <span class="comment">// 0000 0001 -&gt; 0000 0100 | 1100 0000 -&gt; 0000 0011</span></span><br><span class="line">        adtsHeader-&gt;channelCfg = ((((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">2</span>] &amp; <span class="number">0x01</span>) &lt;&lt; <span class="number">2</span>) |</span><br><span class="line">                (((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">3</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>));</span><br><span class="line">        adtsHeader-&gt;originalCopy = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">3</span>] &amp; <span class="number">0x20</span>) &gt;&gt; <span class="number">5</span>; <span class="comment">// 0010 0000</span></span><br><span class="line">        adtsHeader-&gt;home = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">3</span>] &amp; <span class="number">0x10</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        adtsHeader-&gt;copyrightIdentificationBit = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">3</span>] &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        adtsHeader-&gt;copyrightIdentificationStart = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">3</span>] &amp; <span class="number">0x04</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0000 0000 0000 0011 -&gt; 0001 1111 1111 1111</span></span><br><span class="line">        adtsHeader-&gt;aacFrameLength = (((((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">3</span>]) &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">11</span>) |</span><br><span class="line">                (((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">3</span>) |</span><br><span class="line">                ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">5</span>] &amp; <span class="number">0xE0</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        adtsHeader-&gt;adtsBufferFullness = (((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">5</span>] &amp; <span class="number">0x1f</span>) &lt;&lt; <span class="number">6</span> |</span><br><span class="line">                ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">6</span>] &amp; <span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        adtsHeader-&gt;numberOfRawDataBlockInFrame = ((<span class="type">unsigned</span> <span class="type">int</span>)headerBuf[<span class="number">6</span>] &amp; <span class="number">0x03</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;fail to parse&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Convert_AdtsHeader_ToBuf</span><span class="params">(<span class="keyword">struct</span> AdtsHeader* adtsHeader, <span class="type">uint8_t</span>* adtsHeaderBuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    adtsHeaderBuf[<span class="number">0</span>] = <span class="number">0xFF</span>;</span><br><span class="line">    adtsHeaderBuf[<span class="number">1</span>] = <span class="number">0xF1</span>;</span><br><span class="line">    adtsHeaderBuf[<span class="number">2</span>] = ((adtsHeader-&gt;profile) &lt;&lt; <span class="number">6</span>) + (adtsHeader-&gt;samplingFreqIndex &lt;&lt; <span class="number">2</span>) + (adtsHeader-&gt;channelCfg &gt;&gt; <span class="number">2</span>);</span><br><span class="line">    adtsHeaderBuf[<span class="number">3</span>] = (((adtsHeader-&gt;channelCfg &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) + (adtsHeader-&gt;aacFrameLength &gt;&gt; <span class="number">11</span>));</span><br><span class="line">    adtsHeaderBuf[<span class="number">4</span>] = ((adtsHeader-&gt;aacFrameLength &amp; <span class="number">0x7FF</span>) &gt;&gt; <span class="number">3</span>);</span><br><span class="line">    adtsHeaderBuf[<span class="number">5</span>] = (((adtsHeader-&gt;aacFrameLength &amp; <span class="number">7</span>) &lt;&lt; <span class="number">5</span>) + <span class="number">0x1F</span>);</span><br><span class="line">    adtsHeaderBuf[<span class="number">6</span>] = <span class="number">0xFC</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>decode_aac, aac格式转pcm格式</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AAC_FILE_NAME <span class="string">&quot;D:/ffmpeg/learn/test.aac&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fdk-aac/aacdecoder_lib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//data载入buf中的有效信息(包括帧头), data_size 赋值为buf中framesize;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Get_ADTSframe</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* buf, <span class="type">int</span> buf_size, <span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">unsigned</span> <span class="type">int</span>* data_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!buf || !data || !data_size)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> framesize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (buf_size &lt; <span class="number">7</span>) <span class="comment">//头信息</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line"><span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="number">0xff</span> &amp;&amp; ((buf[<span class="number">1</span>] &amp; <span class="number">0xf0</span>) == <span class="number">0xf0</span>)) <span class="comment">//比较运算符优先级高于位运算符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//赋值运算符优先级最低</span></span><br><span class="line"><span class="comment">//aac_frame_length (&lt;&lt;&gt;&gt; 优先级 高于 &amp;)</span></span><br><span class="line">framesize |= ((buf[<span class="number">3</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">11</span>);</span><br><span class="line">framesize |= buf[<span class="number">4</span>] &lt;&lt; <span class="number">3</span>;</span><br><span class="line">framesize |= ((buf[<span class="number">5</span>] &amp; <span class="number">0xe0</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">--buf_size;</span><br><span class="line">++buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (buf_size &lt; framesize)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(data, buf, framesize);</span><br><span class="line">*data_size = framesize;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE* aac_file = <span class="built_in">fopen</span>(AAC_FILE_NAME, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!aac_file)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;open aac fail\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">HANDLE_AACDECODER aac_coder = <span class="built_in">aacDecoder_Open</span>(TT_MP4_ADTS, <span class="number">1</span>);</span><br><span class="line">AAC_DECODER_ERROR aac_error;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* aac_frame = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">5</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* aac_buf = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> pcm_size = <span class="number">8</span> * <span class="number">1024</span> * <span class="built_in">sizeof</span>(INT_PCM);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* pcm_data = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(pcm_size);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> offset = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> aac_datasize = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> aac_framesize = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> valid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(aac_file)) <span class="comment">//函数返回0 代表文件尚未读取结束</span></span><br><span class="line">&#123;</span><br><span class="line">aac_datasize = <span class="built_in">fread</span>(aac_buf + offset, <span class="number">1</span>, <span class="number">1024</span> * <span class="number">1024</span> - offset, aac_file);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* aac_data = aac_buf; <span class="comment">//因为要得到framesize就要移动指针来找头</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//其实buf和frame都是一样的</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">Get_ADTSframe</span>(aac_data, aac_datasize, aac_frame, &amp;aac_framesize);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;adts frame end\n&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">1</span>) <span class="comment">//ADTS中信息不完整</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(aac_buf, aac_data, aac_datasize);</span><br><span class="line">offset = aac_datasize;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;adts frame broken\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">valid = aac_framesize;</span><br><span class="line">aac_error = <span class="built_in">aacDecoder_Fill</span>(aac_coder, &amp;aac_frame, &amp;aac_framesize, &amp;valid);</span><br><span class="line"><span class="keyword">if</span> (aac_error &gt; <span class="number">0</span>)</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;fill decoder\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">aac_error = <span class="built_in">aacDecoder_DecodeFrame</span>(aac_coder, (INT_PCM*)pcm_data,</span><br><span class="line">pcm_size / <span class="built_in">sizeof</span>(INT_PCM), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (aac_error &gt; <span class="number">0</span>)</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;decode error\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*sampleRate: 解码后的PCM音频信号的采样率（单位：Hz）（经过SBR处理后的采样率）。</span></span><br><span class="line"><span class="comment">frameSize : 解码后的PCM音频信号的帧大小。</span></span><br><span class="line"><span class="comment">对于AAC - LC：1024或960。</span></span><br><span class="line"><span class="comment">对于HE - AAC（v2）：2048或1920。</span></span><br><span class="line"><span class="comment">对于AAC - LD和AAC - ELD：512或480。</span></span><br><span class="line"><span class="comment">numChannels : 解码后的PCM音频信号中输出音频通道的数量。</span></span><br><span class="line"><span class="comment">pChannelType : 每个输出音频通道的音频通道类型。</span></span><br><span class="line"><span class="comment">pChannelIndices : 每个输出音频通道的音频通道索引。</span></span><br><span class="line"><span class="comment">aacSampleRate : 不带SBR的采样率（来自配置信息）。</span></span><br><span class="line"><span class="comment">profile : MPEG - 2配置文件（来自文件头）（ - 1：不适用（例如，MPEG - 4））。</span></span><br><span class="line"><span class="comment">aot : 音频对象类型（来自ASC）：针对MPEG - 2比特流设置为适当的值（例如，AAC - LC为2）。</span></span><br><span class="line"><span class="comment">channelConfig : 通道配置（0：PCE定义，1：单声道，2：立体声，...）。</span></span><br><span class="line"><span class="comment">bitRate : 瞬时比特率。</span></span><br><span class="line"><span class="comment">aacSamplesPerFrame : AAC核心的每帧样本数（来自ASC）。</span></span><br><span class="line"><span class="comment">对于AAC - LC：1024或960。</span></span><br><span class="line"><span class="comment">对于AAC - LD和AAC - ELD：512或480。</span></span><br><span class="line"><span class="comment">aacNumChannels : 经过AAC核心处理后（在PS或MPS处理之前）的音频通道数量。注意：这不是最终的输出通道数量！</span></span><br><span class="line"><span class="comment">extAot : 扩展音频对象类型（来自ASC）。</span></span><br><span class="line"><span class="comment">extSamplingRate : 扩展采样率（来自ASC）。</span></span><br><span class="line"><span class="comment">outputDelay : 解码器额外延迟的样本数。</span></span><br><span class="line"><span class="comment">flags : 内部标志的副本。仅由解码器写入，外部只能读取。</span></span><br><span class="line"><span class="comment">epConfig : epConfig级别（来自ASC）：只支持级别0， - 1表示没有ER（例如，AOT = 2，MPEG - 2 AAC等）。</span></span><br><span class="line"><span class="comment">numLostAccessUnits : 如果 aacDecoder_DecodeFrame() 返回 AAC_DEC_TRANSPORT_SYNC_ERROR，则此整数将反映估计的丢失访问单元的数量。如果估算失败，则会小于0。</span></span><br><span class="line"><span class="comment">numTotalBytes : 通过解码器传递的总字节数。</span></span><br><span class="line"><span class="comment">numBadBytes : 从 numTotalBytes 中考虑为带有错误的总字节数。</span></span><br><span class="line"><span class="comment">numTotalAccessUnits : 通过解码器传递的总访问单元数。</span></span><br><span class="line"><span class="comment">numBadAccessUnits : 从 numTotalAccessUnits 中考虑为带有错误的总访问单元数。</span></span><br><span class="line"><span class="comment">drcProgRefLev : DRC（动态范围控制）程序参考电平。定义低于满量程的参考级别。</span></span><br><span class="line"><span class="comment">drcPresMode : DRC（动态范围控制）呈现模式。*/</span></span><br><span class="line">CStreamInfo* pcm_frame = <span class="built_in">aacDecoder_GetStreamInfo</span>(aac_coder); <span class="comment">//获取解码后的音频流的相关信息</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pcmFrame: channels=%d,simmpleRate=%d,frameSize=%d\n&quot;</span>,</span><br><span class="line">pcm_frame-&gt;numChannels, pcm_frame-&gt;sampleRate, pcm_frame-&gt;frameSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">//码流格式</span></span><br><span class="line"><span class="type">char</span> profile_str[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> profile = (aac_frame[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>; <span class="comment">//aac级别,profile</span></span><br><span class="line"><span class="keyword">switch</span> (profile)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">sprintf</span>(profile_str, <span class="string">&quot;Main&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">sprintf</span>(profile_str, <span class="string">&quot;LC&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">sprintf</span>(profile_str, <span class="string">&quot;SSR&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="built_in">sprintf</span>(profile_str, <span class="string">&quot;unknown&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//采样率</span></span><br><span class="line"><span class="type">char</span> frequence_str[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sampling_frequency_index = (aac_frame[<span class="number">2</span>] &amp; <span class="number">0x3C</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (sampling_frequency_index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;96000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;88200Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;64000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;48000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;44100Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;32000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;24000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;22050Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;16000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;12000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;11025Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>: <span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;8000Hz&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">sprintf</span>(frequence_str, <span class="string">&quot;unknown&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d| %8s|  %8s| %5d| %5d |\n&quot;</span>,</span><br><span class="line">count, profile_str, frequence_str, aac_framesize, pcm_size);</span><br><span class="line">aac_datasize -= aac_framesize;</span><br><span class="line">aac_data += aac_framesize;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;---------------------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(pcm_data);</span><br><span class="line"><span class="built_in">free</span>(aac_buf);</span><br><span class="line"><span class="built_in">free</span>(aac_frame);</span><br><span class="line"><span class="built_in">fclose</span>(aac_file);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sdl2_play_aac.cpp播放aac音频</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//播放aac格式的音频</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDL_MAIN_HANDLED <span class="comment">//SDL 不要提供默认的 main 函数入口</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4996 )</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Adts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fdk-aac/aacdecoder_lib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AAC_FILE_NAME <span class="string">&quot;D:/ffmpeg/learn/test.aac&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Uint8* audio_chunk;</span><br><span class="line"><span class="type">static</span> Uint32 audio_len;</span><br><span class="line"><span class="type">static</span> Uint8* audio_pos;</span><br><span class="line"></span><br><span class="line"><span class="comment">//data : SDL_AudioSpec.userdata</span></span><br><span class="line"><span class="comment">//stream 这个指针是 SDL 内部音频数据内存的指针，只要把数据拷贝到这个指针的地址，就能播放声音了。</span></span><br><span class="line"><span class="comment">//len 表示音频缓存区的大小</span></span><br><span class="line"><span class="comment">//SDL 打开音频硬件设备的时候，SDL 库就会创建一个线程，来及时执行回调函数 sdl_audio_callback()</span></span><br><span class="line"><span class="comment">//至于 SDL 线程多久回调一次函数，不需要太关心</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fill_Audio</span><span class="params">(<span class="type">void</span>* data, Uint8* stream, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">SDL_memset</span>(stream, <span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">if</span> (audio_len == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    len = len &gt; audio_len ? audio_len : len; <span class="comment">//取min, audio_len是pcm_framesize</span></span><br><span class="line">    <span class="comment">//音量范围为0~128,设置为SDL_MIX_MAXVOLUME表示完整的音频音量</span></span><br><span class="line">    <span class="comment">//将audio_pos音频 混进 stream, len以字节计数大小</span></span><br><span class="line">    <span class="built_in">SDL_MixAudio</span>(stream, audio_pos, len, SDL_MIX_MAXVOLUME);</span><br><span class="line">    audio_pos += len; <span class="comment">//跳至下一个播放帧的起点</span></span><br><span class="line">    audio_len -= len; <span class="comment">//使主函数中的while等待终止,同时也给予自己足够时间执行改函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SDL_Init</span>(SDL_INIT_AUDIO | SDL_INIT_TIMER)) <span class="comment">//初始化音频子系统 | 初始化定时器子系统</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;init SDL fail - &quot;</span> &lt;&lt; <span class="built_in">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//typedef struct SDL_AudioSpec </span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    int freq;                   // 采样率 (samples per second)</span></span><br><span class="line">    <span class="comment">//    SDL_AudioFormat format;     // 音频格式</span></span><br><span class="line">    <span class="comment">//    Uint8 channels;             // 声道数 (1 for mono, 2 for stereo)</span></span><br><span class="line">    <span class="comment">//    Uint8 silence;              // 静音值 (通常为 0)</span></span><br><span class="line">    <span class="comment">//    Uint16 samples;             // 音频缓冲区大小 (单位是采样数)</span></span><br><span class="line">    <span class="comment">//    Uint16 padding;             // 对齐用的填充 (通常为 0)</span></span><br><span class="line">    <span class="comment">//    Uint32 size;                // 音频缓冲区大小 (单位是字节)</span></span><br><span class="line">    <span class="comment">//    SDL_AudioCallback callback; // 回调函数指针，用于处理音频数据</span></span><br><span class="line">    <span class="comment">//    void* userdata;             // 用户自定义数据</span></span><br><span class="line">    <span class="comment">//&#125;;</span></span><br><span class="line">    SDL_AudioSpec SDL_spec;</span><br><span class="line">    SDL_spec.freq = <span class="number">44100</span>;</span><br><span class="line">    SDL_spec.format = AUDIO_S16SYS; <span class="comment">//16-bit signed integer 的音频数据格式,使用主机系统的字节顺序</span></span><br><span class="line">    SDL_spec.channels = <span class="number">2</span>;</span><br><span class="line">    SDL_spec.silence = <span class="number">0</span>;</span><br><span class="line">    SDL_spec.samples = <span class="number">1024</span>; <span class="comment">//音频缓冲区大小(单位是采样数)</span></span><br><span class="line">    SDL_spec.callback = Fill_Audio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SDL_OpenAudio</span>(&amp;SDL_spec, <span class="literal">nullptr</span>) &lt; <span class="number">0</span>) <span class="comment">//打开音频设备并根据 SDL_spec 的要求进行初始化。</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;open audio fail\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SDL_PauseAudio</span>(<span class="number">0</span>);<span class="comment">//控制SDL音频设备的暂停状态。参数为0，音频设备将被恢复到正常状态并开始播放音频数据；</span></span><br><span class="line">                      <span class="comment">//而当参数为 1 时，音频设备将被暂停，停止播放音频数据。</span></span><br><span class="line"></span><br><span class="line">    FILE* aac_file = <span class="built_in">fopen</span>(AAC_FILE_NAME, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!aac_file)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;open file fail\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HANDLE_AACDECODER aac_coder = <span class="built_in">aacDecoder_Open</span>(TT_MP4_ADTS, <span class="number">1</span>); <span class="comment">//aac解码器实例化</span></span><br><span class="line">    <span class="type">uint8_t</span>* frame = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(<span class="number">2000</span>); <span class="comment">//存放aac数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> pcm_framesize = <span class="number">2</span> * <span class="number">1024</span> * <span class="built_in">sizeof</span>(INT_PCM); <span class="comment">//signed short</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* pcm_frame = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">malloc</span>(pcm_framesize); <span class="comment">//存放pcm格式的数据</span></span><br><span class="line"></span><br><span class="line">    AdtsHeader adts_header;</span><br><span class="line">    <span class="type">int</span> adts_headerlen; <span class="comment">//ADTS头长</span></span><br><span class="line">    <span class="type">int</span> adts_contentlen;<span class="comment">//ADTS负载长</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> adts_len = <span class="number">0</span>; <span class="comment">//ADTS当前帧总长(头+负载)</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">//count循环次数, 计帧</span></span><br><span class="line">    AAC_DECODER_ERROR aac_error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        adts_headerlen = <span class="built_in">fread</span>(frame, <span class="number">1</span>, <span class="number">7</span>, aac_file); <span class="comment">//头长是目前自定的7字节, 读头</span></span><br><span class="line">        <span class="keyword">if</span> (adts_headerlen &lt;= <span class="number">0</span>) <span class="comment">//没有数据或出错</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;read header error\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Parse_AdtsHeader</span>(frame, &amp;adts_header) &lt; <span class="number">0</span>) <span class="comment">//处理头数据放置于包内</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;parse header error\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取aacfile中头后面(一段帧)的数据</span></span><br><span class="line">        adts_contentlen = <span class="built_in">fread</span>(frame + <span class="number">7</span>, <span class="number">1</span>, adts_header.aacFrameLength - <span class="number">7</span>, aac_file);</span><br><span class="line">        <span class="keyword">if</span> (adts_contentlen &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;read content error\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        adts_len = adts_header.aacFrameLength;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//AAC解码器是解码用的,解什么,就通过这个函数传进去</span></span><br><span class="line">        <span class="comment">//从缓冲区中(frame)</span></span><br><span class="line">        <span class="comment">//外部输入缓冲区的大小(length)</span></span><br><span class="line">        <span class="comment">//返回信息(len) 以便后续调用aacDecoder Fill时，可以确定pBuffer中的正确位置以获取下一个数据。</span></span><br><span class="line">        aac_error = <span class="built_in">aacDecoder_Fill</span>(aac_coder, &amp;frame, &amp;adts_header.aacFrameLength, &amp;adts_len);</span><br><span class="line">        <span class="keyword">if</span> (aac_error &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;decoder fill error\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始编码数据, 将解析为 pcm 格式的数据存储至pcm_frame中</span></span><br><span class="line">        <span class="comment">//最后一位是标志位 :</span></span><br><span class="line">        <span class="comment">//0 无附加信息</span></span><br><span class="line">        <span class="comment">//AACDEC_CONCEAL（值为 1）：表示需要进行数据的掩盖（concealment）处理。</span></span><br><span class="line">        <span class="comment">//AACDEC_FLUSH（值为 2）：表示需要丢弃输入数据，并清空滤波器组（filter banks），输出延迟的音频。</span></span><br><span class="line">        <span class="comment">//AACDEC_INTR（值为 4）：表示输入数据是不连续的（discontinuous），需要重新同步解码器内部状态。</span></span><br><span class="line">        aac_error = <span class="built_in">aacDecoder_DecodeFrame</span>(aac_coder, (INT_PCM*)pcm_frame,</span><br><span class="line">            pcm_framesize / <span class="built_in">sizeof</span>(INT_PCM), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (aac_error &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;decode frame error\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        audio_chunk = (Uint8*)pcm_frame;</span><br><span class="line">        audio_len = pcm_framesize;</span><br><span class="line">        audio_pos = audio_chunk;</span><br><span class="line">        <span class="keyword">while</span> (audio_len &gt; <span class="number">0</span>) <span class="comment">//等待时间让SDL线程完成FillAudio函数的任务</span></span><br><span class="line">            <span class="built_in">SDL_Delay</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;count=%d, aac_FrameLength=%d, pcm_FrameSize=%d \n&quot;</span>, count, adts_header.aacFrameLength, pcm_framesize);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(frame);</span><br><span class="line">    <span class="built_in">free</span>(pcm_frame);</span><br><span class="line">    <span class="built_in">fclose</span>(aac_file);</span><br><span class="line">    <span class="built_in">SDL_Quit</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sdl2_play_pcm.cpp, 播放pcm音频</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SDL_MAIN_HANDLED</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCM_FILE_NAME <span class="string">&quot;D:/ffmpeg/learn/test.pcm&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>( disable : 4996 )</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> Uint8* audio_chunk;</span><br><span class="line"><span class="type">static</span> Uint32 audio_len;</span><br><span class="line"><span class="type">static</span> Uint8* audio_pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fill_Audio</span><span class="params">(<span class="type">void</span>* data, Uint8* stream, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">SDL_memset</span>(stream, <span class="number">0</span>, len);</span><br><span class="line"><span class="keyword">if</span> (audio_len == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">len = len &gt; audio_len ? audio_len : len;</span><br><span class="line"><span class="built_in">SDL_MixAudio</span>(stream, audio_pos, len, SDL_MIX_MAXVOLUME);</span><br><span class="line">audio_pos += len;</span><br><span class="line">audio_len -= len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SDL_Init</span>(SDL_INIT_AUDIO | SDL_INIT_TIMER))</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;init SDL fail - &quot;</span> &lt;&lt; SDL_GetError &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SDL_AudioSpec SDL_spec;</span><br><span class="line">SDL_spec.freq = <span class="number">44100</span>;</span><br><span class="line">SDL_spec.format = AUDIO_S16SYS;</span><br><span class="line">SDL_spec.channels = <span class="number">2</span>;</span><br><span class="line">SDL_spec.silence = <span class="number">0</span>;</span><br><span class="line">SDL_spec.samples = <span class="number">1024</span>;</span><br><span class="line">SDL_spec.callback = Fill_Audio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SDL_OpenAudio</span>(&amp;SDL_spec, <span class="literal">nullptr</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;SDL open fail\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SDL_PauseAudio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">FILE* pcm_file = <span class="built_in">fopen</span>(PCM_FILE_NAME, <span class="string">&quot;rb+&quot;</span>); <span class="comment">//允许以二进制格式读取和写入文件</span></span><br><span class="line"><span class="keyword">if</span> (!pcm_file)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;open file fail\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pcm_buf_size = <span class="number">409600</span>; <span class="comment">//一次性从pcm文件中读取的数据大小</span></span><br><span class="line"><span class="type">char</span>* pcm_buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(pcm_buf_size);</span><br><span class="line"><span class="type">int</span> data_sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">count = <span class="built_in">fread</span>(pcm_buf, <span class="number">1</span>, pcm_buf_size, pcm_file);</span><br><span class="line"><span class="keyword">if</span> (count != pcm_buf_size) <span class="comment">//播放完后重新循环播放</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;read pcm end, count = &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">fseek</span>(pcm_file, <span class="number">0</span>, SEEK_SET); <span class="comment">//0 代表将文件指针重新放置开头位置</span></span><br><span class="line"><span class="built_in">fread</span>(pcm_buf, <span class="number">1</span>, pcm_buf_size, pcm_file);</span><br><span class="line">data_sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;now playing &quot;</span> &lt;&lt; data_sum &lt;&lt; <span class="string">&quot;bytes data\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">data_sum += pcm_buf_size;</span><br><span class="line">audio_chunk = (Uint8*)pcm_buf;</span><br><span class="line">audio_len = pcm_buf_size;</span><br><span class="line">audio_pos = audio_chunk;</span><br><span class="line"><span class="comment">/*假设音频的采样率位44100，即每秒钟采样44100次。</span></span><br><span class="line"><span class="comment">AAC一般将1024次采样编码成一帧，所以一秒就有44100 / 1024 = 43帧。</span></span><br><span class="line"><span class="comment">RTP包发送的每一帧数据的时间增量为44100 / 43 = 1025。</span></span><br><span class="line"><span class="comment">每一帧数据的时间间隔为1000 / 43 = 23ms。*/</span></span><br><span class="line"><span class="keyword">while</span> (audio_len &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">SDL_Delay</span>(<span class="number">23</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(pcm_buf);</span><br><span class="line"><span class="built_in">SDL_Quit</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-UDP的RTP传输音频aac的RTSP服务器，能拉流播放"><a href="#4-UDP的RTP传输音频aac的RTSP服务器，能拉流播放" class="headerlink" title="4. UDP的RTP传输音频aac的RTSP服务器，能拉流播放"></a>4. UDP的RTP传输音频aac的RTSP服务器，能拉流播放</h1><h2 id="4-1-aac码流格式"><a href="#4-1-aac码流格式" class="headerlink" title="4.1 aac码流格式"></a>4.1 aac码流格式</h2><ul><li><code>ADIF(Audio Data Interchage Format)</code>，音频数据交换格式：<br>只有一个统一的头，必须得到所有数据后解码，适用于本地文件。</li><li><code>ADTS(Audio Data Transport Stream)</code>，音视数据传输流：<br>每一帧都有头信息，任意帧解码，适用于传输流。</li></ul><p>AAC共有9种规格，以适应不同的场合的需要：</p><ul><li><p><code>MPEG-2 AAC LC</code> 低复杂度规格（Low Complexity） 注：比较简单，没有增益控制，但提高了编码效率，在中等码率的编码效率以及音质方面，都能找到平衡点</p></li><li><p><code>MPEG-2 AAC Main</code> 主规格</p></li><li><p><code>MPEG-2 AAC SSR</code> 可变采样率规格（Scaleable Sample Rate）</p></li><li><p><code>MPEG-4 AAC LC</code> 低复杂度规格（Low Complexity）—现在的手机比较常见的MP4文件中的音频部份就包括了该规格音频文件</p></li><li><p><code>MPEG-4 AAC Main</code> 主规格 注：包含了除增益控制之外的全部功能，其音质最好</p></li><li><p><code>MPEG-4 AAC SSR</code> 可变采样率规格（Scaleable Sample Rate）</p></li><li><p><code>MPEG-4 AAC LTP</code> 长时期预测规格（Long Term Predicition）</p></li><li><p><code>MPEG-4 AAC LD</code> 低延迟规格（Low Delay）</p></li><li><p><code>MPEG-4 AAC HE</code> 高效率规格（High Efficiency）—这种规格适合用于低码率编码，有Nero ACC 编码器支持</p></li></ul><table><thead><tr><th>序号</th><th>字段</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>synword</td><td>12bit</td><td>同步头，总是0xFFF，代表着1个ADTS帧的开始。</td></tr><tr><td>2</td><td>id</td><td>1bit</td><td>设置MPEG标识符，1bit，0标识MPEG-4，1标识MPEG-2。</td></tr><tr><td>3</td><td>layer</td><td>2bit</td><td>总是00。</td></tr><tr><td>4</td><td>protection_absent</td><td>1bit</td><td>误码校验，标识是否进行误码校验。0表示有CRC校验，1表示没有CRC校验。为0时头部7bytes后面+2bytesCRC检验位。</td></tr><tr><td>5</td><td>profile</td><td>2bit</td><td>AAC级别，0表示AAC Main, 1表示AAC LC, 2表示AAC SSR。<br>profile的值等于Audio Object Type的值减1。</td></tr><tr><td>6</td><td>sampling_frequency_index</td><td>4bit</td><td>采样率下标，下标对应的采样率如下：<br>0: 96000 Hz<br>1: 88200 Hz<br>2 : 64000 Hz<br>3 : 48000 Hz<br>4 : 44100 Hz<br>5 : 32000 Hz<br>6 : 24000 Hz<br>7 : 22050 Hz<br>8 : 16000 Hz<br>9 : 12000 Hz<br>10 : 11025 Hz<br>11 : 8000 Hz<br>12 : 7350 Hz<br>13 : Reserved<br>14 : Reserved<br>15 : frequency is written explictly</td></tr><tr><td>7</td><td>private_bit</td><td>1bit</td><td>私有位，编码时设置为0，解码时忽略。</td></tr><tr><td>8</td><td>channel_configuration</td><td>3bit</td><td>声道数。<br>0: Defined in AOT Specifc Config<br>1: 1 channel : front - center<br>2 : 2 channels : front - left, front - right<br>3 : 3 channels : front - center, front - left, front - right<br>4 : 4 channels : front - center, front - left, front - right, back - center<br>5 : 5 channels : front - center, front - left, front - right, back - left, back - right<br>6 : 6 channels : front - center, front - left, front - right, back - left, back - right, LFE - channel<br>7 : 8 channels : front - center, front - left, front - right, side - left, side - right, back - left, back - right, LFE - channel<br>8 - 15 : Reserved</td></tr><tr><td>9</td><td>orininal_copy</td><td>1bit</td><td>编码时设置为0，解码时忽略。</td></tr><tr><td>10</td><td>home</td><td>1bit</td><td>编码时设置为0，解码时忽略。</td></tr><tr><td>11</td><td>copyrigth_identification_bit</td><td>1bit</td><td>编码时设置为0，解码时忽略。</td></tr><tr><td>12</td><td>copyrigth_identification_stat</td><td>1bit</td><td>编码时设置为0，解码时忽略。</td></tr><tr><td>13</td><td>aac_frame_length</td><td>13bit</td><td>一个ADTS帧的长度，包括ADTS头和AAC原始流。</td></tr><tr><td>14</td><td>adts_bufferfullness</td><td>11bit</td><td>缓冲区充满度，0x7FF说明是码率可变的码流，不需要此字段。CBR可能需要此字段，不同编码器使用情况不同。具体查看附录。</td></tr><tr><td>15</td><td>number_of_raw_data_blocks_in_frame</td><td>2bit</td><td>表示ADTS帧中有number_of_raw_data_blocks_in_frame + 1个AAC原始帧，为0表示说ADTS帧中只有一个AAC数据.</td></tr><tr><td>16</td><td>CRC</td><td>16bit</td><td>CRC校验码</td></tr></tbody></table><table><thead><tr><th>序号</th><th>字段</th><th>长度</th><th>值</th></tr></thead><tbody><tr><td>1</td><td>synword</td><td>12bit</td><td>111111111111</td></tr><tr><td>2</td><td>id</td><td>1bit</td><td>0</td></tr><tr><td>3</td><td>layer</td><td>2bit</td><td>00</td></tr><tr><td>4</td><td>protection_absent</td><td>1bit</td><td>1</td></tr><tr><td>5</td><td>profile</td><td>2bit</td><td>01</td></tr><tr><td>6</td><td>sampling_frequency_index</td><td>4bit</td><td>0100（十进制4）</td></tr><tr><td>7</td><td>private_bit</td><td>1bit</td><td>0</td></tr><tr><td>8</td><td>channel_configuration</td><td>3bit</td><td>010 （十进制2）</td></tr><tr><td>9</td><td>orininal_copy</td><td>1bit</td><td>0</td></tr><tr><td>10</td><td>home</td><td>1bit</td><td>0</td></tr><tr><td>11</td><td>copyrigth_identification_bit</td><td>1bit</td><td>0</td></tr><tr><td>12</td><td>copyrigth_identification_stat</td><td>1bit</td><td>0</td></tr><tr><td>13</td><td>aac_frame_length</td><td>13bit</td><td>0000101111100（十进制380）</td></tr><tr><td>14</td><td>adts_bufferfullness</td><td>11bit</td><td>00010010000</td></tr><tr><td>15</td><td>number_of_raw_data_blocks_in_frame</td><td>2bit</td><td>00</td></tr></tbody></table><blockquote><p>aac的RTP打包方式</p></blockquote><p>  AAC的RTP打包方式并没有向H.264那样丰富，一种方式，主要AAC一帧数据大小都是几百个字节，不会向H.264那么少则几个字节，多则几千。<br>     AAC的RTP打包方式就是将ADTS帧取出ADTS头部，取出AAC数据，每帧数据封装成一个RTP包<br>     需要注意的是，并不是将AAC数据直接拷贝到RTP的载荷中<br>     。AAC封装成RTP包，在RTP载荷中的前四个字节是有特殊含义的，然后再是AAC数据，如下图所示。</p><p><img src="/img/rtsp22.png"></p><p> 其中RTP载荷的一个字节为0x00，第二个字节为0x10<br> 第三个字节和第四个字节保存AAC Data的大小，最多只能保存13bit<br> 第三个字节保存数据大小的高八位<br> 第四个字节的高5位保存数据大小的低5位.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rtpPacket-&gt;payload[<span class="number">0</span>] = <span class="number">0x00</span>;</span><br><span class="line">rtpPacket-&gt;payload[<span class="number">1</span>] = <span class="number">0x10</span>;</span><br><span class="line">rtpPacket-&gt;payload[<span class="number">2</span>] = (frameSize &amp; <span class="number">0x1FE0</span>) &gt;&gt; <span class="number">5</span>; <span class="comment">//高8位</span></span><br><span class="line">rtpPacket-&gt;payload[<span class="number">3</span>] = (frameSize &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">3</span>; <span class="comment">//低5位</span></span><br></pre></td></tr></table></figure><blockquote><p>RTP包时间戳的计算</p></blockquote><p>  假设音频的采样率位44100，即每秒钟采样44100次。<br>AAC一般将1024次采样编码成一帧，所以一秒就有44100&#x2F;1024&#x3D;43帧。<br>RTP包发送的每一帧数据的时间增量为44100&#x2F;43&#x3D;1025。<br>每一帧数据的时间间隔为1000&#x2F;43&#x3D;23ms。</p><blockquote><p>可能会用到的ffmpeg命令行</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ffmpeg命令行 从mp4视频文件提取aac 音频文件</span></span><br><span class="line">ffmpeg -i test.mp4  -vn -acodec aac test.aac</span><br><span class="line">备注：-i 表示输入文件 </span><br><span class="line">      -vm disable video / 丢掉视频</span><br><span class="line">      -acodec 设置音频编码格式</span><br><span class="line"></span><br><span class="line"><span class="comment">//ffmpeg 从aac音频文件解码为pcm音频文件</span></span><br><span class="line">ffmpeg -i test.aac -f s16le test.pcm</span><br><span class="line">备注：-i 表示输入文件 </span><br><span class="line">      -f 表示输出格式</span><br><span class="line"></span><br><span class="line"><span class="comment">//ffplay 播放.pcm音频文件</span></span><br><span class="line">ffplay -ar <span class="number">44100</span> -ac <span class="number">2</span> -f s16le -i test.pcm</span><br><span class="line">备注：-i 表示指定的输入文件</span><br><span class="line">      -f 表示强制使用的格式</span><br><span class="line">      -ar 表示播放的音频数据的采样率</span><br><span class="line">      -ac 表示播放的音频数据的通道数</span><br></pre></td></tr></table></figure><h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h2><blockquote><p>rtp.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_VESION              2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_H264   96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_AAC    97</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_HEADER_SIZE         12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_MAX_PKT_SIZE        1400</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpHeader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> csrcLen : <span class="number">4</span>;</span><br><span class="line">    <span class="type">uint8_t</span> extension : <span class="number">1</span>;</span><br><span class="line">    <span class="type">uint8_t</span> padding : <span class="number">1</span>;</span><br><span class="line">    <span class="type">uint8_t</span> version : <span class="number">2</span>;</span><br><span class="line">    <span class="type">uint8_t</span> payloadType : <span class="number">7</span>;</span><br><span class="line">    <span class="type">uint8_t</span> marker : <span class="number">1</span>; <span class="comment">//音频中标记会话的开始</span></span><br><span class="line">    <span class="type">uint16_t</span> seq;</span><br><span class="line">    <span class="type">uint32_t</span> timestamp;</span><br><span class="line">    <span class="type">uint32_t</span> ssrc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpPacket</span></span><br><span class="line">&#123;</span><br><span class="line">    RtpHeader rtpHeader;</span><br><span class="line">    <span class="type">uint8_t</span> payload[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rtpHeaderInit</span><span class="params">(RtpPacket* rtpPacket, <span class="type">uint8_t</span> csrcLen, <span class="type">uint8_t</span> extension,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint8_t</span> padding, <span class="type">uint8_t</span> version, <span class="type">uint8_t</span> payloadType, <span class="type">uint8_t</span> marker,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint16_t</span> seq, <span class="type">uint32_t</span> timestamp, <span class="type">uint32_t</span> ssrc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverTcp</span><span class="params">(<span class="type">int</span> clientSockfd, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverUdp</span><span class="params">(<span class="type">int</span> serverRtpSockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>rtp.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rtpHeaderInit</span><span class="params">(RtpPacket* rtpPacket, <span class="type">uint8_t</span> csrcLen, <span class="type">uint8_t</span> extension,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint8_t</span> padding, <span class="type">uint8_t</span> version, <span class="type">uint8_t</span> payloadType, <span class="type">uint8_t</span> marker,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint16_t</span> seq, <span class="type">uint32_t</span> timestamp, <span class="type">uint32_t</span> ssrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.csrcLen = csrcLen;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.extension = extension;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.padding = padding;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.version = version;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.payloadType = payloadType;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.marker = marker;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = seq;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = timestamp;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = ssrc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverTcp</span><span class="params">(<span class="type">int</span> clientSockfd, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">htons</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> rtpSize = RTP_HEADER_SIZE + dataSize;</span><br><span class="line">    <span class="type">char</span>* tempBuf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> + rtpSize);</span><br><span class="line">    tempBuf[<span class="number">0</span>] = <span class="number">0x24</span>;<span class="comment">//$</span></span><br><span class="line">    tempBuf[<span class="number">1</span>] = <span class="number">0x00</span>;</span><br><span class="line">    tempBuf[<span class="number">2</span>] = (<span class="type">uint8_t</span>)(((rtpSize) &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    tempBuf[<span class="number">3</span>] = (<span class="type">uint8_t</span>)((rtpSize) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(tempBuf + <span class="number">4</span>, (<span class="type">char</span>*)rtpPacket, rtpSize);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">send</span>(clientSockfd, tempBuf, <span class="number">4</span> + rtpSize, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">ntohs</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tempBuf);</span><br><span class="line">    tempBuf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverUdp</span><span class="params">(<span class="type">int</span> serverRtpSockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    sockaddr_in addr;</span><br><span class="line"></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">htons</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">sendto</span>(serverRtpSockfd, (<span class="type">char</span>*)rtpPacket, dataSize + RTP_HEADER_SIZE, <span class="number">0</span>,</span><br><span class="line">            (sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(addr));</span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">ntohs</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭SDL检查</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT     8554</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_RTP_PORT  55532</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_RTCP_PORT 55533</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_MAX_SIZE    (1024*1024)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AAC_FILE_NAME   <span class="string">&quot;D:/ffmpeg/learn/test.aac&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AdtsHeader</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> syncword;</span><br><span class="line">    <span class="type">uint8_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> layer;</span><br><span class="line">    <span class="type">uint8_t</span> protectionAbsent;</span><br><span class="line">    <span class="type">uint8_t</span> profile;</span><br><span class="line">    <span class="type">uint8_t</span> samplingFreqIndex;</span><br><span class="line">    <span class="type">uint8_t</span> privateBit;</span><br><span class="line">    <span class="type">uint8_t</span> channelCfg;</span><br><span class="line">    <span class="type">uint8_t</span> originalCopy;</span><br><span class="line">    <span class="type">uint8_t</span> home;</span><br><span class="line">    <span class="type">uint8_t</span> copyrightIdentificationBit;</span><br><span class="line">    <span class="type">uint8_t</span> copyrightIdentificationStart;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> aacFrameLength;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> adtsBufferFullness;</span><br><span class="line">    <span class="type">uint8_t</span> numberOfRawDataBlockInFrame;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">Parse_AdtsHeader</span><span class="params">(<span class="type">uint8_t</span>* in, AdtsHeader* res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> frame_number = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="built_in">sizeof</span>(*res));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((in[<span class="number">0</span>] == <span class="number">0xFF</span>) &amp;&amp; ((in[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) == <span class="number">0xF0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        res-&gt;id = ((<span class="type">uint8_t</span>)in[<span class="number">1</span>] &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        res-&gt;layer = ((<span class="type">uint8_t</span>)in[<span class="number">1</span>] &amp; <span class="number">0x06</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        res-&gt;protectionAbsent = (<span class="type">uint8_t</span>)in[<span class="number">1</span>] &amp; <span class="number">0x01</span>;</span><br><span class="line">        res-&gt;profile = ((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">        res-&gt;samplingFreqIndex = ((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        res-&gt;privateBit = ((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0x02</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        res-&gt;channelCfg = ((((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0x01</span>) &lt;&lt; <span class="number">2</span>) | (((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">3</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>));</span><br><span class="line">        res-&gt;originalCopy = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x20</span>) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        res-&gt;home = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x10</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        res-&gt;copyrightIdentificationBit = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        res-&gt;copyrightIdentificationStart = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x04</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        res-&gt;aacFrameLength = (((((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">3</span>]) &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">11</span>) |</span><br><span class="line">            (((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">3</span>) |</span><br><span class="line">            ((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">5</span>] &amp; <span class="number">0xE0</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        res-&gt;adtsBufferFullness = (((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">5</span>] &amp; <span class="number">0x1f</span>) &lt;&lt; <span class="number">6</span> |</span><br><span class="line">            ((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">6</span>] &amp; <span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        res-&gt;numberOfRawDataBlockInFrame = ((<span class="type">uint8_t</span>)in[<span class="number">6</span>] &amp; <span class="number">0x03</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;parse adts header fail\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">createTcpSocket</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> on = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sockfd &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(sockfd, SOL_SOCKET, SO_REUSEADDR, (<span class="type">const</span> <span class="type">char</span>*)&amp;on, <span class="built_in">sizeof</span>(on));</span><br><span class="line">    <span class="keyword">return</span> sockfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">createUdpSocket</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> on = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sockfd &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(sockfd, SOL_SOCKET, SO_REUSEADDR, (<span class="type">const</span> <span class="type">char</span>*)&amp;on, <span class="built_in">sizeof</span>(on));</span><br><span class="line">    <span class="keyword">return</span> sockfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">bindSocketAddr</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int</span> port)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sockaddr_in addr;</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(sockfd, (sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(sockaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">acceptClient</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">char</span>* ip, <span class="type">int</span>* port)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sockaddr_in addr;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(addr));</span><br><span class="line">    <span class="type">socklen_t</span> len = <span class="built_in">sizeof</span>(addr);</span><br><span class="line">    <span class="type">int</span> clientfd = <span class="built_in">accept</span>(sockfd, (sockaddr*)&amp;addr, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (clientfd &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(ip, <span class="built_in">inet_ntoa</span>(addr.sin_addr));</span><br><span class="line">    *port = <span class="built_in">ntohs</span>(addr.sin_port);</span><br><span class="line">    <span class="keyword">return</span> clientfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_OPTIONS</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Public: OPTIONS, DESCRIBE, SETUP, PLAY\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">        ,cseq);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_DESCRIBE</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq, <span class="type">char</span>* url)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> sdp[<span class="number">500</span>], localIp[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">sscanf</span>(url, <span class="string">&quot;rtsp://%[^:]:&quot;</span>, localIp);</span><br><span class="line">    <span class="built_in">sprintf</span>(sdp, <span class="string">&quot;v=0\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;o=- 9%ld 1 IN IP4 %s\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;t=0 0\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=control:*\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;m=audio 0 RTP/AVP 97\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=rtpmap:97 mpeg4-generic/44100/2\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=fmtp:97 profile-level-id=1;mode=AAC-hbr;sizelength=13;indexlength=3;indexdeltalength=3;config=1210;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=control:track0\r\n&quot;</span>,</span><br><span class="line">        <span class="built_in">time</span>(<span class="literal">NULL</span>), localIp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\nCSeq: %d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-Base: %s\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-type: application/sdp\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-length: %d\r\n\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;%s&quot;</span>,</span><br><span class="line">        cseq, url, <span class="built_in">strlen</span>(sdp), sdp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_SETUP</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq, <span class="type">int</span> clientRtpPort)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Transport: RTP/AVP;unicast;client_port=%d-%d;server_port=%d-%d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Session: 66334873\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">        cseq, clientRtpPort, clientRtpPort + <span class="number">1</span>, SERVER_RTP_PORT, SERVER_RTCP_PORT);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_PLAY</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Range: npt=0.000-\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Session: 66334873; timeout=10\r\n\r\n&quot;</span>,</span><br><span class="line">        cseq);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">Rtp_SendAACFrame</span><span class="params">(<span class="type">int</span> socket, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port,</span></span></span><br><span class="line"><span class="params"><span class="function">        RtpPacket* rtpPacket, <span class="type">uint8_t</span>* frame, <span class="type">uint32_t</span> frameSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">0</span>] = <span class="number">0x00</span>;</span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">1</span>] = <span class="number">0x10</span>;</span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">2</span>] = (frameSize &amp; <span class="number">0x1FE0</span>) &gt;&gt; <span class="number">5</span>; </span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">3</span>] = (frameSize &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(rtpPacket-&gt;payload + <span class="number">4</span>, frame, frameSize);</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">rtpSendPacketOverUdp</span>(socket, ip, port, rtpPacket, frameSize + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to send rtp packet\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq++;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果采样频率是44100</span></span><br><span class="line"><span class="comment">     * 一般AAC每个1024个采样为一帧</span></span><br><span class="line"><span class="comment">     * 所以一秒就有 44100 / 1024 = 43帧</span></span><br><span class="line"><span class="comment">     * 时间增量就是 44100 / 43 = 1025</span></span><br><span class="line"><span class="comment">     * 一帧的时间为 1 / 43 = 23ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp += <span class="number">1025</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static char* getLineFromBuf(char* buf, char* line) &#123;</span></span><br><span class="line"><span class="comment">//    while (*buf != &#x27;\n&#x27;)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        *line = *buf;</span></span><br><span class="line"><span class="comment">//        line++;</span></span><br><span class="line"><span class="comment">//        buf++;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    *line = &#x27;\n&#x27;;</span></span><br><span class="line"><span class="comment">//    ++line;</span></span><br><span class="line"><span class="comment">//    *line = &#x27;\0&#x27;;</span></span><br><span class="line"><span class="comment">//    ++buf;</span></span><br><span class="line"><span class="comment">//    return buf;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">doClient</span><span class="params">(<span class="type">int</span> clientSockfd, <span class="type">const</span> <span class="type">char</span>* clientIP, <span class="type">int</span> clientPort)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> method[<span class="number">40</span>], url[<span class="number">100</span>], version[<span class="number">40</span>];</span><br><span class="line">    <span class="type">int</span> serverRtpSockfd = <span class="number">-1</span>, serverRtcpSockfd = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> clientRtpPort, clientRtcpPort, CSeq;</span><br><span class="line">    <span class="type">char</span>* rBuf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(BUF_MAX_SIZE);</span><br><span class="line">    <span class="type">char</span>* sBuf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(BUF_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> recvLen = <span class="built_in">recv</span>(clientSockfd, rBuf, BUF_MAX_SIZE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (recvLen &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        rBuf[recvLen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s rBuf = %s \n&quot;</span>, __FUNCTION__, rBuf);</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* sep = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="type">char</span>* line = <span class="built_in">strtok</span>(rBuf, sep);</span><br><span class="line">        <span class="keyword">while</span> (line) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;OPTIONS&quot;</span>) || <span class="built_in">strstr</span>(line, <span class="string">&quot;DESCRIBE&quot;</span>) ||</span><br><span class="line">                <span class="built_in">strstr</span>(line, <span class="string">&quot;SETUP&quot;</span>) || <span class="built_in">strstr</span>(line, <span class="string">&quot;PLAY&quot;</span>)) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;%s %s %s\r\n&quot;</span>, method, url, version) != <span class="number">3</span>)</span><br><span class="line">                &#123;&#125;      <span class="comment">// error</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;CSeq&quot;</span>)) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;CSeq: %d\r\n&quot;</span>, &amp;CSeq) != <span class="number">1</span>) </span><br><span class="line">                &#123;&#125;      <span class="comment">// error</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(line, <span class="string">&quot;Transport:&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Transport:&quot;</span>))) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;Transport: RTP/AVP/UDP;unicast;client_port=%d-%d\r\n&quot;</span>,</span><br><span class="line">                    &amp;clientRtpPort, &amp;clientRtcpPort) != <span class="number">2</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;parse Transport error \n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            line = <span class="built_in">strtok</span>(<span class="literal">NULL</span>, sep);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;OPTIONS&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_OPTIONS</span>(sBuf, CSeq))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle options\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;DESCRIBE&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_DESCRIBE</span>(sBuf, CSeq, url))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle describe\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;SETUP&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_SETUP</span>(sBuf, CSeq, clientRtpPort))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle setup\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            serverRtpSockfd = <span class="built_in">createUdpSocket</span>();</span><br><span class="line">            serverRtcpSockfd = <span class="built_in">createUdpSocket</span>();</span><br><span class="line">            <span class="keyword">if</span> (serverRtpSockfd &lt; <span class="number">0</span> || serverRtcpSockfd &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to create udp socket\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">bindSocketAddr</span>(serverRtpSockfd, <span class="string">&quot;0.0.0.0&quot;</span>, SERVER_RTP_PORT) &lt; <span class="number">0</span> ||</span><br><span class="line">                <span class="built_in">bindSocketAddr</span>(serverRtcpSockfd, <span class="string">&quot;0.0.0.0&quot;</span>, SERVER_RTCP_PORT) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to bind addr\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_PLAY</span>(sBuf, CSeq))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle play\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;未定义的method = %s \n&quot;</span>, method);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s sBuf = %s \n&quot;</span>, __FUNCTION__, sBuf);</span><br><span class="line">        <span class="built_in">send</span>(clientSockfd, sBuf, <span class="built_in">strlen</span>(sBuf), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始播放，发送RTP包</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            AdtsHeader adtsHeader;</span><br><span class="line">            RtpPacket* rtpPacket;</span><br><span class="line">            <span class="type">uint8_t</span>* frame;</span><br><span class="line">            <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">            FILE* fp = <span class="built_in">fopen</span>(AAC_FILE_NAME, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!fp) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;读取 %s 失败\n&quot;</span>, AAC_FILE_NAME);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            frame = (<span class="type">uint8_t</span>*)<span class="built_in">malloc</span>(<span class="number">5000</span>);</span><br><span class="line">            rtpPacket = (RtpPacket*)<span class="built_in">malloc</span>(<span class="number">5000</span>);</span><br><span class="line">            <span class="built_in">rtpHeaderInit</span>(rtpPacket, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, RTP_VESION, RTP_PAYLOAD_TYPE_AAC, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x32411</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ret = <span class="built_in">fread</span>(frame, <span class="number">1</span>, <span class="number">7</span>, fp);</span><br><span class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;fread err\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;fread ret=%d \n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Parse_AdtsHeader</span>(frame, &amp;adtsHeader) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;parseAdtsHeader err\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ret = <span class="built_in">fread</span>(frame, <span class="number">1</span>, adtsHeader.aacFrameLength - <span class="number">7</span>, fp);</span><br><span class="line">                <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;fread err\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">Rtp_SendAACFrame</span>(serverRtpSockfd, clientIP, clientRtpPort,</span><br><span class="line">                    rtpPacket, frame, adtsHeader.aacFrameLength - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">Sleep</span>(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//usleep(23223);//1000/43.06 * 1000</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(frame);</span><br><span class="line">            <span class="built_in">free</span>(rtpPacket);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(method, <span class="number">0</span>, <span class="built_in">sizeof</span>(method));</span><br><span class="line">        <span class="built_in">memset</span>(url, <span class="number">0</span>, <span class="built_in">sizeof</span>(url));</span><br><span class="line">        CSeq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">closesocket</span>(clientSockfd);</span><br><span class="line">    <span class="keyword">if</span> (serverRtpSockfd)</span><br><span class="line">        <span class="built_in">closesocket</span>(serverRtpSockfd);</span><br><span class="line">    <span class="keyword">if</span> (serverRtcpSockfd &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">closesocket</span>(serverRtcpSockfd);</span><br><span class="line">    <span class="built_in">free</span>(rBuf);</span><br><span class="line">    <span class="built_in">free</span>(sBuf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PC Server Socket Start Up Error \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> rtspServerSockfd;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    rtspServerSockfd = <span class="built_in">createTcpSocket</span>();</span><br><span class="line">    <span class="keyword">if</span> (rtspServerSockfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to create tcp socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">bindSocketAddr</span>(rtspServerSockfd, <span class="string">&quot;0.0.0.0&quot;</span>, SERVER_PORT);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to bind addr\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>(rtspServerSockfd, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to listen\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s rtsp://127.0.0.1:%d\n&quot;</span>, __FILE__, SERVER_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> clientSockfd, clientPort;</span><br><span class="line">        <span class="type">char</span> clientIp[<span class="number">40</span>];</span><br><span class="line">        clientSockfd = <span class="built_in">acceptClient</span>(rtspServerSockfd, clientIp, &amp;clientPort);</span><br><span class="line">        <span class="keyword">if</span> (clientSockfd &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;failed to accept client\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;accept client;client ip:%s,client port:%d\n&quot;</span>, clientIp, clientPort);</span><br><span class="line">        <span class="built_in">doClient</span>(clientSockfd, clientIp, clientPort);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(rtspServerSockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-TCP的RTP同时传输h264和aac的RTSP服务器，能拉流播放"><a href="#5-TCP的RTP同时传输h264和aac的RTSP服务器，能拉流播放" class="headerlink" title="5. TCP的RTP同时传输h264和aac的RTSP服务器，能拉流播放"></a>5. TCP的RTP同时传输h264和aac的RTSP服务器，能拉流播放</h1><blockquote><p>相对于之前实现的功能，<code>变化</code>如下<br>1，客户端请求RTSP的Describe请求时，RTSP服务器返回的SDP协议，需要同时包含音频流和视频流的信息。<br>2，客户端请求RTSP的Setup请求时，RTSP服务器不需要再对应创建RTP和RTCP的UDP连接通道，因为TCP版的RTP传输，客户端与服务器交互时，无论是RTSP信令还是RTP数据包或者是RTCP数据包，都是使用同一个tcp连接通道。只不过这个tcp连接通道在发送rtp数据包或者rtcp数据包时，需要加一些分隔字节。<br>3，客户端请求RTSP的Play请求时，RTSP服务器在对Play请求回复以后，还需要源源不断的同时向客户端发送音频流和视频流的RTP数据包。<br>4，有几点注意，在这个案例项目中，使用的h264视频文件，对应的fps需要是25。另外由于Nalu的数量并不等于视频帧数量的原因，该案例的音视频并不能同步。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i -rtsp_transport tcp rtsp://127.0.0.1:8554</span><br></pre></td></tr></table></figure><h2 id="5-1-ffmpeg命令行"><a href="#5-1-ffmpeg命令行" class="headerlink" title="5.1 ffmpeg命令行"></a>5.1 ffmpeg命令行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//ffmpeg命令行 从mp4视频文件提取h264 码流文件</span><br><span class="line">ffmpeg -i test.mp4 -an -vcodec copy -f h264 test.h264</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//ffmpeg命令行 从mp4视频文件提取aac 音频文件</span><br><span class="line">ffmpeg -i test.mp4  -vn -acodec aac test.aac</span><br><span class="line"></span><br><span class="line">备注：-i 表示输入文件 </span><br><span class="line">      -vm <span class="built_in">disable</span> video / 丢掉视频</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h2><blockquote><p>rtp.h</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_VESION              2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_H264   96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_PAYLOAD_TYPE_AAC    97</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_HEADER_SIZE         12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTP_MAX_PKT_SIZE        1400</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpHeader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> csrcLen : <span class="number">4</span>;</span><br><span class="line">    <span class="type">uint8_t</span> extension : <span class="number">1</span>;</span><br><span class="line">    <span class="type">uint8_t</span> padding : <span class="number">1</span>;</span><br><span class="line">    <span class="type">uint8_t</span> version : <span class="number">2</span>;</span><br><span class="line">    <span class="type">uint8_t</span> payloadType : <span class="number">7</span>;</span><br><span class="line">    <span class="type">uint8_t</span> marker : <span class="number">1</span>; <span class="comment">//音频中标记会话的开始</span></span><br><span class="line">    <span class="type">uint16_t</span> seq;</span><br><span class="line">    <span class="type">uint32_t</span> timestamp;</span><br><span class="line">    <span class="type">uint32_t</span> ssrc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RtpPacket</span></span><br><span class="line">&#123;</span><br><span class="line">    RtpHeader rtpHeader;</span><br><span class="line">    <span class="type">uint8_t</span> payload[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rtpHeaderInit</span><span class="params">(RtpPacket* rtpPacket, <span class="type">uint8_t</span> csrcLen, <span class="type">uint8_t</span> extension,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint8_t</span> padding, <span class="type">uint8_t</span> version, <span class="type">uint8_t</span> payloadType, <span class="type">uint8_t</span> marker,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint16_t</span> seq, <span class="type">uint32_t</span> timestamp, <span class="type">uint32_t</span> ssrc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverTcp</span><span class="params">(<span class="type">int</span> clientSockfd, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize, <span class="type">char</span> channel)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverUdp</span><span class="params">(<span class="type">int</span> serverRtpSockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>rtp.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rtpHeaderInit</span><span class="params">(RtpPacket* rtpPacket, <span class="type">uint8_t</span> csrcLen, <span class="type">uint8_t</span> extension,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint8_t</span> padding, <span class="type">uint8_t</span> version, <span class="type">uint8_t</span> payloadType, <span class="type">uint8_t</span> marker,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">uint16_t</span> seq, <span class="type">uint32_t</span> timestamp, <span class="type">uint32_t</span> ssrc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.csrcLen = csrcLen;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.extension = extension;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.padding = padding;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.version = version;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.payloadType = payloadType;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.marker = marker;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = seq;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = timestamp;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = ssrc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverTcp</span><span class="params">(<span class="type">int</span> clientSockfd, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize, <span class="type">char</span> channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">htons</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> rtpSize = RTP_HEADER_SIZE + dataSize;</span><br><span class="line">    <span class="type">char</span>* tempBuf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> + rtpSize);</span><br><span class="line">    tempBuf[<span class="number">0</span>] = <span class="number">0x24</span>;<span class="comment">//$</span></span><br><span class="line">    tempBuf[<span class="number">1</span>] = channel; <span class="comment">//0x00</span></span><br><span class="line">    tempBuf[<span class="number">2</span>] = (<span class="type">uint8_t</span>)(((rtpSize) &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    tempBuf[<span class="number">3</span>] = (<span class="type">uint8_t</span>)((rtpSize) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(tempBuf + <span class="number">4</span>, (<span class="type">char</span>*)rtpPacket, rtpSize);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">send</span>(clientSockfd, tempBuf, <span class="number">4</span> + rtpSize, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">ntohs</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tempBuf);</span><br><span class="line">    tempBuf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rtpSendPacketOverUdp</span><span class="params">(<span class="type">int</span> serverRtpSockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int16_t</span> port, RtpPacket* rtpPacket, <span class="type">uint32_t</span> dataSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    sockaddr_in addr;</span><br><span class="line"></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"></span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">htons</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">htonl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">sendto</span>(serverRtpSockfd, (<span class="type">char</span>*)rtpPacket, dataSize + RTP_HEADER_SIZE, <span class="number">0</span>,</span><br><span class="line">        (sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(addr));</span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq = <span class="built_in">ntohs</span>(rtpPacket-&gt;rtpHeader.seq);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.timestamp);</span><br><span class="line">    rtpPacket-&gt;rtpHeader.ssrc = <span class="built_in">ntohl</span>(rtpPacket-&gt;rtpHeader.ssrc);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>main.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AAC_FILE_NAME   <span class="string">&quot;D:/ffmpeg/learn/test.aac&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H264_FILE_NAME   <span class="string">&quot;D:/ffmpeg/learn/test.h264&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT      8554</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_MAX_SIZE     (1024*1024)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">createTcpSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> on = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sockfd &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(sockfd, SOL_SOCKET, SO_REUSEADDR, (<span class="type">const</span> <span class="type">char</span>*)&amp;on, <span class="built_in">sizeof</span>(on));</span><br><span class="line">    <span class="keyword">return</span> sockfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">bindSocketAddr</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">char</span>* ip, <span class="type">int</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sockaddr_in addr;</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">    addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(sockfd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="built_in">sizeof</span>(sockaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">acceptClient</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">char</span>* ip, <span class="type">int</span>* port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sockaddr_in addr;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="built_in">sizeof</span>(addr));</span><br><span class="line">    <span class="type">socklen_t</span> len = <span class="built_in">sizeof</span>(addr);</span><br><span class="line">    <span class="type">int</span> clientfd = <span class="built_in">accept</span>(sockfd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, &amp;len);</span><br><span class="line">    <span class="keyword">if</span> (clientfd &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(ip, <span class="built_in">inet_ntoa</span>(addr.sin_addr));</span><br><span class="line">    *port = <span class="built_in">ntohs</span>(addr.sin_port);</span><br><span class="line">    <span class="keyword">return</span> clientfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title">startCode3</span><span class="params">(<span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title">startCode4</span><span class="params">(<span class="type">char</span>* buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="number">0</span> &amp;&amp; buf[<span class="number">3</span>] == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">char</span>* <span class="title">findNextStartCode</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">startCode3</span>(buf) || <span class="built_in">startCode4</span>(buf))</span><br><span class="line">            <span class="keyword">return</span> buf;</span><br><span class="line">        ++buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*if (startCode3(buf))</span></span><br><span class="line"><span class="comment">        return buf;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">getFrameFromH264File</span><span class="params">(FILE* fp, <span class="type">char</span>* frame, <span class="type">int</span> size)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> frameSize = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> rSize = <span class="built_in">fread</span>(frame, <span class="number">1</span>, size, fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">startCode3</span>(frame) &amp;&amp; !<span class="built_in">startCode4</span>(frame))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* nextStartCode = <span class="built_in">findNextStartCode</span>(frame + <span class="number">3</span>, rSize - <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (!nextStartCode)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        frameSize = (nextStartCode - frame);</span><br><span class="line">        <span class="built_in">fseek</span>(fp, frameSize - rSize, SEEK_CUR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> frameSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AdtsHeader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> syncword;</span><br><span class="line">    <span class="type">uint8_t</span> id;</span><br><span class="line">    <span class="type">uint8_t</span> layer;</span><br><span class="line">    <span class="type">uint8_t</span> protectionAbsent;</span><br><span class="line">    <span class="type">uint8_t</span> profile;</span><br><span class="line">    <span class="type">uint8_t</span> samplingFreqIndex;</span><br><span class="line">    <span class="type">uint8_t</span> privateBit;</span><br><span class="line">    <span class="type">uint8_t</span> channelCfg;</span><br><span class="line">    <span class="type">uint8_t</span> originalCopy;</span><br><span class="line">    <span class="type">uint8_t</span> home;</span><br><span class="line">    <span class="type">uint8_t</span> copyrightIdentificationBit;</span><br><span class="line">    <span class="type">uint8_t</span> copyrightIdentificationStart;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> aacFrameLength;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> adtsBufferFullness;</span><br><span class="line">    <span class="type">uint8_t</span> numberOfRawDataBlockInFrame;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">Parse_AdtsHeader</span><span class="params">(<span class="type">uint8_t</span>* in, AdtsHeader* res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> frame_number = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="built_in">sizeof</span>(*res));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((in[<span class="number">0</span>] == <span class="number">0xFF</span>) &amp;&amp; ((in[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) == <span class="number">0xF0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        res-&gt;id = ((<span class="type">uint8_t</span>)in[<span class="number">1</span>] &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        res-&gt;layer = ((<span class="type">uint8_t</span>)in[<span class="number">1</span>] &amp; <span class="number">0x06</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        res-&gt;protectionAbsent = (<span class="type">uint8_t</span>)in[<span class="number">1</span>] &amp; <span class="number">0x01</span>;</span><br><span class="line">        res-&gt;profile = ((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">        res-&gt;samplingFreqIndex = ((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        res-&gt;privateBit = ((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0x02</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        res-&gt;channelCfg = ((((<span class="type">uint8_t</span>)in[<span class="number">2</span>] &amp; <span class="number">0x01</span>) &lt;&lt; <span class="number">2</span>) | (((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">3</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>));</span><br><span class="line">        res-&gt;originalCopy = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x20</span>) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        res-&gt;home = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x10</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        res-&gt;copyrightIdentificationBit = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x08</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        res-&gt;copyrightIdentificationStart = ((<span class="type">uint8_t</span>)in[<span class="number">3</span>] &amp; <span class="number">0x04</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        res-&gt;aacFrameLength = (((((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">3</span>]) &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">11</span>) |</span><br><span class="line">            (((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">4</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">3</span>) |</span><br><span class="line">            ((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">5</span>] &amp; <span class="number">0xE0</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        res-&gt;adtsBufferFullness = (((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">5</span>] &amp; <span class="number">0x1f</span>) &lt;&lt; <span class="number">6</span> |</span><br><span class="line">            ((<span class="type">unsigned</span> <span class="type">int</span>)in[<span class="number">6</span>] &amp; <span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        res-&gt;numberOfRawDataBlockInFrame = ((<span class="type">uint8_t</span>)in[<span class="number">6</span>] &amp; <span class="number">0x03</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;parse adts header fail\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">rtpSendAACFrame</span><span class="params">(<span class="type">int</span> clientSockfd, RtpPacket* rtpPacket, <span class="type">uint8_t</span>* frame, <span class="type">uint32_t</span> frameSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">0</span>] = <span class="number">0x00</span>;</span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">1</span>] = <span class="number">0x10</span>;</span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">2</span>] = (frameSize &amp; <span class="number">0x1FE0</span>) &gt;&gt; <span class="number">5</span>; </span><br><span class="line">    rtpPacket-&gt;payload[<span class="number">3</span>] = (frameSize &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(rtpPacket-&gt;payload + <span class="number">4</span>, frame, frameSize);</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">rtpSendPacketOverTcp</span>(clientSockfd, rtpPacket, frameSize + <span class="number">4</span>, <span class="number">0x02</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to send rtp packet\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.seq++;</span><br><span class="line">    rtpPacket-&gt;rtpHeader.timestamp += <span class="number">1025</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">rtpSendH264Frame</span><span class="params">(<span class="type">int</span> clientSockfd, RtpPacket* rtpPacket, <span class="type">char</span>* frame, <span class="type">uint32_t</span> frameSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sendByte = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">uint8_t</span> naluType = frame[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s frameSize=%d \n&quot;</span>, __FUNCTION__, frameSize);</span><br><span class="line">    <span class="keyword">if</span> (frameSize &lt;= RTP_MAX_PKT_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(rtpPacket-&gt;payload, frame, frameSize);</span><br><span class="line">        ret = <span class="built_in">rtpSendPacketOverTcp</span>(clientSockfd, rtpPacket, frameSize, <span class="number">0x00</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        rtpPacket-&gt;rtpHeader.seq++;</span><br><span class="line">        sendByte += ret;</span><br><span class="line">        <span class="keyword">if</span> ((naluType &amp; <span class="number">0x1F</span>) == <span class="number">7</span> || (naluType &amp; <span class="number">0x1F</span>) == <span class="number">8</span>) </span><br><span class="line">            <span class="keyword">return</span> sendByte;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pktNum = frameSize / RTP_MAX_PKT_SIZE;</span><br><span class="line">        <span class="type">int</span> remainPktSize = frameSize % RTP_MAX_PKT_SIZE;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pktNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            rtpPacket-&gt;payload[<span class="number">0</span>] = (naluType &amp; <span class="number">0x60</span>) | <span class="number">28</span>;</span><br><span class="line">            rtpPacket-&gt;payload[<span class="number">1</span>] = naluType &amp; <span class="number">0x1F</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                rtpPacket-&gt;payload[<span class="number">1</span>] |= <span class="number">0x80</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (remainPktSize == <span class="number">0</span> &amp;&amp; i == pktNum - <span class="number">1</span>) </span><br><span class="line">                rtpPacket-&gt;payload[<span class="number">1</span>] |= <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>(rtpPacket-&gt;payload + <span class="number">2</span>, frame + pos, RTP_MAX_PKT_SIZE);</span><br><span class="line">            ret = <span class="built_in">rtpSendPacketOverTcp</span>(clientSockfd, rtpPacket, RTP_MAX_PKT_SIZE + <span class="number">2</span>, <span class="number">0x00</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">            rtpPacket-&gt;rtpHeader.seq++;</span><br><span class="line">            sendByte += ret;</span><br><span class="line">            pos += RTP_MAX_PKT_SIZE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (remainPktSize &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rtpPacket-&gt;payload[<span class="number">0</span>] = (naluType &amp; <span class="number">0x60</span>) | <span class="number">28</span>;</span><br><span class="line">            rtpPacket-&gt;payload[<span class="number">1</span>] = naluType &amp; <span class="number">0x1F</span>;</span><br><span class="line">            rtpPacket-&gt;payload[<span class="number">1</span>] |= <span class="number">0x40</span>; <span class="comment">//end</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">memcpy</span>(rtpPacket-&gt;payload + <span class="number">2</span>, frame + pos, remainPktSize + <span class="number">2</span>);</span><br><span class="line">            ret = <span class="built_in">rtpSendPacketOverTcp</span>(clientSockfd, rtpPacket, remainPktSize + <span class="number">2</span>, <span class="number">0x00</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">            rtpPacket-&gt;rtpHeader.seq++;</span><br><span class="line">            sendByte += ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sendByte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_OPTIONS</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Public: OPTIONS, DESCRIBE, SETUP, PLAY\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">        cseq);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_DESCRIBE</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq, <span class="type">char</span>* url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> sdp[<span class="number">500</span>];</span><br><span class="line">    <span class="type">char</span> localIp[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sscanf</span>(url, <span class="string">&quot;rtsp://%[^:]:&quot;</span>, localIp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(sdp, <span class="string">&quot;v=0\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;o=- 9%ld 1 IN IP4 %s\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;t=0 0\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=control:*\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;m=video 0 RTP/AVP/TCP 96\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=rtpmap:96 H264/90000\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=control:track0\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;m=audio 1 RTP/AVP/TCP 97\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=rtpmap:97 mpeg4-generic/44100/2\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=fmtp:97 profile-level-id=1;mode=AAC-hbr;sizelength=13;indexlength=3;indexdeltalength=3;config=1210;\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;a=control:track1\r\n&quot;</span>,</span><br><span class="line">        <span class="built_in">time</span>(<span class="literal">NULL</span>), localIp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\nCSeq: %d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-Base: %s\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-type: application/sdp\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Content-length: %zu\r\n\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;%s&quot;</span>,</span><br><span class="line">        cseq, url, <span class="built_in">strlen</span>(sdp), sdp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_SETUP</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cseq == <span class="number">3</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Transport: RTP/AVP/TCP;unicast;interleaved=0-1\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Session: 66334873\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">            cseq);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cseq == <span class="number">4</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Transport: RTP/AVP/TCP;unicast;interleaved=2-3\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;Session: 66334873\r\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\r\n&quot;</span>,</span><br><span class="line">            cseq);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">handleCmd_PLAY</span><span class="params">(<span class="type">char</span>* result, <span class="type">int</span> cseq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">&quot;RTSP/1.0 200 OK\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;CSeq: %d\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Range: npt=0.000-\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Session: 66334873; timeout=10\r\n\r\n&quot;</span>,</span><br><span class="line">        cseq);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">doClient</span><span class="params">(<span class="type">int</span> clientSockfd, <span class="type">const</span> <span class="type">char</span>* clientIP, <span class="type">int</span> clientPort)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> method[<span class="number">40</span>], url[<span class="number">100</span>], version[<span class="number">40</span>];</span><br><span class="line">    <span class="type">int</span> CSeq;</span><br><span class="line">    <span class="type">char</span>* rBuf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(BUF_MAX_SIZE);</span><br><span class="line">    <span class="type">char</span>* sBuf = (<span class="type">char</span>*)<span class="built_in">malloc</span>(BUF_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> recvLen = <span class="built_in">recv</span>(clientSockfd, rBuf, BUF_MAX_SIZE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (recvLen &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        rBuf[recvLen] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;接收请求 rBuf = %s \n&quot;</span>, rBuf);</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* sep = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="type">char</span>* line = <span class="built_in">strtok</span>(rBuf, sep);</span><br><span class="line">        <span class="keyword">while</span> (line) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;OPTIONS&quot;</span>) ||</span><br><span class="line">                <span class="built_in">strstr</span>(line, <span class="string">&quot;DESCRIBE&quot;</span>) ||</span><br><span class="line">                <span class="built_in">strstr</span>(line, <span class="string">&quot;SETUP&quot;</span>) ||</span><br><span class="line">                <span class="built_in">strstr</span>(line, <span class="string">&quot;PLAY&quot;</span>)) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;%s %s %s\r\n&quot;</span>, method, url, version) != <span class="number">3</span>)</span><br><span class="line">                &#123;&#125;      <span class="comment">// error </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, <span class="string">&quot;CSeq&quot;</span>)) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;CSeq: %d\r\n&quot;</span>, &amp;CSeq) != <span class="number">1</span>)</span><br><span class="line">                &#123;&#125;      <span class="comment">// error</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(line, <span class="string">&quot;Transport:&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Transport:&quot;</span>))) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">&quot;Transport: RTP/AVP/TCP;unicast;interleaved=0-1\r\n&quot;</span>) != <span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;parse Transport error \n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            line = <span class="built_in">strtok</span>(<span class="literal">NULL</span>, sep);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;OPTIONS&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_OPTIONS</span>(sBuf, CSeq))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle options\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;DESCRIBE&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_DESCRIBE</span>(sBuf, CSeq, url))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle describe\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;SETUP&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_SETUP</span>(sBuf, CSeq))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle setup\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">handleCmd_PLAY</span>(sBuf, CSeq))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;failed to handle play\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;未定义的method = %s \n&quot;</span>, method);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;响应 sBuf = %s \n&quot;</span>, sBuf);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">send</span>(clientSockfd, sBuf, <span class="built_in">strlen</span>(sBuf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(method, <span class="string">&quot;PLAY&quot;</span>)) </span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function">std::thread <span class="title">t1</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">int</span> frameSize, startCode;</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">char</span>* frame = (<span class="type">char</span>*)malloc(<span class="number">500000</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                RtpPacket* rtpPacket = (RtpPacket*)malloc(<span class="number">500000</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                FILE* fp = fopen(H264_FILE_NAME, <span class="string">&quot;rb&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">if</span> (!fp) </span></span></span><br><span class="line"><span class="params"><span class="function">                &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                    printf(<span class="string">&quot;读取 %s 失败\n&quot;</span>, H264_FILE_NAME);</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">                rtpHeaderInit(rtpPacket, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, RTP_VESION, RTP_PAYLOAD_TYPE_H264, </span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x88923423</span>);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">                printf(<span class="string">&quot;start play\n&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">while</span> (<span class="literal">true</span>) </span></span></span><br><span class="line"><span class="params"><span class="function">                &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                    frameSize = getFrameFromH264File(fp, frame, <span class="number">500000</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">if</span> (frameSize &lt; <span class="number">0</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                        printf(<span class="string">&quot;读取%s结束,frameSize=%d \n&quot;</span>, H264_FILE_NAME, frameSize);</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">if</span> (startCode3(frame))</span></span></span><br><span class="line"><span class="params"><span class="function">                        startCode = <span class="number">3</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">else</span></span></span></span><br><span class="line"><span class="params"><span class="function">                        startCode = <span class="number">4</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    frameSize -= startCode;</span></span></span><br><span class="line"><span class="params"><span class="function">                    rtpSendH264Frame(clientSockfd, rtpPacket, frame + startCode, frameSize);</span></span></span><br><span class="line"><span class="params"><span class="function">                    rtpPacket-&gt;rtpHeader.timestamp += <span class="number">90000</span> / <span class="number">25</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="comment">//Sleep(40);//-&gt;30,20,</span></span></span></span><br><span class="line"><span class="params"><span class="function">                    Sleep(<span class="number">20</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="comment">//usleep(40000);//1000/25 * 1000</span></span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">                free(frame);</span></span></span><br><span class="line"><span class="params"><span class="function">                free(rtpPacket);</span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="function">std::thread <span class="title">t2</span><span class="params">([&amp;]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                AdtsHeader adtsHeader;          </span></span></span><br><span class="line"><span class="params"><span class="function">                FILE* fp = fopen(AAC_FILE_NAME, <span class="string">&quot;rb&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">if</span> (!fp) </span></span></span><br><span class="line"><span class="params"><span class="function">                &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                    printf(<span class="string">&quot;读取 %s 失败\n&quot;</span>, AAC_FILE_NAME);</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">uint8_t</span>* frame = (<span class="type">uint8_t</span>*)malloc(<span class="number">5000</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                RtpPacket* rtpPacket = (RtpPacket*)malloc(<span class="number">5000</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                rtpHeaderInit(rtpPacket, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, RTP_VESION, RTP_PAYLOAD_TYPE_AAC, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x32411</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="type">int</span> ret;</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">while</span> (<span class="literal">true</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">                &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                    ret = fread(frame, <span class="number">1</span>, <span class="number">7</span>, fp);</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                        printf(<span class="string">&quot;fread err\n&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">                    printf(<span class="string">&quot;fread ret=%d \n&quot;</span>, ret);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">if</span> (Parse_AdtsHeader(frame, &amp;adtsHeader) &lt; <span class="number">0</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                        printf(<span class="string">&quot;parseAdtsHeader err\n&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">                    ret = fread(frame, <span class="number">1</span>, adtsHeader.aacFrameLength - <span class="number">7</span>, fp);</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                        printf(<span class="string">&quot;fread err\n&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">                    rtpSendAACFrame(clientSockfd,</span></span></span><br><span class="line"><span class="params"><span class="function">                        rtpPacket, frame, adtsHeader.aacFrameLength - <span class="number">7</span>);</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">                    Sleep(<span class="number">23</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="comment">//usleep(23223);//1000/43.06 * 1000</span></span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">                free(frame);</span></span></span><br><span class="line"><span class="params"><span class="function">                free(rtpPacket);</span></span></span><br><span class="line"><span class="params"><span class="function">                &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">            t1.<span class="built_in">join</span>();</span><br><span class="line">            t2.<span class="built_in">join</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(method, <span class="number">0</span>, <span class="built_in">sizeof</span>(method));</span><br><span class="line">        <span class="built_in">memset</span>(url, <span class="number">0</span>, <span class="built_in">sizeof</span>(url));</span><br><span class="line">        CSeq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(clientSockfd);</span><br><span class="line">    <span class="built_in">free</span>(rBuf);</span><br><span class="line">    <span class="built_in">free</span>(sBuf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PC Server Socket Start Up Error \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> serverSockfd;</span><br><span class="line">    serverSockfd = <span class="built_in">createTcpSocket</span>();</span><br><span class="line">    <span class="keyword">if</span> (serverSockfd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">WSACleanup</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to create tcp socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bindSocketAddr</span>(serverSockfd, <span class="string">&quot;0.0.0.0&quot;</span>, SERVER_PORT) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to bind addr\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serverSockfd, <span class="number">10</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to listen\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s rtsp://127.0.0.1:%d\n&quot;</span>, __FILE__, SERVER_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> clientSockfd;</span><br><span class="line">        <span class="type">char</span> clientIp[<span class="number">40</span>];</span><br><span class="line">        <span class="type">int</span> clientPort;</span><br><span class="line">        clientSockfd = <span class="built_in">acceptClient</span>(serverSockfd, clientIp, &amp;clientPort);</span><br><span class="line">        <span class="keyword">if</span> (clientSockfd &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;failed to accept client\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;accept client;client ip:%s,client port:%d\n&quot;</span>, clientIp, clientPort);</span><br><span class="line">        <span class="built_in">doClient</span>(clientSockfd, clientIp, clientPort);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(serverSockfd);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-分析抓包理解源码"><a href="#5-3-分析抓包理解源码" class="headerlink" title="5.3 分析抓包理解源码"></a>5.3 分析抓包理解源码</h2><blockquote><p>两个<code>m</code><br><img src="/img/rtsp23.png"></p></blockquote><blockquote><p>第一路流的rtp和rtcp的通道序号<br><img src="/img/rtsp24.png"></p></blockquote><blockquote><p>返回的同理,第一路流的0通道和1通道在这里插入图片描述<br><img src="/img/rtsp25.png"></p></blockquote><blockquote><p>同理第二路流用2,3通道,replay同理<br><img src="/img/rtsp26.png"></p></blockquote><blockquote><p>97代表的是aac, 96代表的是h264<br><img src="/img/rtsp27.png"></p></blockquote><blockquote><p>$符号(间隔符),通道00,第一路流的第一个通道,长度<br><img src="/img/rtsp28.png"></p></blockquote><blockquote><p>$符号,02,第二路流的第一个通道,长度<br><img src="/img/rtsp29.png"></p></blockquote><hr><h1 id="6-RTSPServer"><a href="#6-RTSPServer" class="headerlink" title="6. RTSPServer"></a>6. RTSPServer</h1><p><a href="https://github.com/9TSe/RTSPServer">GitHub源码</a></p><p>整体逻辑如下图</p><p><img src="/img/rtsp30.png"></p><p><strong>Linux配置环境</strong></p><ol><li>配置SDL环境</li></ol><p><a href="https://sourceforge.net/projects/libsdl/files/SDL/1.2.15/SDL-1.2.15.tar.gz/download">一键下寨!</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf SDL-1.2.15.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> SDL-1.2.15/</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ol start="2"><li>安装ffmpeg库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure><ol start="3"><li>整理文件</li></ol><p>先切换到RTSP_Server目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> src</span><br><span class="line"><span class="built_in">mv</span> *.cpp src</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> include</span><br><span class="line"><span class="built_in">mv</span> *.h include</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br></pre></td></tr></table></figure><p>准备好 .aac 和 .h264 文件放置RTSP_Server目录中</p><ol start="4"><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">./app</span><br></pre></td></tr></table></figure><p>另起一个终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#over tcp</span></span><br><span class="line">ffplay -i -rtsp_transport tcp  rtsp://127.0.0.1:8554/test</span><br><span class="line"></span><br><span class="line"><span class="comment">#over udp</span></span><br><span class="line">ffplay -i rtsp://127.0.0.1:8554/test</span><br></pre></td></tr></table></figure><hr><h1 id="7-RTCP"><a href="#7-RTCP" class="headerlink" title="7. RTCP"></a>7. RTCP</h1><blockquote><p>实时传输控制协议(Real-time ControlProtocol，RTCP)是和 RTP一起工作的控制协议。<br>在RTP会话期间，Udp传输时通过使用不同的端口号可把RTP数据包和RTCP信息包区分开来<br>Tcp使用相同的端口号, 每个会话参与者周期性地向所有其他参与者发送RTCP控制信息包。</p></blockquote><p><strong>功能</strong>:<br>在RTP会话期间，每个会话参与者周期性地向所有其他参与者发送RTCP控制信息包。<br>每个RTCP信息包<code>不是</code>封装声音或者视频数据，而是封装发送端或接收端的统计报表。<br>这些信息包括发送的信息包数目、丢失的信息包数目和信息包的抖动等情况<br>信息包具体的有: 假设是直播推流的场景,<br>截至目前已经发送了多少的RTP数据包, RTP对应的字节流的长度的数据, RTP最新的时间戳, NTP(精准时间戳,ms级)等</p><h2 id="1-1-RTCP包类型"><a href="#1-1-RTCP包类型" class="headerlink" title="1.1 RTCP包类型"></a>1.1 RTCP包类型</h2><p>根据所携带的控制信息不同，RTCP信息包可分为<br>RR（接收者报告包）、SR（源报告包）、SEDS（源描述包）、BYE（离开申明）和APP（特殊应用包）</p><table><thead><tr><th>类型</th><th>缩写</th><th>用途</th></tr></thead><tbody><tr><td>200</td><td>SR</td><td>发送端报告</td></tr><tr><td>201</td><td>RR</td><td>接收端报告</td></tr><tr><td>202</td><td>SDES</td><td>源点描述</td></tr><tr><td>203</td><td>BYE</td><td>结束传输</td></tr><tr><td>204</td><td>APP</td><td>特定应用</td></tr></tbody></table><p>实际RTCP真正拥有的类型有20多种</p><p><strong>SR</strong>:</p><ul><li><code>版本（V）</code>：2比特，RTCP版本。</li><li><code>填充（P）</code>：1比特，如果该位置为1，则该RTCP包的尾部就包含附加的填充字节。</li><li><code>接收报告计数器（RC）</code>：5比特，该SR包中的接收报告块的数目，可以为零。</li><li><code>包类型（PT）</code>：8比特，SR包是200。</li><li><code>长度域（Length）</code>：16比特，RTCP包的长度，包括填充的内容。</li><li><code>同步源（SSRC of sender）</code>：32比特，SR包发送者的同步源标识符。与对应RTP包中的SSRC一样。</li><li><code>NTP timestamp（MSW+LWS）</code>：64比特， 表示发送此报告时以挂钟时间测量的时间点。 结合来自各个接收器的接收报告中返回的时间戳，它可用于估计往返于接收器的往返传播时间。</li><li><code>RTP timestamp</code>：32比特，与NTP时间戳对应，与RTP数据包中的RTP时间戳具有相同的单位和随机初始值。</li><li><code>Sender’s packet count</code>：32比特，从开始发送包到产生这个SR包这段时间里，发送者发送的RTP数据包的总数. SSRC改变时，这个域清零。</li><li><code>Senders octet count</code>：32比特，从开始发送包到产生这个SR包这段时间里，发送者发送的净荷数据的总字节数（不包括头部和填充）。发送者改变其SSRC时，这个域要清零。</li><li><code>SSRC_n</code> ：32比特，在此块中报告其接收的发送者的 SSRC 标识符</li><li><code>丢失率(Fraction Lost)</code> :8比特，表明从上一个SR或RR包发出以来从同步源n(SSRC_n)来的RTP数据包的丢失率</li><li><code>累计的包丢失数目（cumulative number of packets lost ）</code>：24比特，从开始接收到SSRC_n的包到发送SR,从SSRC_n传过来的RTP数据包的丢失总数。</li><li><code>收到的扩展最大序列号(extended highest sequence number received  EHSN )</code>：<br>从SSRC_n收到的RTP数据包中最大的序列号<br><code>uint16_t seq_cycles</code>;  &#x2F;&#x2F;Sequence number cycles count (序列号循环计数<br>  <code>uint16_t seq_max</code>; &#x2F;&#x2F;highest sequence number received (序列最大值</li><li><code>接收抖动（Interarrival jitter）</code>：32比特，RTP数据包接受时间的统计方差估计</li><li><code>上次SR时间戳（Last SR,LSR）</code>：32比特，取最近从SSRC_n收到的SR包中的NTP时间戳的中间32比特。如果目前还没收到SR包，则该域清零</li><li><code>上次SR以来的延时（Delay since last SR,DLSR）</code>：32比特，上次从SSRC_n收到SR包到发送本报告的延时</li><li>扩展字段 profile-specific extensions</li></ul><h2 id="1-2-RTCP抓包"><a href="#1-2-RTCP抓包" class="headerlink" title="1.2 RTCP抓包"></a>1.2 RTCP抓包</h2><p><img src="/img/rtsp31.png"></p><p>服务段先发送RR, 推流端收到RR后发送SR</p><p><em>推流端第一次发送SR</em></p><p><img src="/img/rtsp32.png"></p><ul><li><code>Sender&#39;s packet count</code> : 截止到当前发送RTP包的数量</li><li><code>Sender&#39;s octet count</code> : 发送RTP包对应字节流的长度</li><li><code>RTP timestamp</code> : 当前发送RTCP时RTP最新的RTPHeader时间戳</li><li><code>Timestamp, MSW</code> 和 <code>Timestamp, LSW</code>: NTP用两个字段用来表示和传输</li></ul><p><em>第二次发送SR:</em></p><p><img src="/img/rtsp33.png"></p><p>demo(未完成): <a href="https://github.com/9TSe/RTSPServer">6,7 RTCP</a><br>client实际发送的数据目前未知,client端表示发送成功, server端表示接受的ssrc,packetcount等超过类型最大值,cout失败<br>推测端口被占用</p><hr><h1 id="8-RTSP客户端"><a href="#8-RTSP客户端" class="headerlink" title="8. RTSP客户端"></a>8. RTSP客户端</h1><blockquote><p>ffmpeg向RTSPServer推流, RTSPClient再向RTSPServer拉流 生成可播放的h264文件</p></blockquote><h2 id="1-SDP-Session-Description-Protocol-简介"><a href="#1-SDP-Session-Description-Protocol-简介" class="headerlink" title="1. SDP(Session Description Protocol) 简介"></a>1. SDP(Session Description Protocol) 简介</h2><blockquote><p>SDP 完全是一种<code>会话描述格式</code>, 它不属于传输协议<br>它只使用于不同的适当的传输协议，包括会话通知协议（SAP）、会话初始协议（SIP）、实时流协议（RTSP）、MIME 扩展协议的电子邮件以及超文本传输协议（HTTP）。<br>SDP协议是也是<code>基于文本的协议</code>，这样就能保证协议的可扩展性比较强，这样就使其具有广泛的应用范围。SDP 不支持会话内容或媒体编码的协商，所以在流媒体中<code>只用来描述媒体信息</code>。媒体协商这一块要用RTSP来实现．</p></blockquote><h2 id="2-向-RTSP服务端-推流的ffmpeg命令"><a href="#2-向-RTSP服务端-推流的ffmpeg命令" class="headerlink" title="2. 向 RTSP服务端 推流的ffmpeg命令"></a>2. 向 RTSP服务端 推流的ffmpeg命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -stream_loop -1 -i xxx.mp4  \</span><br><span class="line">-rtsp_transport tcp -c copy -f rtsp rtsp://127.0.0.1:554/live/test</span><br><span class="line"><span class="comment">#stream_loop 为了方便调试,使流循环推流</span></span><br></pre></td></tr></table></figure><h2 id="3-WireShark-常用过滤-及-抓包分析"><a href="#3-WireShark-常用过滤-及-抓包分析" class="headerlink" title="3. WireShark 常用过滤 及 抓包分析"></a>3. WireShark 常用过滤 及 抓包分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tcp.srcport != 63639 and rtsp and !rtcp</span><br><span class="line">ip.src_host == 127.0.0.1</span><br><span class="line">ip.dst_host == 127.0.0.1</span><br><span class="line">tcp.srcport == xx</span><br><span class="line">tcp.dstport == xx</span><br></pre></td></tr></table></figure><p><em><strong>抓包分析:</strong></em></p><blockquote><p>Option<br><img src="/img/rtsp34.png"><br><img src="/img/rtsp35.png"></p></blockquote><blockquote><p>Reply1 : public 是允许的字段<br><img src="/img/rtsp36.png"><br><img src="/img/rtsp37.png"></p></blockquote><blockquote><p>Describe<br><img src="/img/rtsp38.png"></p></blockquote><blockquote><p>Reply 2: 包含SDP(回应describe后, 由于SDP, 以后不管推拉流都要包含session中独特的序列<br><img src="/img/rtsp39.png"><br><img src="/img/rtsp40.png"></p></blockquote><blockquote><p>Setup 1 : 视频流<br><img src="/img/rtsp41.png"></p></blockquote><blockquote><p>Reply 3:<br><img src="/img/rtsp42.png"></p></blockquote><blockquote><p>Setup 2 : 音频流<br><img src="/img/rtsp43.png"></p></blockquote><blockquote><p>Reply 4:<br><img src="/img/rtsp44.png"></p></blockquote><blockquote><p>Play:<br><img src="/img/rtsp45.png"></p></blockquote><blockquote><p>Reply 5:<br><img src="/img/rtsp46.png"></p></blockquote><p><code>**SetUp中若有,字幕流,弹幕流等 Setup就会++**</code></p><p><a href="https://github.com/9TSe/RTSPServer">RTSPClient 源码</a></p><h2 id="4-windows下查看端口命令"><a href="#4-windows下查看端口命令" class="headerlink" title="4. windows下查看端口命令"></a>4. windows下查看端口命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#windows查看端口占用进程</span></span><br><span class="line">netstat -aon|findstr <span class="string">&quot;10000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows查看命令占用进程</span></span><br><span class="line">tasklist | findstr <span class="string">&quot;python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows根据进程ID查看应用</span></span><br><span class="line">tasklist|findstr <span class="string">&quot;11748&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows根据进程ID杀死应用</span></span><br><span class="line">taskkill /pid 11748 /F</span><br><span class="line">taskkill -PID 进程号 -F</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-RTSP协议简介&quot;&gt;&lt;a href=&quot;#1-RTSP协议简介&quot; class=&quot;headerlink&quot; title=&quot;1. RTSP协议简介&quot;&gt;&lt;/a&gt;1. RTSP协议简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;配置属性 -&amp;gt; 调试 -&amp;gt; 环境 </summary>
      
    
    
    
    <category term="音视频" scheme="http://example.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="RTSP" scheme="http://example.com/tags/RTSP/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg命令行简介</title>
    <link href="http://example.com/2023/12/05/ffmpeg/"/>
    <id>http://example.com/2023/12/05/ffmpeg/</id>
    <published>2023-12-05T13:37:52.000Z</published>
    <updated>2023-12-05T13:54:11.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ffmpeg"><a href="#1-ffmpeg" class="headerlink" title="1. ffmpeg"></a>1. ffmpeg</h1><h2 id="1-1-视频图片转换"><a href="#1-1-视频图片转换" class="headerlink" title="1.1 视频图片转换"></a>1.1 视频图片转换</h2><blockquote><p>视频生成图片</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 25 -f image2 data/image%3d.jpg</span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><p><code>image%3d.jpg</code> 表示生成的图片序号为3个数字<br><code>image%d.jpg</code> 表示生成的图片序号依次增加</p></li><li><p><code>-r</code> 25 帧数</p></li><li><p><code>-f image2</code> 格式化的格式</p></li></ul><blockquote><p>图片生成视频</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -r 1 -f image2 -i data/%d.jpg -vcodec libx264 -s 640*480 -g 1 -keyint_min 1 -sc_threshold 0 -pix_fmt yuv420p out.mp4</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li><code>-vcodec libx264</code>  指定合成视频的编码格式为<code>h264</code></li><li><code>-r 1</code>  fps等于1  (frame rate 帧率)<br>这个参数需要<code>写在 -f 之前</code>，确保FFmpeg能够正确地解释输入文件的每秒图像数，并据此创建视频的时间轴。</li><li><code>-s 640*480</code>   分辨率 (size)</li><li><code>-g 1</code>  GOP长度(关键帧之间的间隔)</li><li><code>-keyint_min 1</code>   keyint表示关键帧（IDR帧）间隔<br>这个选项表示限制<code>IDR帧间隔最小为1帧，与设置的GOP等长</code></li><li><code>-sc_threshold 0</code>  禁用场景识别，即进制自动添加<code>IDR帧</code> (scene threshold（场景阈值）)</li><li><code>-pix_fmt  yuv420p</code>  帧格式  (pixel（像素）)</li><li><code>-vf scale=1280:-1</code>  指定合成视频的分辨率自适应宽为1280，高按照比例计算<br>(video filter（视频滤镜）)<br><code>-1</code> 是一个特殊的值，它告诉 FFmpeg 保持原始高度与新宽度的比例。</li></ul><p>ps:<br>    IDR帧(首个I帧)<br>eg:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -r 25 -f image2 -i data/image%3d.jpg -vcodec libx264 -s 1080*606 -g 100 -keyint_min 25 -sc_threshold 0 -pix_fmt yuv420p out.mp4</span><br></pre></td></tr></table></figure><h2 id="1-2-生成m3u8切片"><a href="#1-2-生成m3u8切片" class="headerlink" title="1.2 生成m3u8切片"></a>1.2 生成m3u8切片</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx264 -c:a copy -f hls -hls_time 10 -hls_list_size 0</span><br><span class="line">-hls_start_number 0 input/index.m3u8</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li><code>-c:v</code> codec（编解码器）: video（视频）。 &#x3D;&#x3D; -vcodec<br><code>-c:a</code> audio（音频）  &#x3D;&#x3D; -acodec </li><li><code>-f</code> (format) 以<code>hls</code>格式</li><li><code>-hls_time n</code>: 设置每片的长度，默认值为2。单位为秒</li><li><code>-hls_list_size n</code>:设置播放列表保存的最多条目，设置为0会保存有所片信息，默认值为<code>5</code></li><li><code>-hls_start_number n</code>:设置播放列表中<code>sequence number</code>的值为<code>number</code>，默认值为<code>0</code></li><li><code>-hls_wrap n</code>:设置多少片之后开始覆盖，如果设置为0则不会覆盖，默认值为<code>0</code>.<br> 这个选项能够避免在磁盘上存储过多的片，而且能够限制写入磁盘的最多的片的数量</li></ul><blockquote><p>另一种方法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -fflags flush_packets </span><br><span class="line">-max_delay 2 -flags -global_header </span><br><span class="line">-hls_time 5 -hls_list_size 0 -vcodec libx264 -acodec aac -r 30 -g 60 index.m3u8</span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><code>-fflags</code> 设置输入&#x2F;输出文件或流的标志（flags）<br>用来激活或修改 FFmpeg 内部的标志，以控制特定的行为</li><li><code>-flush_packets</code> 导致 FFmpeg 立即输出已经在内存缓冲中的数据包（packets）<br>而不是等待缓冲区满或其他条件触发输出。</li><li><code>-max_delay 2</code>：设置最大延迟时间为 2 秒</li></ul><ul><li><p><code>-flags -global_header</code>：这是一个设置视频编码器标志的选项。在这个情况下，<code>-flags</code> 用于设置特定的编码器标志。<code>-global_header</code> 标志指示在视频流的第一个关键帧（I帧）中包含全局头信息（global headers），这对于某些视频流的处理和解码非常重要。</p></li><li><p><code>-vcodec libx264</code>：指定视频编码器为 libx264，用于对视频进行 H.264 编码。</p></li><li><p><code>-acodec aac</code>：指定音频编码器为 AAC，用于对音频进行 AAC 编码。</p></li></ul><h2 id="1-3-指定码率转换"><a href="#1-3-指定码率转换" class="headerlink" title="1.3 指定码率转换"></a>1.3 指定码率转换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -b:v 10M -b:a 10M -c:v libx264 -c:v aac out.mp4</span><br></pre></td></tr></table></figure><p>备注：<br><font color = red>切记一点，命令行中涉及编解码时，-c:v copy 不要使用，否则 比如指定的码率参数，分辨率参数等就会失效，而且很难找到原因 </font></p><ul><li><code>-b:v 10M</code> 指定<code>视频</code>重新编码的码率为10M&#x2F;s (<code>bitrate</code>(比特率)) &#x3D;&#x3D; -vb</li><li><code>-b:a 10M</code> 指定<code>音频</code>重新编码的码率为10M&#x2F;s &#x3D;&#x3D; -ab</li></ul><p><code>码率: 输出视频每秒的bit数</code></p><h2 id="1-4-录制"><a href="#1-4-录制" class="headerlink" title="1.4 录制"></a>1.4 录制</h2><blockquote><p>指定时间录制</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从10:20 录制到30:20</span></span><br><span class="line">ffmpeg -i input.mp4 -c:v copy -c:a copy -ss 00:10:20 -to 00:30:20 out.mp4</span><br></pre></td></tr></table></figure><blockquote><p>指定录制时长</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">录制30秒</span></span><br><span class="line">ffmpeg -i input.mp4 -c:v copy -c:a copy -t 30 out.mp4</span><br></pre></td></tr></table></figure><h2 id="1-5-提取裸码流"><a href="#1-5-提取裸码流" class="headerlink" title="1.5 提取裸码流"></a>1.5 提取裸码流</h2><blockquote><p>提取 <code>h264 裸码流</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v copy -bsf:v h264_mp4toannexb -an out.h264</span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><code>-bsf:v</code> Bitstream Filter(比特流过滤器)</li><li><code>h264_mp4toannexb</code> 过滤器名称<br>将 H.264 编码的 MP4 格式视频转换为 H.264 规范的 <code>Annex B</code> 形式。<br><code>Annex B</code> 是 <code>H.264</code> 标准中的一种视频封装格式。它规定了 H.264 视频流的封装方式和数据传输格式。</li><li><code> -an</code>  audio none(禁用音频)</li></ul><blockquote><p>提取 <code>h264 裸码流指定编码质量</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -an -c:v libx264 -crf 18 out.h264</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-crf 18 (固定质量值18)</span></span><br></pre></td></tr></table></figure><blockquote><p>提取 <code>aac</code> 裸码流</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -acodec copy -vn out.aac</span><br></pre></td></tr></table></figure><h2 id="1-6-倒放"><a href="#1-6-倒放" class="headerlink" title="1.6 倒放"></a>1.6 倒放</h2><blockquote><p><code>视频倒放</code>音频不变</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf reverse xxx.mp4</span><br><span class="line">ffmpeg -i input.mp4 -vf &quot;reverse&quot; xxx.mp4</span><br></pre></td></tr></table></figure><blockquote><p><code>音频倒放</code>，视频不变</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -map 0 -c:v copy -af &quot;areverse&quot; xxx.mp4 </span><br><span class="line">ffmpeg -i input.mp4 -af areverse xxx.mp4 </span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><code>-map</code> 参数允许你指定要从输入文件中选择的特定流，并将这些流映射到输出文件中。<br>输入文件可以包含多个音频流、视频流和字幕流等<br><code>-map</code> 表示传输的第一个文件中的所有流</li></ul><blockquote><p>视频音频同时<code>倒放</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf reverse -af areverse xxx.mp4</span><br></pre></td></tr></table></figure><h2 id="1-7-转码"><a href="#1-7-转码" class="headerlink" title="1.7 转码"></a>1.7 转码</h2><blockquote><p>转码-&gt;<code>AVC</code>（指定转码的部分参数）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx264 -preset slow -tune film -profile:v main out.mp4</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li><code>-tune film</code> (主要配合视频类型和视觉优化的参数) </li><li><code>-preset slow</code>   编码预设，主要调节 编码速度和质量的平衡<br>   10个选项如下 从快到慢：ultrafast、superfast、veryfast、faster、fast、medium、slow、slower、veryslow、placebo</li><li><code> -profile:v main</code> (profile 配置文件)<br>   h264有四种画质级别,分别是baseline, extended, main, high：<br>   1、<code>Baseline Profile</code>：基本画质。支持I&#x2F;P 帧，<code>只支持无交错</code>（Progressive）和<code>CAVLC</code>；<br>   2、<code>Extended profile</code>：进阶画质。支持I&#x2F;P&#x2F;B&#x2F;SP&#x2F;SI 帧，<code>只支持无交错</code>（Progressive）和<code>CAVLC</code>；(用的少)<br>   3、<code>Main profile</code>：主流画质。提供I&#x2F;P&#x2F;B 帧，<code>支持无交错和交错</code>（Interlaced）， 也支持<code>CAVLC 和CABAC</code><br>   4、<code>High profile</code>：高级画质。在<code>main Profile</code> 的基础上增加了8x8内部预测、自定义量化、 无损视频编码和更多的YUV 格式；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx264 -b:v 2048k -vf scale=1280:-1 -y out.mp4</span><br></pre></td></tr></table></figure><blockquote><p>转码-&gt;<code>HEVC</code> </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx265 -c:a copy out.mp4</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>cuvid</code>进行解码和编码实现转码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -c:v h264_cuvid -i input.mp4 -c:v h264_nvenc -b:v 2048k -vf scale=1280:-1 -y out.mp4</span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><code>-hwaccel cuvid</code> (指定使用cuvid硬件加速)</li><li><code>-c:v h264_cuvid</code> (使用h264_cuvid进行视频解码)</li><li><code>-c:v h264_nvenc</code> (使用h264_nvenc进行视频编码)</li><li><code>-b:v 2048k</code> (指定输出视频的码率，即输出视频每秒的bit数)</li><li><code>-vf scale=1280:-1</code> (指定输出视频的宽高，高-1代表按照比例自动适应)</li></ul><blockquote><p>使用<code>videotoolbox</code>进行编码实现转码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vcodec h264_videotoolbox -b:v 2048k -vf scale=1280:-1 -y  out.mp4</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li><code>-vcodec h264_videotoolbox </code>(使用h264_videotoolbox 进行视频编码)</li></ul><h2 id="1-8-查看"><a href="#1-8-查看" class="headerlink" title="1.8 查看"></a>1.8 查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前支持的编码器</span></span><br><span class="line">ffmpeg -codecs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前支持的封装格式</span></span><br><span class="line">ffmpeg -formats</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前支持的滤镜</span></span><br><span class="line">ffmpeg -filters</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看指定解码器的相关参数</span></span><br><span class="line">ffmpeg -h decoder=h264_cuvid</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前支持的硬件加速选项</span></span><br><span class="line">ffmpeg -hwaccels</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">例如：mac核显支持的选项（videotoolbox）英伟达显卡支持的选项（cuvid）</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看摄像头列表</span></span><br><span class="line">ffmpeg -list_devices true -f dshow -i dummy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看摄像头的分辨率格式</span></span><br><span class="line">ffmpeg -list_options true -f dshow -i video=&quot;FULL HD webcam&quot;</span><br></pre></td></tr></table></figure><h2 id="1-9-推拉流"><a href="#1-9-推拉流" class="headerlink" title="1.9 推拉流"></a>1.9 推拉流</h2><blockquote><p><code>摄像头</code>推流到<code>RTMP</code>服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f dshow -i video=&quot;USB webcam&quot; -vcodec libx264 -acodec aac -ar 44100 -ac 1 -r 25 -s 1920*1080 -f flv rtmp://192.168.1.3/live/desktop</span><br></pre></td></tr></table></figure><ul><li><code>-ac</code> audio channels（音频通道）</li></ul><blockquote><p><code>摄像头</code>推流到<code>RTSP</code>（rtp over tcp）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f dshow -i video=&quot;FULL HD webcam&quot; -rtsp_transport tcp -vcodec libx264 -preset ultrafast -acodec libmp3lame -ar 44100 -ac 1 -r 25 -f rtsp rtsp://192.168.0.1/webcam</span><br></pre></td></tr></table></figure><blockquote><p>windows<code>桌面</code>推流到<code>RTMP</code>服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f gdigrab -i desktop -vcodec libx264 -preset ultrafast -acodec libmp3lame -ar 44100 -ac 1 -r 25 -s 1920*1080 -f flv rtmp://127.0.0.1/live/desktop</span><br></pre></td></tr></table></figure><blockquote><p>windows<code>桌面</code>推流到<code>RTSP</code>服务（rtp over udp）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f gdigrab -i desktop -vcodec libx264 -preset ultrafast -acodec libmp3lame -ar 44100 -ac 1 -r 25 -f rtsp rtsp://127.0.0.1/live/desktop</span><br></pre></td></tr></table></figure><blockquote><p><code>RTMP</code>推流</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i input.flv -f flv -r 25 -s 1920*1080 -an &quot;rtmp://127.0.0.1/live/test&quot;</span><br></pre></td></tr></table></figure><blockquote><p><code>RTSP拉流转RTMP推流</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -rtsp_transport tcp -i &quot;rtsp://admin:12345678@192.168.0.2&quot; -f flv -c:v copy -a:v copy -r 25 -s 1920*1080 &quot;rtmp://127.0.0.1/live/test&quot;</span><br></pre></td></tr></table></figure><blockquote><p>本地视频文件RTSP推流 （tcp）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i input.mp4 -rtsp_transport tcp -vcodec h264 -acodec copy -f rtsp rtsp://127.0.0.1/live/test</span><br></pre></td></tr></table></figure><blockquote><p>本地视频文件RTSP循环推流（tcp）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -stream_loop -1 -i input.mp4 -rtsp_transport tcp -c copy -f rtsp rtsp://127.0.0.1/live/test</span><br></pre></td></tr></table></figure><blockquote><p>本地视频文件RTSP推流 （udp）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i input.mp4 -rtsp_transport udp -vcodec h264 -acodec copy -f rtsp rtsp://127.0.0.1/live/test</span><br></pre></td></tr></table></figure><blockquote><p>RTSP拉流并播放 （tcp）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i -rtsp_transport tcp rtsp://127.0.0.1/live/test</span><br></pre></td></tr></table></figure><blockquote><p>RTSP拉流并播放 （udp）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i rtsp://127.0.0.1/live/test</span><br></pre></td></tr></table></figure><h2 id="1-10-合并"><a href="#1-10-合并" class="headerlink" title="1.10 合并"></a>1.10 合并</h2><blockquote><p>60s长包含音频的video-60.mp4，和30s长的音频audio-30.mp3 合并。<br>audio-30.mp3内的音频会替换到video-60.mp4的音频。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video-60.mp4 -i audio-30.mp3 -c:v copy -c:a aac -strict experimental -map 0:v:0 -map 1:a:0 out.mp4</span><br></pre></td></tr></table></figure><blockquote><p>60s长包含音频的video-60.mp4，和30s长的音频audio-30.mp3 合并。<br>合并后的out.mp4包含两路音频。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video-60.mp4 -i audio-30.mp3 -filter_complex &quot;amix=inputs=2:duration=first:dropout_transition=0&quot; -c:v &quot;libx264&quot; -c:a &quot;aac&quot; -y out.mp4</span><br></pre></td></tr></table></figure><hr><h1 id="2-ffplay"><a href="#2-ffplay" class="headerlink" title="2. ffplay"></a>2. ffplay</h1><p><font color = red> 一般会使用ffmpeg进行处理后用ffplay直接进行播放,ffplay的功能是有限的</font></p><blockquote><p>播放 <code>h264</code> 裸码流</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffplay -stats -f h264 out.h264</span><br><span class="line">ffplay -i out.h264</span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><code>-stats</code> 实时显示有关音视频帧的统计信息</li></ul><blockquote><p>播放 <code>aac</code> 裸码流</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -i out.aac</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>指定解码器</code>播放视频</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -vcodec h264 -i out.mp4</span><br></pre></td></tr></table></figure><blockquote><p>播放<code>摄像头</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffplay -f dshow -i video=&quot;FULL HD webcam&quot; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FULL HD webcam 是通过查看列表的命令行获得的名称</span></span><br></pre></td></tr></table></figure><blockquote><p>静音播放</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay -an input.mp4</span><br></pre></td></tr></table></figure><blockquote><p>倍速播放</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">二倍速</span></span><br><span class="line">ffplay -vf setpts=0.5 input.mp4</span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><code>setpts</code> play time speed</li></ul><blockquote><p>升调播放</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.5倍速</span></span><br><span class="line">ffplay -af &quot;atempo=1.5&quot; input.mp4 </span><br></pre></td></tr></table></figure><p>备注:</p><ul><li><code>atempo</code> Audio Tempo（音频节奏）</li></ul><hr><h1 id="3-ffprobe"><a href="#3-ffprobe" class="headerlink" title="3. ffprobe"></a>3. ffprobe</h1><blockquote><p>获取视频的总帧数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 input.mp4</span><br></pre></td></tr></table></figure><ul><li><p><code>-v error</code>：这隐藏了“info”输出 (verbosity(详细程度))</p></li><li><p><code>-count_frames</code>：计算每个流的帧数，并在相应的流部分中报告。</p></li><li><p><code>-select_streams v:0</code> ：仅选择视频流 (Video stream(视频流) (0 表示索引)</p></li><li><p><code>-show_entries stream = nb_read_frames</code> ：只显示读取的帧数。</p></li><li><p><code>-of default = nokey = 1：noprint_wrappers = 1</code> ：将输出格式(也称为“writer”)设置为默认值，不打印每个字段的键(<code>nokey = 1</code>)，不打印节头和页脚(<code>noprint_wrappers = 1</code>)。</p></li></ul><p>执行流程如下：</p><ul><li><code>ffprobe</code> 解析并读取 <code>input.mp4</code> 视频文件。</li><li><code>-select_streams v:0</code> 选择了视频流中的第一个流进行分析。</li><li><code>-count_frames</code> 让 <code>ffprobe</code> 统计并显示该视频流中的帧数。</li><li><code>-show_entries stream=nb_read_frames</code> 显示了视频流中每个流的 <code>nb_read_frames</code> 字段，即已读取的帧数。</li><li><code>-of default=nokey=1:noprint_wrappers=1</code> 指定了输出格式为默认格式，并设置了输出参数，以便在输出时不显示键名并省略外层包装器。</li><li>最终，输出会显示视频文件中所选视频流的已读取帧数，根据设定的输出格式进行格式化显示。</li></ul><blockquote><p>基本用法：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe input_file</span><br></pre></td></tr></table></figure><ul><li><code>input_file</code> 是你要分析的媒体文件的路径。</li></ul><p><code>ffprobe</code> 默认会输出媒体文件的详细信息，包括文件格式、编解码器信息、流的详细参数、时长、分辨率、比特率等等。</p><p>常见参数：</p><ul><li><code>-show_format</code>：显示媒体文件的格式信息。</li><li><code>-show_streams</code>：显示媒体文件的各个流（视频、音频、字幕等）的详细信息。</li><li><code>-select_streams [stream_specifier]</code>：选择特定类型的流进行分析。</li><li><code>-show_frames</code>：显示每个视频帧的详细信息。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -show_format -show_streams input.mp4</span><br></pre></td></tr></table></figure><p>这会显示媒体文件 <code>input.mp4</code> 的格式信息以及所有流（视频、音频等）的详细信息。</p><p>通过 <code>ffprobe</code>，你可以深入了解媒体文件的结构和属性，有助于调试、分析和了解你所处理的音视频文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-ffmpeg&quot;&gt;&lt;a href=&quot;#1-ffmpeg&quot; class=&quot;headerlink&quot; title=&quot;1. ffmpeg&quot;&gt;&lt;/a&gt;1. ffmpeg&lt;/h1&gt;&lt;h2 id=&quot;1-1-视频图片转换&quot;&gt;&lt;a href=&quot;#1-1-视频图片转换&quot; class</summary>
      
    
    
    
    <category term="音视频" scheme="http://example.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="ffmpeg" scheme="http://example.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>音视频入门</title>
    <link href="http://example.com/2023/11/27/%E9%9F%B3%E8%A7%86%E9%A2%911/"/>
    <id>http://example.com/2023/11/27/%E9%9F%B3%E8%A7%86%E9%A2%911/</id>
    <published>2023-11-27T14:24:43.000Z</published>
    <updated>2023-12-01T12:23:34.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-音视频播放原理"><a href="#1-音视频播放原理" class="headerlink" title="1. 音视频播放原理"></a>1. 音视频播放原理</h1><p><img src="/img/mv1.1.png"></p><h1 id="2-图像篇"><a href="#2-图像篇" class="headerlink" title="2. 图像篇"></a>2. 图像篇</h1><h2 id="2-1-YUV和RGB"><a href="#2-1-YUV和RGB" class="headerlink" title="2.1 YUV和RGB"></a>2.1 YUV和RGB</h2><p>音视频中编码前的图像格式，即YUV和RGB。</p><p>YUV，RGB，包括YcbCr是色彩空间的模型，而平常所说的BMP、PNG、JPEG是文件的存储形式。<br>而YUV是音视频（编解码）最常用的格式。</p><blockquote><p>YUV有两种分类方式，即<code>空间-间</code>和<code>空间-内</code>。<br><strong>空间-间的划分方式主要体现在Y、U、V的比例不同；<br>空间-内的划分方式主要体现在Y、U、V的比例一定，存储格式不同。</strong></p></blockquote><p><strong>1. YUV 空间-间 的数据划分</strong></p><p>YUV按照<code>空间-间</code>的划分方式，分为<code>YUV444</code>、<code>YUV422</code>、<code>YUV420</code>，如下所示，假设图像为1920*1080：</p><p><img src="/img/mv1.2.png"></p><p><strong>2. YUV 空间-内 的数据划分</strong></p><p>YUV按照<code>空间-内</code>的划分方式，主要分为<code>packet</code>、<code>planar</code>、<code>semi-planar</code>三种：</p><ul><li><p>packet：打包格式，即先存储一个yuv，再存储下一个yuv；</p></li><li><p>planar：平面格式，即先存储y平面，再存储u平面，再存储v平面；</p></li><li><p>semi-planar：先存储y平面，再存储uv平面；</p></li></ul><p> YUV422各种存储格式如下：</p><p><img src="/img/mv1.3.png"></p><p>YUV420各种存储格式如下：</p><p><img src="/img/mv1.4.png"></p><p>针对上图中的NV12、NV21、NV16、NV61说明：</p><ul><li><p>NV：NV系列都属于semi-plane系列，12、16代表先U后V || 21、61代表先V后U</p></li><li><p>12、16：代表一个像素占的位数</p></li></ul><p><strong>3. YUV和RGB</strong></p><p>RGB：即red，green，blue三色存储空间，因音视频主要用的是YUV的色彩空间，只简单介绍下RGB和YUV的转换公式：</p><ul><li>RGB 转 YUV：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Y = 0.299R + 0.587G + 0.114B</span><br><span class="line"></span><br><span class="line">U= -0.147R - 0.289G + 0.436B</span><br><span class="line"></span><br><span class="line">V = 0.615R - 0.515G - 0.100B</span><br></pre></td></tr></table></figure><ul><li>YUV 转 RGB：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R = Y + 1.14V</span><br><span class="line"></span><br><span class="line">G = Y - 0.39U - 0.58V</span><br><span class="line"></span><br><span class="line">B = Y + 2.03U</span><br></pre></td></tr></table></figure><h2 id="2-2-H-264"><a href="#2-2-H-264" class="headerlink" title="2.2 H.264"></a>2.2 H.264</h2><blockquote><p>H.264是由 ITU-T视频编码专家组(VCEG) 和 ISO&#x2F;IEC动态图像专家组(MPEG)<br>联合组成的联合视频组（JVT，Joint Video Team）提出的<code>高度压缩数字视频编解码器标准</code>。</p></blockquote><p><strong>1. H.264的数据格式</strong></p><p>H.264由<code>视频编码层</code>（VCL）和 <code>网络适配层</code>（NAL）组成。</p><ul><li><p><code>VCL</code>：H.264编码&#x2F;压缩的核心，主要负责将视频数据编码&#x2F;压缩，再切分。</p></li><li><p>NALU(NAL单元) &#x3D; <code>NALU header(头部)</code> + NALU payload(有效负载)</p></li></ul><p><code>NALU payload</code> 是根据<code>NALU头部</code>中 <code>nal_unit_type</code> 的不同而变化的，它可能包含了不同类型的视频数据。举例来说：</p><ol><li>对于片（slice）类型的NALU，NALU payload 将包含经过编码和压缩的视频像素数据，这些数据经过了帧内预测和帧间预测、DCT 变换、量化和比特流编码等处理。</li><li>对于参数集类型（如SPS、PPS），NALU payload 将包含编码视频序列的相关参数信息，如图像分辨率、帧率、编码方式等。</li><li>对于补充增强信息（SEI），NALU payload 可能包含了额外的元数据或增强信息，例如色彩空间信息、时间戳、双流传输信息等。</li></ol><p><strong>2. VCL管理H264视频数据</strong></p><ol><li><strong>压缩过程</strong> ：<ul><li><strong>预测</strong> ：H.264使用帧内预测和帧间预测来利用视频序列中的时间和空间相关性。帧内预测通过对当前帧内的像素进行预测来减少冗余。帧间预测利用邻近帧的信息进行运动补偿，以减少帧间冗余。</li><li><strong>DCT 变换和量化</strong> ：对预测残差进行离散余弦变换（DCT），然后将其量化，以减少数据量。</li><li><strong>比特流编码</strong> ：采用不同的编码技术对量化后的数据进行编码，如熵编码（如CABAC和CAVLC），以生成最终的压缩比特流。</li></ul></li><li><strong>数据切分</strong> ：<ul><li><strong>切片（slice）</strong> ：VCL将帧划分为不同的切片，每个切片包含一部分宏块（macroblock），允许并行处理和解码，提高系统效率。</li><li><strong>宏块（macroblock）</strong> ：它是一个像素块，包含在切片中，用于进行预测和编码。宏块是H.264中处理的基本单元。</li></ul></li><li><strong>包装成NAL</strong> ：<ul><li>NAL（网络抽象层）是为了适应不同网络传输需求而封装VCL生成的编码视频数据。NAL单元由NAL头部和NAL有效负载组成，它提供了对应用层和传输层之间的接口。NAL单元的创建允许对VCL生成的数据进行适当的封装和传输，以便在网络上传输和存储。</li></ul></li></ol><p><code>VCL</code>最后会被包装成<code>NAL</code></p><p><strong>3. NAL头的数据结构体</strong></p><p><img src="/img/mv1.5.png"></p><ul><li><p>F（forbidden_zero_bit）：1 位，初始为0。<br>当网络识别此单元存在比特<code>错误</code>时，可将其<code>设为 1</code>，以便接收方丢掉该单元</p></li><li><p>NRI（nal_ref_idc）：2 位，用来指示该NALU 的重要性等级。<br>值越大，表示当前NALU越重要。具体大于0 时取何值，没有明确规定</p></li><li><p>Type（nal_unit_type）：5 位，指出NALU 的类型，如下所示：(5,7,8)</p></li></ul><p><img src="/img/mv1.6.png"></p><p><strong>4. H.264码流结构</strong></p><ul><li>H.264 &#x3D; start_code + NALU</li></ul><ol><li><strong>3 字节的 start_code：</strong><ul><li><code>0000 0001</code>（8 比特，即一个字节）或者是 <code>0000 01</code>（6 比特）。</li><li>用于分隔两个连续的 NALU 单元。</li><li>较短的起始码占用更少的比特数（6或8比特），节省了一些带宽。</li></ul><ul><li>在较早的H.264编码器或特定的实现中可能会使用这种较短的起始码。</li></ul></li><li><strong>4 字节的 start_code：</strong><ul><li><code>0000 0000 0000 0001</code>（16 比特，两个字节）或者是 <code>00 00 00 01</code>（32 比特，四个字节）。</li><li>同样也是为了分隔两个连续的 NALU 单元。</li><li>更长的起始码提供了更大的辨识性和可靠性。在传输过程中，更长的起始码可能对于错误检测和恢复更有帮助。</li></ul><ul><li>在更多现代的H.264编码器和实现中使用这种较长的起始码，因为它们提供了更好的容错性。</li></ul></li></ol><p><img src="/img/mv1.7.png"></p><ul><li><p>每个NAL前有一个起始码 <code>0x00 00 01</code>（或者<code>0x00 00 00 01</code>）<br>解码器检测每个起始码，作为一个NAL的起始标识<br>当检测到下一个起始码时，当前NAL结束。</p></li><li><p>同时H.264规定，当检测到<code>0x00 00 00</code>时，也可以表征当前NAL的结束。<br>那么NAL中数据出现<code>0x00 00 01</code>或<code>0x00 00 00</code>时怎么办？<br>H.264引入了防止竞争机制<br>如果编码器检测到NAL数据存在<code>0x00 00 01</code>或<code>0x00 00 00</code>时，编码器会在最后个字节前插入一个新的字节0x03，这样：<br><code>0x00 00 00</code>－&gt;<code>0x00 00 03 00</code><br><code>0x00 00 01</code>－&gt;<code>0x00 00 03 01</code><br><code>0x00 00 02</code>－&gt;<code>0x00 00 03 02</code><br><code>0x00 00 03</code>－&gt;<code>0x00 00 03 03</code></p></li></ul><p><strong>5. I帧、P帧和B帧</strong></p><p>提到H.264，不得不提I帧、P帧、B帧、IDR帧、GOP。</p><ul><li><p>I帧（Intra-coded picture，帧内编码图像帧），表示<code>关键帧</code>，采用类似JPEG压缩的DCT(Discrete Cosine Transform，离散余弦变换)压缩技术，可达1&#x2F;6压缩比而无明显压缩痕迹；</p></li><li><p>P帧（Predictive-coded picture，前向预测编码图像帧），表示的是跟<code>之前的一个关键帧或P帧的差别</code>，P帧是<code>参考帧</code>，它可能造成解码错误的扩散；</p></li><li><p>B帧（Bidirectionally predicted picture，双向预测编码图像帧），<code>本帧与前后帧（I或P帧）的差别</code>，B帧压缩率高，但解码耗费CPU；</p></li><li><p>IDR帧（Instantaneous Decoding Refresh，即时解码刷新）：<code>首个I帧</code>，是立刻刷新,使错误不致传播<br>IDR导致DPB（DecodedPictureBuffer参考帧列表——这是关键所在）清空；<br>在IDR帧之后的所有帧都不能引用任何IDR帧之前的帧的内容；<br>IDR具有随机访问的能力，播放器可以从一个IDR帧播放。</p></li><li><p>GOP（Group Of Picture，图像序列）：两个I帧之间是一个GOP(图像序列)，一个GOP包含一个I帧</p></li></ul><p><strong>6. 解码时间戳和显示时间戳</strong></p><p>当然，H.264中还有两个重要的概念：<code>DTS</code> 和 <code>PTS</code></p><ul><li><p>DTS（Decoding Time Stamp，解码时间戳解）：读入内存中的比特流在什么时候开始送入解码器中进行解码</p></li><li><p>PTS（Presentation Time Stamp，显示时间戳）：解码后的视频帧什么时候被显示出来</p></li></ul><p><img src="/img/mv1.8.png"></p><hr><h1 id="3-音频篇"><a href="#3-音频篇" class="headerlink" title="3. 音频篇"></a>3. 音频篇</h1><h2 id="3-1-PCM"><a href="#3-1-PCM" class="headerlink" title="3.1 PCM"></a>3.1 PCM</h2><blockquote><p><code>PCM</code>(<code>Pulse Code Modulation</code>，<code>脉冲编码调制</code>)音频数据是未经压缩的音频采样数据裸流，它是由模拟信号经过采样、量化、编码转换成的标准数字音频数据。</p></blockquote><p><strong>1. 理解PCM</strong></p><p>PCM是一种用数字表示采样模拟信号方法。主要包括<code>采样</code>，<code>量化</code>，<code>编码</code>三个主要过程。</p><ul><li>先来看看模拟信号采样的过程：</li></ul><p><img src="/img/mv1.9.png"></p><ul><li><p>采样率：每秒钟采样的样本数。比如我们常说的44.1kHz，即每秒钟采样44100次。</p></li><li><p>量化：将采样信号数据四舍五入到一个可用整数表示的过程。（位深）</p></li></ul><p><img src="/img/mv1.10.png"></p><ul><li>编码：将量化后的信号转换成二进制数据。</li></ul><p><strong>2. 描述PCM数据的6个参数：</strong></p><ul><li><p><code>Sample Rate</code> : 采样频率。<code>8kHz</code>(电话)、<code>44.1kHz</code>(CD)、<code>48kHz</code>(DVD)。</p></li><li><p><code>Sample Size</code> : 量化位数。常见值为<code>8-bit</code>、<code>16-bit</code>。</p></li><li><p><code>Number of Channels</code> : 通道个数。常见的音频有<code>立体声(stereo)</code>和<code>单声道(mono)</code>两种类型，立体声包含左声道和右声道。另外还有环绕立体声等其它不太常用的类型。</p></li><li><p><code>Sign</code> : 表示样本数据是否是有符号位，比如用一字节表示的样本数据，有符号的话表示范围为-128 ~ 127，无符号是0 ~ 255。</p></li><li><p><code>Byte Ordering</code> : 字节序。字节序是<code>little-endian</code>还是<code>big-endian</code>。通常均为<code>little-endian</code>。</p></li><li><p><code>Integer Or Floating Point</code> : 整形或浮点型。大多数格式的PCM样本数据使用整形表示，而在一些对精度要求高的应用方面，使用浮点类型表示PCM样本数据</p></li></ul><h2 id="3-2-AAC"><a href="#3-2-AAC" class="headerlink" title="3.2 AAC"></a>3.2 AAC</h2><blockquote><p><code>AAC(Advanced Audio Coding，高级音频编码)</code>是一种声音数据的文件<code>压缩格式</code>。AAC分为<code>ADIF</code>和<code>ADTS</code>两种文件格式。</p></blockquote><p><strong>1. 什么是ADIF和ADTS？</strong></p><ul><li><p><code>ADIF</code>：<code>Audio Data Interchange Format 音频数据交换格式</code>。<br>这种格式的特征是可以确定的找到这个音频数据的开始，不需进行在音频数据流中间开始的解码<br>即它的解码必须在<code>明确定义的开始处进行</code>。故这种格式常用在<code>磁盘文件</code>中。</p></li><li><p><code>ADTS</code>：<code>Audio Data Transport Stream 音频数据传输流</code>。<br>这种格式的特征是它是一个有同步字的比特流，解码可以在这个流中<code>任何位置开始</code>。</p></li></ul><p><strong>2. ADTS的数据结构</strong></p><p><img src="/img/mv1.11.png"></p><hr><h1 id="4-字幕篇-SSA-ASS"><a href="#4-字幕篇-SSA-ASS" class="headerlink" title="4. 字幕篇(SSA &amp; ASS)"></a>4. 字幕篇(SSA &amp; ASS)</h1><blockquote><p><code>SSA</code>（SubStation Alpha），是由CS Low（亦称Kotus）创建，比传统字幕格式（如<code>SRT</code>）功能更加先进的字幕文件格式。<br>该格式字幕的外挂文件以<code>*.ssa</code>作为后缀。</p></blockquote><blockquote><p><code>ASS</code>（Advanced SubStation Alpha），是一种比<code>SSA</code>更为高级的字幕格式, 其实质版本是<code>SSA v4.00+</code>，它是基于SSA 4.00+编码构建的。<br> ASS的主要变化就是在SSA编写风格的基础上增添更多的特效和指令。<br> 该格式字幕的外挂文件以<code>*.ass</code>作为后缀。</p></blockquote><p><strong>1. SSA&#x2F;ASS的基本结构</strong></p><p><code>SSA/ASS</code>字幕是一种类<code>ini</code>风格纯文本文件；<br>包含五个section：<code>Script Info</code>、<code>v4+ Styles</code>、<code>Events</code>、<code>Fonts</code>、<code>Graphics</code>。</p><ul><li><p><code>Script Info</code>：包含了脚本的头部和总体信息。<code>Script Info</code> 必须是 v4 版本脚本的第一行。</p></li><li><p><code>v4+ Styles</code>：包含了所有样式的定义。每一个被脚本使用的样式都应该在这里定义。<br>ASS 使用 <code>v4+ Styles</code>。</p></li><li><p><code>Events</code>：包含了所有脚本的事件，有字幕、注释、图片、声音、影像和命令。基本上，所有在屏幕上看到的内容都在这一部分。</p></li><li><p><code>Fonts</code>：包含了脚本中内嵌字体的信息。</p></li><li><p><code>Graphics</code>：包含了脚本中内嵌图片的信息。</p></li></ul><p><strong>2. SSA字幕范例</strong></p><p>SSA字幕样本范例如下：</p><p><img src="/img/mv1.12.png"></p><p><a href="https://wiki.multimedia.cx/index.php/SubStation_Alpha">参考链接</a></p><hr><h1 id="5-视频封装格式篇"><a href="#5-视频封装格式篇" class="headerlink" title="5. 视频封装格式篇"></a>5. 视频封装格式篇</h1><h2 id="5-1-FLV"><a href="#5-1-FLV" class="headerlink" title="5.1 FLV"></a>5.1 FLV</h2><p><strong>1. FLV的封装格式</strong></p><p><code>FLV</code>（Flash Video），Adobe公司设计开发的一种流行的流媒体格式，由于其视频文件体积轻巧、封装简单等特点，使其很适合在互联网上进行应用。除了播放视频，在直播时也可以使用。采用FLV格式封装的文件后缀为<code>.flv</code>，格式如下（<code>FLV = FLV Header + Body</code>）</p><p><img src="/img/mv1.13.png"></p><p><strong>2. FLV Header</strong></p><p>Header 部分记录了FLV的类型、版本、流信息、Header 长度等。<br>一般整个Header占用<code>9</code>个字节，大于9个字节则表示头部信息在这基础之上还存在扩展数据。<br>FLV Header 的信息排布如下所示：</p><p><img src="/img/mv1.14.png"></p><p><strong>3. FLV Body</strong></p><p>Body 是由一个个<code>Tag</code>组成的，每个Tag下面有一块<code>4</code>个字节的空间，用来记录这个Tag 的长度。<br>这个后置的<code>PreviousTagSize</code>用于<code>逆向</code>读取处理，表示的是前面的Tag的大小。<br>FLV Body 的信息排布如下：</p><p><img src="/img/mv1.15.png"></p><p><strong>4. FLV Tag</strong></p><p>每个Tag 也是由两部分组成的：<code>Tag Header</code> 和 <code>Tag Data</code>。<br>Tag Header 存放了当前Tag的类型，数据长度、时间戳、时间戳扩展、StreamsID等信息，然后再接着数据区Tag Data。<br>Tag的排布如下：</p><p><img src="/img/mv1.16.png"></p><p><strong>5. Tag Data</strong></p><p>Tag Data分成 <code>Audio</code>，<code>Video</code>，<code>Script</code> 三种。</p><p><strong>5.1 Audio Tag Data</strong></p><p>音频的Tag Data又分为 <code>AudioTagHeader</code> 和 <code>Data</code> 数据区，其排布结构如下图所示：</p><p><img src="/img/mv1.17.png"></p><p><strong>5.2 Video Tag Data</strong></p><ul><li>Video Tag 由<code>一个字节的VideoTagHeader</code> 和 <code>Video数据区</code>部分组成</li></ul><p><img src="/img/mv1.18.png"></p><ul><li>Video数据区部分格式不确定。对于<code>AVC (H.264)</code>编码部分，Video数据区排布如下:</li></ul><p><img src="/img/mv1.19.png"></p><p><strong>5.3 Script Tag Data</strong></p><p><img src="/img/mv1.20.png"></p><h2 id="5-2-TS"><a href="#5-2-TS" class="headerlink" title="5.2 TS"></a>5.2 TS</h2><blockquote><p><code>TS</code>（Transport Stream，<code>传输流</code>），一种常见的视频封装格式，是基于<code>MPEG-2</code>的封装格式（所以也叫<code>MPEG-TS</code>），后缀为<code>.ts</code>。</p></blockquote><p><strong>1. TS的分层结构</strong></p><p>TS文件分为三层，如下所示（可以倒序看更好理解）：</p><ul><li><p><code>TS层</code>（Transport Stream）<br>在PES层基础上加入了数据流识别信息和传输信息。</p></li><li><p><code>PES层</code>（Packet Elemental Stream）<br>在ES层基础上加入时间戳（PTS&#x2F;DTS）等信息。</p></li><li><p><code>ES层</code>（Elementary Stream）<br>压缩编码后的音视频数据。</p></li></ul><p><img src="/img/mv1.21.png"></p><p><strong>2. TS层</strong></p><blockquote><p>ts包大小<code>固定为188字节</code> ，ts层分为三个部分：<code>ts header</code>、<code>adaptation field</code>、<code>payload</code>。</p></blockquote><ul><li><p><code>ts header</code>固定<code>4</code>个字节；</p></li><li><p><code>adaptation field</code>可能存在也可能不存在，主要作用是给不足188字节的数据做<code>填充</code>。</p></li><li><p><code>payload</code>是 <code>PES</code> 数据，或者<code>PAT</code>，<code>PMT</code>等。</p></li></ul><p>◆ ts Header + adaptation field 格式如下：</p><p><img src="/img/mv1.22.png"></p><p><strong>2.1 TS Header</strong></p><ul><li>TS Header格式如下：</li></ul><p><img src="/img/mv1.23.png"></p><ul><li><code>pid</code> 决定了<code>负载内容</code>的类型，主要包括：PAT表，PMT表，视频流，音频流。常用的PID值：</li></ul><table><thead><tr><th>表</th><th>PAT</th><th>CAT</th><th>TSDT</th><th>EIT,ST</th><th>RST,ST</th><th>TDT,TOT,ST</th></tr></thead><tbody><tr><td>PID</td><td>0x0000</td><td>0x0001</td><td>0x0002</td><td>0x0012</td><td>0x0013</td><td>0x0014</td></tr></tbody></table><p><strong>2.2 调整字段</strong></p><p><img src="/img/mv1.24.png"></p><p><strong>2.3 PAT表结构（指明PMT表的PID值）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TS_PAT</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> table_id                 :<span class="number">8</span>  <span class="comment">//固定位0x00，表示该表是PAT</span></span><br><span class="line">    <span class="type">unsigned</span> section_syntax_indicator :<span class="number">1</span>  <span class="comment">//段语法标志，固定为1</span></span><br><span class="line">    <span class="type">unsigned</span> zero                     :<span class="number">1</span>  <span class="comment">//固定为0</span></span><br><span class="line">    <span class="type">unsigned</span> reserved_1               :<span class="number">2</span>  <span class="comment">//第一个保留位</span></span><br><span class="line">    <span class="type">unsigned</span> section_length           :<span class="number">12</span> <span class="comment">//表示这个字节之后有用的字节数，包括CRC_32</span></span><br><span class="line">    <span class="type">unsigned</span> transport_stream_id      :<span class="number">16</span> <span class="comment">//传输流的ID，区别于一个网络中其他多路复用的流</span></span><br><span class="line">    <span class="type">unsigned</span> reserved_2               :<span class="number">2</span>  <span class="comment">//第二个保留位</span></span><br><span class="line">    <span class="type">unsigned</span> version_number           :<span class="number">5</span>  <span class="comment">//表示PAT的版本号</span></span><br><span class="line">    <span class="type">unsigned</span> current_next_indicator   :<span class="number">1</span>  <span class="comment">//表示发送的PAT是当前有效还是下一个有效，为1时代表当前有效</span></span><br><span class="line">    <span class="type">unsigned</span> section_number           :<span class="number">8</span>  <span class="comment">//如果PAT分段传输，那么此值每次递增1</span></span><br><span class="line">    <span class="type">unsigned</span> last_section_number      :<span class="number">8</span>  <span class="comment">//最后一个分段的号码</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="type">unsigned</span> Program_number           :<span class="number">16</span> <span class="comment">//节目号</span></span><br><span class="line">        <span class="type">unsigned</span> Reversed_3               :<span class="number">3</span>  <span class="comment">//保留位</span></span><br><span class="line">        <span class="keyword">if</span>(Program_number == <span class="number">0</span>)</span><br><span class="line">            Network_id                    :<span class="number">13</span> <span class="comment">//网络信息表（NIT）的PID</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Program_MAP_PID               :<span class="number">13</span> <span class="comment">//节目映射表的PID，每个节目都有一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> CRC_32                   :<span class="number">32</span> <span class="comment">//CRC32校检码</span></span><br><span class="line">&#125;TS_PAT</span><br></pre></td></tr></table></figure><p><strong>2.4 PMT表（指明音视频流的PID值）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TS_program_map_section</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> Table_id                    :<span class="number">8</span>  <span class="comment">//标志PSI分段的内容，对于PMT，此值为0x02</span></span><br><span class="line">    <span class="type">unsigned</span> Section_syntax_indicator    :<span class="number">1</span>  <span class="comment">//置为1</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="string">&#x27;0&#x27;</span>                         :<span class="number">1</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">2</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> Section_length              :<span class="number">12</span> <span class="comment">//指明了自此到最后CRC_32的字节数</span></span><br><span class="line">    <span class="type">unsigned</span> Program_number              :<span class="number">16</span> <span class="comment">//指出该节目的节目号，与PAT表对应</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">2</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> Version_number              :<span class="number">5</span>  <span class="comment">//取值0-31，代表当前PMT的版本号</span></span><br><span class="line">    <span class="type">unsigned</span> Current_next_indicator      :<span class="number">1</span>  <span class="comment">//代表当前PMT是否有效</span></span><br><span class="line">    <span class="type">unsigned</span> Section_number              :<span class="number">8</span>  <span class="comment">//给出了当前所处段的数目</span></span><br><span class="line">    <span class="type">unsigned</span> Last_section_number         :<span class="number">8</span>  <span class="comment">//给出了最后一个分段，即分段的最大数目</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">3</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> PCR_PID                     :<span class="number">13</span> <span class="comment">//指示TS包的PCR值，该TS包含有PCR字段</span></span><br><span class="line">    <span class="type">unsigned</span> Reserved                    :<span class="number">4</span>  <span class="comment">//保留位</span></span><br><span class="line">    <span class="type">unsigned</span> Program_info_length         :<span class="number">12</span> <span class="comment">//该字段描述跟随其后对节目信息描述的字节数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">Descriptr</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="type">unsigned</span> Stream_type             :<span class="number">8</span>  <span class="comment">//0x00：保留， 0x01：MPEG1视频，0x02：MPEG2视频，0x03:MPEG1音频，0x04：MPEG2音频，0x05：私有字段，0x06：含有私有数据的PES包 ......</span></span><br><span class="line">        <span class="type">unsigned</span> Reserved                :<span class="number">3</span>  <span class="comment">//保留</span></span><br><span class="line">        <span class="type">unsigned</span> Elementary_PID          :<span class="number">13</span> <span class="comment">//指示TS包的PID，这些TS包含有相同的PID</span></span><br><span class="line">        <span class="type">unsigned</span> Reserved                :<span class="number">4</span>  <span class="comment">//保留</span></span><br><span class="line">        <span class="type">unsigned</span> ES_info_length          :<span class="number">12</span> <span class="comment">//指示跟随其后描述相关节目元素的字节数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N2; j++)</span><br><span class="line">            <span class="built_in">Descriptr</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> CRC_32                      :<span class="number">32</span> <span class="comment">//循环校检位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.5 补充</strong></p><ul><li><p>打包ts流时<code>PAT</code>和<code>PMT</code>表是没有调整字段的，不够的长度直接补<code>0xff</code>即可。</p></li><li><p><code>视频流</code>和<code>音频流</code>都需要加<code>adaptation field</code>，<font color = red>通常加在一个帧的第一个ts包和最后一个ts包里，中间的ts包不加。</font></p></li></ul><p><strong>3. PES 层</strong></p><ul><li><p><code>PES</code>（Packetized Elementary Stream，打包的ES），在 ES 层的基础上加入了时间戳（PTS&#x2F;TDS）等信息。</p></li><li><p>ES数据包比较大，加入PES头时需<code>将ES进行分割</code>，只在<code>第一个分割的ES上加PES头</code>，如下图所示</p></li></ul><p><img src="/img/mv1.25.png"></p><ul><li><p><code>PES packet length</code> — 指示PES 包中跟随该字段最后字节的字节数。0 值指示PES 包长度既未指示也未限定并且仅在这样的PES 包中才被允许，该PES 包的有效载荷由来自传输流包中所包含的视频基本流的字节组成。</p></li><li><p>PES结构如下：</p></li></ul><p><img src="/img/mv1.26.png"></p><ul><li>PES 关键字段说明</li></ul><p><img src="/img/mv1.27.png"></p><p><strong>4. ES 层</strong></p><ul><li><p><code>ES</code>（Elementary Stream，基本码流），就是<code>音视频编码数据流</code>，比如视频<code>H.264</code>，音频<code>AAC</code>。</p></li><li><p><font color = red>一个 ES 流中只包含一种类型的数据（视频，或音频，或字幕）。</font></p></li></ul><p><strong>5. easyice下载链接：</strong></p><p><a href="https://www.easyice.cn/archives/85">easyice</a></p><h2 id="5-3-MP4"><a href="#5-3-MP4" class="headerlink" title="5.3 MP4"></a>5.3 MP4</h2><p><strong>1. MP4（MPEG-4）</strong></p><blockquote><p><code>MP4</code>是一套用于音频、视频信息的<code>压缩编码标准</code>，由国际标准化组织（ISO）和国际电工委员会（IEC）下属的“动态图像专家组”（Moving Picture Experts Group，即MPEG）制定，第一版在1998年10月通过，第二版在1999年12月通过。MPEG-4格式的主要用途在于网上流、光盘、语音发送（视频电话），以及电视广播。</p></blockquote><ul><li>MP4由许多<code>box</code>组成，每个box包含不同的信息，这些box以<code>树形结构</code>的方式组成，<code>box 中可以包含 box</code><br> 如下：</li></ul><p><img src="/img/mv1.28.png"></p><p><strong>2. box</strong></p><p>mp4文件由若干个box组成。下面是box结构的一个示意图：</p><p><img src="/img/mv1.29.png"></p><ul><li><p>box 由 <code>header</code> 和 <code>body</code> 组成<br>header 指明 box 的 size 和 type。<font color = blue>size 是包含 box header 的整个 box 的大小。</font></p></li><li><p><code>box type</code>，通常是4个ASCII码的字符如<code>ftyp</code>、<code>moov</code>等，这些 box type都是已经预定义好的，表示固定的含义。<br>如果是<code>uuid</code>，表示该box为用户自定义扩展类型<br>如果 box type 是未定义的，应该将其忽略。</p></li><li><p>如果 header 中的 size 为<code>1</code>，则表示 box 长度需要更多的bits位来描述，在后面会有一个 8字节的 largesize 用来描述 box 的长度。<br>如果 size 为<code>0</code>，表示该 box 为文件的最后一个box，文件结尾（同样只存在于<code>mdat</code>类型的box中）。</p></li><li><p>box 分为两种，<code>Box</code> 和 <code>Fullbox</code>。FullBox 是 Box 的扩展，Header 中增加了<code>version</code> 和 <code>flags</code>字段。</p></li></ul><p>◆ box 定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">aligned</span>(<span class="number">8</span>) <span class="function"><span class="keyword">class</span> <span class="title">Box</span> <span class="params">(<span class="type">unsigned</span> <span class="type">int</span>(<span class="number">32</span>) boxtype,</span></span></span><br><span class="line"><span class="params"><span class="function">    optional <span class="type">unsigned</span> <span class="type">int</span>(<span class="number">8</span>)[<span class="number">16</span>] extended_type)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> size</span>;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> type </span>= boxtype;</span><br><span class="line">    <span class="keyword">if</span> (size==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function"><span class="type">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> largesize</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size==<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// box extends to end of file</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (boxtype==‘uuid’) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="built_in">int</span>(<span class="number">8</span>)[<span class="number">16</span>] usertype = extended_type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆ FullBox 定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">aligned</span>(<span class="number">8</span>) <span class="function"><span class="keyword">class</span> <span class="title">FullBox</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>(<span class="number">32</span>) boxtype, <span class="type">unsigned</span> <span class="type">int</span>(<span class="number">8</span>) v, bit(<span class="number">24</span>) f)</span></span></span><br><span class="line"><span class="function">extends <span class="title">Box</span><span class="params">(boxtype)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">8</span>)</span> version </span>= v;</span><br><span class="line">    <span class="built_in">bit</span>(<span class="number">24</span>) flags = f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. ISO&#x2F;ICE 14496-12</strong></p><p><img src="/img/mv1.30.png"></p><p><strong>4. MP4分析工具：</strong></p><ul><li><p><a href="https://gpac.github.io/mp4box.js">mp4box.js</a></p></li><li><p><a href="http://www.bento4.com/">bento4</a></p></li><li><p><a href="https://www.greenxf.com/soft/179781.html">mp4info</a></p></li><li><p><a href="https://api.256file.com/download/378144_qtatomviewer.exe">qtauomviewer</a></p></li></ul><hr><h1 id="6-FFmpeg篇"><a href="#6-FFmpeg篇" class="headerlink" title="6. FFmpeg篇"></a>6. FFmpeg篇</h1><h2 id="6-1-安装"><a href="#6-1-安装" class="headerlink" title="6.1 安装"></a>6.1 安装</h2><p><a href="https://github.com/FFmpeg/FFmpeg">FFmpeg源码地址</a></p><p><a href="https://ffmpeg.org/download.html">FFmpeg可执行文件地址</a></p><ul><li><p>ffmpeg.exe：用于音视频<code>转码</code>, 也可以从url&#x2F;现场音频&#x2F;视频源抓取输入源。</p></li><li><p>ffplay.exe：一个非常简单和可移植的媒体播放器，使用<code>FFmpeg库</code>和<code>SDL库</code>。</p></li><li><p>ffprobe.exe：查看多媒体文件的<code>信息</code>。</p></li></ul><h2 id="6-2-ffmpeg-ffplay-ffprobe"><a href="#6-2-ffmpeg-ffplay-ffprobe" class="headerlink" title="6.2 ffmpeg, ffplay, ffprobe"></a>6.2 ffmpeg, ffplay, ffprobe</h2><p><strong>1. ffmpeg.exe</strong></p><ul><li><p>用于音视频<code>转码</code>, 也可以从url&#x2F;现场音频&#x2F;视频源抓取输入源等。一部分ffmpeg常用参数如下（尤其在开发过程中，由于ffmpeg版本不同，ffmpeg参数也有少量出入，建议在命令行窗口输入<code>ffmpeg -h</code>查看本机部署的ffmpeg支持的参数）：</p></li><li><p>ffmpeg 部分参数</p></li></ul><p><img src="/img/mv1.31.png"></p><ul><li><code>ffmpeg -h</code>查看参数如下：</li></ul><p><img src="/img/mv1.32.png"></p><ul><li>ffmpeg 范例</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从视频第3秒开始剪切，持续4秒，并保存文件</span></span><br><span class="line">ffmpeg -ss <span class="number">00</span>:<span class="number">00</span>:<span class="number">03</span> -t <span class="number">00</span>:<span class="number">00</span>:<span class="number">04</span> -i test.mpg -vcodec copy -acodec copy test_cut.mpg</span><br><span class="line"><span class="comment">//test.mpg 裁剪后 生成 test_cut.mpg</span></span><br></pre></td></tr></table></figure><p><strong>2. ffplay</strong></p><ul><li>一个非常简单和可移植的媒体播放器，使用<code>FFmpeg库和SDL库</code>。ffplay参数如下：</li></ul><p><img src="/img/mv1.33.png"></p><p>ffplay.exe范例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//播放视频</span></span><br><span class="line">ffplay -i test.mpg</span><br></pre></td></tr></table></figure><p><strong>3. ffprobe.exe</strong></p><ul><li>查看多媒体文件的信息。ffprobe参数如下：</li></ul><p><img src="/img/mv1.34.png"></p><p>ffprobe.exe范例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看视频文件的音频流和视频流信息</span></span><br><span class="line">ffprobe test.mpg</span><br></pre></td></tr></table></figure><h2 id="6-3-解码"><a href="#6-3-解码" class="headerlink" title="6.3 解码"></a>6.3 解码</h2><p>正式进入FFmpeg代码的学习。结合代码的形式介绍<code>FFmpeg的解码流程</code>和<code>SDL2播放流程</code>。</p><p><strong>1. 环境</strong></p><p><a href="https://github.com/BtbN/FFmpeg-Builds/releases"> FFmpeg 开发库下载地址(shared)</a></p><p><a href="https://www.libsdl.org/download-2.0.php">SDL 开发库下载地址(选择Development Libraries VC.zip) </a></p><p><strong>2. 音视频解码</strong></p><p>音视频<code>解码</code>流程，以及相关的 <code>ffmpeg</code> 代码如下</p><p><img src="/img/mv1.35.png"></p><p><strong>3. 音视频播放</strong></p><p>Windows平台使用<code>SDL2</code>来<code>播放</code>音视频，调用流程及相关代码如下</p><p><img src="/img/mv1.36.png"></p><p><strong>4. 视频解码代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file:output_log.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUF_LEN 1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g_log_debug_flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> g_log_info_flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> g_log_warnning_flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> g_log_error_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">LOG_LEVEL</span></span><br><span class="line">  &#123;</span><br><span class="line">    LOG_DEBUG,</span><br><span class="line">    LOG_INFO,</span><br><span class="line">    LOG_WARNING,</span><br><span class="line">    LOG_ERROR</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_log_flag</span><span class="params">(<span class="type">int</span> log_debug_flag, <span class="type">int</span> log_info_flag, <span class="type">int</span> log_warnning_flag, </span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">int</span> log_error_flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  g_log_debug_flag = log_debug_flag;</span><br><span class="line">  g_log_info_flag = log_info_flag;</span><br><span class="line">  g_log_warnning_flag = log_warnning_flag;</span><br><span class="line">  g_log_error_flag = log_error_flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output_log</span><span class="params">(LOG_LEVEL log_level, <span class="type">const</span> <span class="type">char</span>* fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  va_list args;</span><br><span class="line">  <span class="built_in">va_start</span>(args, fmt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> buf[MAX_BUF_LEN] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="built_in">vsnprintf</span>(buf, MAX_BUF_LEN - <span class="number">1</span>, fmt, args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (log_level)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">case</span> LOG_DEBUG:</span><br><span class="line">    <span class="keyword">if</span> (g_log_debug_flag)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;[Log-Debug]:%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> LOG_INFO:</span><br><span class="line">    <span class="keyword">if</span> (g_log_info_flag)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;[Log-Info]:%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> LOG_WARNING:</span><br><span class="line">    <span class="keyword">if</span> (g_log_warnning_flag)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;[Log-Warnning]:%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> LOG_ERROR:</span><br><span class="line">    <span class="keyword">if</span> (g_log_error_flag)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;[Log-Error]:%s\n&quot;</span>, buf);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">va_end</span>(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file:vPlayer_sdl2.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vPlayer_sdl2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;output_log.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STDC_CONSTANT_MACROS</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> g_frame_rate = <span class="number">1</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> g_sfp_refresh_thread_exit = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> g_sfp_refresh_thread_pause = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SFM_REFRESH_EVENT (SDL_USEREVENT+1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SFM_BREAK_EVENT (SDL_USEREVENT+2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">FFmpeg_V_Param_T</span></span><br><span class="line">&#123;</span><br><span class="line">  AVFormatContext *pFormatCtx;</span><br><span class="line">  AVCodecContext *pCodecCtx;</span><br><span class="line">  SwsContext *pSwsCtx;</span><br><span class="line">  <span class="type">int</span> video_index;</span><br><span class="line">&#125;FFmpeg_V_Param;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SDL_Param_T</span></span><br><span class="line">&#123;</span><br><span class="line">  SDL_Window *p_sdl_window;</span><br><span class="line">  SDL_Renderer *p_sdl_renderer;</span><br><span class="line">  SDL_Texture *p_sdl_texture;</span><br><span class="line">  SDL_Rect sdl_rect;</span><br><span class="line">  SDL_Thread *p_sdl_thread;</span><br><span class="line">&#125;SDL_Param;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  return value:zero(success) non-zero(failure)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init_ffmpeg</span><span class="params">(FFmpeg_V_Param* p_ffmpeg_param, <span class="type">char</span>* filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//init FFmpeg_V_Param</span></span><br><span class="line">  p_ffmpeg_param-&gt;pFormatCtx = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line">  <span class="type">const</span> AVCodec *pCodec = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//do global initialization of network libraries</span></span><br><span class="line">  <span class="built_in">avformat_network_init</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//open input stream</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">avformat_open_input</span>(&amp;(p_ffmpeg_param-&gt;pFormatCtx), filePath, <span class="literal">NULL</span>, <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;avformat_open_input error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//find stream info</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">avformat_find_stream_info</span>(p_ffmpeg_param-&gt;pFormatCtx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;avformat_find_stream_info error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//get video pCodecParms, codec and frame rate</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p_ffmpeg_param-&gt;pFormatCtx-&gt;nb_streams; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    AVStream *pStream = p_ffmpeg_param-&gt;pFormatCtx-&gt;streams[i];</span><br><span class="line">    <span class="keyword">if</span> (pStream-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">    &#123;</span><br><span class="line">      pCodec = <span class="built_in">avcodec_find_decoder</span>(pStream-&gt;codecpar-&gt;codec_id);</span><br><span class="line">      p_ffmpeg_param-&gt;pCodecCtx = <span class="built_in">avcodec_alloc_context3</span>(pCodec);</span><br><span class="line">      <span class="built_in">avcodec_parameters_to_context</span>(p_ffmpeg_param-&gt;pCodecCtx, pStream-&gt;codecpar);</span><br><span class="line">      g_frame_rate = pStream-&gt;avg_frame_rate.num / pStream-&gt;avg_frame_rate.den;</span><br><span class="line">      p_ffmpeg_param-&gt;video_index = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!p_ffmpeg_param-&gt;pCodecCtx)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;could not find video codecCtx&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//open codec</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">avcodec_open2</span>(p_ffmpeg_param-&gt;pCodecCtx, pCodec, <span class="literal">NULL</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;avcodec_open2 error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//get scale pixelformat context</span></span><br><span class="line">  p_ffmpeg_param-&gt;pSwsCtx = <span class="built_in">sws_getContext</span>(p_ffmpeg_param-&gt;pCodecCtx-&gt;width,</span><br><span class="line">    p_ffmpeg_param-&gt;pCodecCtx-&gt;height, p_ffmpeg_param-&gt;pCodecCtx-&gt;pix_fmt,</span><br><span class="line">    p_ffmpeg_param-&gt;pCodecCtx-&gt;width, p_ffmpeg_param-&gt;pCodecCtx-&gt;height,</span><br><span class="line">    AV_PIX_FMT_YUV420P,  SWS_BICUBIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">av_dump_format</span>(p_ffmpeg_param-&gt;pFormatCtx, p_ffmpeg_param-&gt;video_index, filePath, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  return value:zero(success) non-zero(failure)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">release_ffmpeg</span><span class="params">(FFmpeg_V_Param* p_ffmpeg_param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!p_ffmpeg_param)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//realse scale pixelformat context</span></span><br><span class="line">  <span class="keyword">if</span> (p_ffmpeg_param-&gt;pSwsCtx)</span><br><span class="line">    <span class="built_in">sws_freeContext</span>(p_ffmpeg_param-&gt;pSwsCtx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//close codec</span></span><br><span class="line">  <span class="keyword">if</span> (p_ffmpeg_param-&gt;pCodecCtx)</span><br><span class="line">    <span class="built_in">avcodec_close</span>(p_ffmpeg_param-&gt;pCodecCtx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//close input stream</span></span><br><span class="line">  <span class="keyword">if</span> (p_ffmpeg_param-&gt;pFormatCtx)</span><br><span class="line">    <span class="built_in">avformat_close_input</span>(&amp;(p_ffmpeg_param-&gt;pFormatCtx));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//free AVCodecContext</span></span><br><span class="line">  <span class="keyword">if</span> (p_ffmpeg_param-&gt;pCodecCtx)</span><br><span class="line">    <span class="built_in">avcodec_free_context</span>(&amp;(p_ffmpeg_param-&gt;pCodecCtx));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//free AVFormatContext</span></span><br><span class="line">  <span class="keyword">if</span> (p_ffmpeg_param-&gt;pFormatCtx)</span><br><span class="line">    <span class="built_in">avformat_free_context</span>(p_ffmpeg_param-&gt;pFormatCtx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//free FFmpeg_V_Param</span></span><br><span class="line">  <span class="keyword">delete</span> p_ffmpeg_param;</span><br><span class="line">  p_ffmpeg_param = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sfp_refresh_thread</span><span class="params">(<span class="type">void</span>* opaque)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  g_sfp_refresh_thread_exit = <span class="number">0</span>;</span><br><span class="line">  g_sfp_refresh_thread_pause = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!g_sfp_refresh_thread_exit)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!g_sfp_refresh_thread_pause)</span><br><span class="line">    &#123;</span><br><span class="line">      SDL_Event sdl_event;</span><br><span class="line">      sdl_event.type = SFM_REFRESH_EVENT;</span><br><span class="line">      <span class="built_in">SDL_PushEvent</span>(&amp;sdl_event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SDL_Delay</span>(<span class="number">1000</span> / g_frame_rate);</span><br><span class="line">  &#125;</span><br><span class="line">  g_sfp_refresh_thread_exit = <span class="number">0</span>;</span><br><span class="line">  g_sfp_refresh_thread_pause = <span class="number">0</span>;</span><br><span class="line">  SDL_Event sdl_event;</span><br><span class="line">  sdl_event.type = SFM_BREAK_EVENT;</span><br><span class="line">  <span class="built_in">SDL_PushEvent</span>(&amp;sdl_event);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">init_sdl2</span><span class="params">(SDL_Param_T *p_sdl_param, <span class="type">int</span> screen_w, <span class="type">int</span> screen_h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">SDL_Init</span>(SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_TIMER))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;SDL_Init error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  p_sdl_param-&gt;p_sdl_window = <span class="built_in">SDL_CreateWindow</span>(<span class="string">&quot;vPlayer_sdl&quot;</span>, SDL_WINDOWPOS_UNDEFINED,</span><br><span class="line">    SDL_WINDOWPOS_UNDEFINED, screen_w, screen_h, SDL_WINDOW_OPENGL);</span><br><span class="line">  <span class="keyword">if</span> (!p_sdl_param-&gt;p_sdl_window)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;SDL_CreateWindow error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  p_sdl_param-&gt;p_sdl_renderer = <span class="built_in">SDL_CreateRenderer</span>(p_sdl_param-&gt;p_sdl_window, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">  p_sdl_param-&gt;p_sdl_texture = <span class="built_in">SDL_CreateTexture</span>(p_sdl_param-&gt;p_sdl_renderer, SDL_PIXELFORMAT_IYUV,</span><br><span class="line">    SDL_TEXTUREACCESS_STREAMING, screen_w, screen_h);</span><br><span class="line">  p_sdl_param-&gt;sdl_rect.x = <span class="number">0</span>;</span><br><span class="line">  p_sdl_param-&gt;sdl_rect.y = <span class="number">0</span>;</span><br><span class="line">  p_sdl_param-&gt;sdl_rect.w = screen_w;</span><br><span class="line">  p_sdl_param-&gt;sdl_rect.h = screen_h;</span><br><span class="line">  p_sdl_param-&gt;p_sdl_thread = <span class="built_in">SDL_CreateThread</span>(sfp_refresh_thread, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">release_sdl2</span><span class="params">(SDL_Param_T *p_sdl_param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">SDL_DestroyTexture</span>(p_sdl_param-&gt;p_sdl_texture);</span><br><span class="line">  <span class="built_in">SDL_DestroyRenderer</span>(p_sdl_param-&gt;p_sdl_renderer);</span><br><span class="line">  <span class="built_in">SDL_DestroyWindow</span>(p_sdl_param-&gt;p_sdl_window);</span><br><span class="line">  <span class="built_in">SDL_Quit</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">vPlayer_sdl2</span><span class="params">(<span class="type">char</span>* filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//ffmpeg param</span></span><br><span class="line">  FFmpeg_V_Param *p_ffmpeg_param = <span class="literal">NULL</span>;</span><br><span class="line">  AVPacket *packet = <span class="literal">NULL</span>;</span><br><span class="line">  AVFrame *pFrame = <span class="literal">NULL</span>, *pFrameYUV = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">int</span> out_buffer_size = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>* out_buffer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//sdl param</span></span><br><span class="line">  SDL_Param_T *p_sdl_param = <span class="literal">NULL</span>;</span><br><span class="line">  SDL_Event sdl_event;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//init ffmpeg</span></span><br><span class="line">  p_ffmpeg_param = <span class="keyword">new</span> <span class="built_in">FFmpeg_V_Param</span>();</span><br><span class="line">  <span class="built_in">memset</span>(p_ffmpeg_param, <span class="number">0</span>, <span class="built_in">sizeof</span>(FFmpeg_V_Param));</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">init_ffmpeg</span>(p_ffmpeg_param, filePath))</span><br><span class="line">  &#123;</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line">  packet = <span class="built_in">av_packet_alloc</span>();</span><br><span class="line">  pFrame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">  pFrameYUV = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">  out_buffer_size = <span class="built_in">av_image_get_buffer_size</span>(AV_PIX_FMT_YUV420P,</span><br><span class="line">    p_ffmpeg_param-&gt;pCodecCtx-&gt;width, p_ffmpeg_param-&gt;pCodecCtx-&gt;height, <span class="number">1</span>);</span><br><span class="line">  out_buffer = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="built_in">av_malloc</span>(out_buffer_size);</span><br><span class="line">  <span class="built_in">av_image_fill_arrays</span>(pFrameYUV-&gt;data, pFrameYUV-&gt;linesize, out_buffer,</span><br><span class="line">    p_ffmpeg_param-&gt;pCodecCtx-&gt;pix_fmt, </span><br><span class="line">    p_ffmpeg_param-&gt;pCodecCtx-&gt;width, p_ffmpeg_param-&gt;pCodecCtx-&gt;height, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">//init sdl2</span></span><br><span class="line">  p_sdl_param = <span class="keyword">new</span> <span class="built_in">SDL_Param_T</span>();</span><br><span class="line">  <span class="built_in">memset</span>(p_sdl_param, <span class="number">0</span>, <span class="built_in">sizeof</span>(SDL_Param_T));</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">init_sdl2</span>(p_sdl_param, p_ffmpeg_param-&gt;pCodecCtx-&gt;width, p_ffmpeg_param-&gt;pCodecCtx-&gt;height))</span><br><span class="line">  &#123;</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//demuxing and show</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> temp_ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">SDL_WaitEvent</span>(&amp;sdl_event);</span><br><span class="line">    <span class="keyword">if</span> (sdl_event.type == SFM_REFRESH_EVENT)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">av_read_frame</span>(p_ffmpeg_param-&gt;pFormatCtx, packet) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          g_sfp_refresh_thread_exit = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == p_ffmpeg_param-&gt;video_index)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">avcodec_send_packet</span>(p_ffmpeg_param-&gt;pCodecCtx, packet))</span><br><span class="line">        g_sfp_refresh_thread_exit = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        temp_ret = <span class="built_in">avcodec_receive_frame</span>(p_ffmpeg_param-&gt;pCodecCtx, pFrame);</span><br><span class="line">        <span class="keyword">if</span> (temp_ret == AVERROR_EOF)</span><br><span class="line">        &#123;</span><br><span class="line">          g_sfp_refresh_thread_exit = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp_ret == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">sws_scale</span>(p_ffmpeg_param-&gt;pSwsCtx, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* <span class="type">const</span>*)pFrame-&gt;data,</span><br><span class="line">            pFrame-&gt;linesize, <span class="number">0</span>, p_ffmpeg_param-&gt;pCodecCtx-&gt;height, pFrameYUV-&gt;data,</span><br><span class="line">            pFrameYUV-&gt;linesize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="built_in">SDL_UpdateTexture</span>(p_sdl_param-&gt;p_sdl_texture, &amp;(p_sdl_param-&gt;sdl_rect),</span><br><span class="line">            pFrameYUV-&gt;data[<span class="number">0</span>], pFrameYUV-&gt;linesize[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="built_in">SDL_RenderClear</span>(p_sdl_param-&gt;p_sdl_renderer);</span><br><span class="line">          <span class="built_in">SDL_RenderCopy</span>(p_sdl_param-&gt;p_sdl_renderer, p_sdl_param-&gt;p_sdl_texture,</span><br><span class="line">            <span class="literal">NULL</span>, &amp;(p_sdl_param-&gt;sdl_rect));</span><br><span class="line">          <span class="built_in">SDL_RenderPresent</span>(p_sdl_param-&gt;p_sdl_renderer);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (temp_ret != <span class="built_in">AVERROR</span>(EAGAIN));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//av_packet_unref(packet);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sdl_event.type == SFM_BREAK_EVENT)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sdl_event.type == SDL_KEYDOWN)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (sdl_event.key.keysym.sym == SDLK_SPACE)</span><br><span class="line">        g_sfp_refresh_thread_pause = !g_sfp_refresh_thread_pause;</span><br><span class="line">      <span class="keyword">if</span> (sdl_event.key.keysym.sym == SDLK_q)</span><br><span class="line">        g_sfp_refresh_thread_exit = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sdl_event.type == SDL_QUIT)</span><br><span class="line">    &#123;</span><br><span class="line">      g_sfp_refresh_thread_exit = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">  <span class="built_in">release_ffmpeg</span>(p_ffmpeg_param);</span><br><span class="line">  <span class="built_in">av_packet_free</span>(&amp;packet);</span><br><span class="line">  <span class="built_in">av_frame_free</span>(&amp;pFrame);</span><br><span class="line">  <span class="built_in">av_frame_free</span>(&amp;pFrameYUV);</span><br><span class="line">  <span class="built_in">release_sdl2</span>(p_sdl_param);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-编码"><a href="#6-4-编码" class="headerlink" title="6.4 编码"></a>6.4 编码</h2><p>日常开发过程中，我们涉及到的<code>主要是解码</code>相关内容，但FFmpeg同样具有<code>编码</code>的能力。简单介绍下FFmpeg编码的内容。</p><p><strong>1. FFmpeg编码视频</strong></p><p>使用FFmpeg库编码<code>YUV</code>，代码及调用逻辑如下</p><p><img src="/img/mv1.37.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file:encode_yuv_to_h264.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;encode_yuv_to_h264.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;output_log.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define __STDC_CONSTANT_MACROS</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">encode</span><span class="params">(AVCodecContext* pCodecCtx, AVFrame *pFrame, AVPacket* pPacket, FILE* p_output_f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> ret;</span><br><span class="line">  ret = <span class="built_in">avcodec_send_frame</span>(pCodecCtx, pFrame);</span><br><span class="line">  <span class="keyword">while</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ret = <span class="built_in">avcodec_receive_packet</span>(pCodecCtx, pPacket);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="built_in">AVERROR</span>(EAGAIN) || ret == AVERROR_EOF)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(pPacket-&gt;data, <span class="number">1</span>, pPacket-&gt;size, p_output_f);</span><br><span class="line">    <span class="built_in">av_packet_unref</span>(pPacket);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//codec_name=&quot;libx264&quot;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">encode_yuv_to_h264</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* output_filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  AVCodecContext* pCodecCtx = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">const</span> AVCodec* pCodec = <span class="literal">NULL</span>;</span><br><span class="line">  AVPacket* pPacket = <span class="literal">NULL</span>;</span><br><span class="line">  AVFrame* pFrame = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">char</span> codec_name[] = <span class="string">&quot;libx264&quot;</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> endcode[] = &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x7b</span> &#125;;</span><br><span class="line">  FILE* p_output_f = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">int</span> i, x, y;</span><br><span class="line">  <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  pCodec = <span class="built_in">avcodec_find_encoder_by_name</span>(codec_name);</span><br><span class="line">  <span class="comment">//pCodec = avcodec_find_encoder(AV_CODEC_ID_H264);</span></span><br><span class="line">  <span class="keyword">if</span> (!pCodec)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;avcodec_find_encoder_by_name error, codec_name=%s&quot;</span>, codec_name);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;    </span><br><span class="line">  pCodecCtx = <span class="built_in">avcodec_alloc_context3</span>(pCodec);</span><br><span class="line">  <span class="keyword">if</span> (!pCodecCtx)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;avcodec_alloc_context3 error, pCodecCtx is NULL&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line">  pPacket = <span class="built_in">av_packet_alloc</span>();</span><br><span class="line">  pFrame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//set AVCodecContext parameters</span></span><br><span class="line">  pCodecCtx-&gt;bit_rate = <span class="number">400000</span>;</span><br><span class="line">  pCodecCtx-&gt;width = <span class="number">352</span>;</span><br><span class="line">  pCodecCtx-&gt;height = <span class="number">288</span>;</span><br><span class="line">  pCodecCtx-&gt;time_base = &#123; <span class="number">1</span>, <span class="number">25</span> &#125;;</span><br><span class="line">  pCodecCtx-&gt;framerate = &#123; <span class="number">25</span>, <span class="number">1</span> &#125;;</span><br><span class="line">  <span class="comment">/* emit one intra frame every ten frames</span></span><br><span class="line"><span class="comment">   * check frame pict_type before passing frame</span></span><br><span class="line"><span class="comment">   * to encoder, if frame-&gt;pict_type is AV_PICTURE_TYPE_I</span></span><br><span class="line"><span class="comment">   * then gop_size is ignored and the output of encoder</span></span><br><span class="line"><span class="comment">   * will always be I frame irrespective to gop_size</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  pCodecCtx-&gt;gop_size = <span class="number">10</span>;</span><br><span class="line">  pCodecCtx-&gt;max_b_frames = <span class="number">1</span>;</span><br><span class="line">  pCodecCtx-&gt;pix_fmt = AV_PIX_FMT_YUV420P;</span><br><span class="line">  <span class="keyword">if</span> (pCodec-&gt;id == AV_CODEC_ID_H264)</span><br><span class="line">    <span class="built_in">av_opt_set</span>(pCodecCtx-&gt;priv_data, <span class="string">&quot;preset&quot;</span>, <span class="string">&quot;slow&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//open codec</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">avcodec_open2</span>(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  pFrame-&gt;format = pCodecCtx-&gt;pix_fmt;</span><br><span class="line">  pFrame-&gt;width = pCodecCtx-&gt;width;</span><br><span class="line">  pFrame-&gt;height = pCodecCtx-&gt;height;</span><br><span class="line">  <span class="comment">//Allocate new buffer(s) for audio or video data.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">av_frame_get_buffer</span>(pFrame, <span class="number">32</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;av_frame_get_buffer error&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//open output_file</span></span><br><span class="line">  <span class="built_in">fopen_s</span>(&amp;p_output_f, output_filePath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!p_output_f)</span><br><span class="line">  &#123;</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//encode 5 seconds of video</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">25</span> * <span class="number">5</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//make sure the frame data is writeable</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">av_frame_is_writable</span>(pFrame) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ret = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Y</span></span><br><span class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; pCodecCtx-&gt;height; y++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; pCodecCtx-&gt;width; x++)</span><br><span class="line">      &#123;</span><br><span class="line">        pFrame-&gt;data[<span class="number">0</span>][y*pFrame-&gt;linesize[<span class="number">0</span>] + x] = x + y + i * <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Y and V</span></span><br><span class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; pCodecCtx-&gt;height / <span class="number">2</span>; y++) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; pCodecCtx-&gt;width / <span class="number">2</span>; x++) </span><br><span class="line">      &#123;</span><br><span class="line">        pFrame-&gt;data[<span class="number">1</span>][y * pFrame-&gt;linesize[<span class="number">1</span>] + x] = <span class="number">128</span> + y + i * <span class="number">2</span>;</span><br><span class="line">        pFrame-&gt;data[<span class="number">2</span>][y * pFrame-&gt;linesize[<span class="number">2</span>] + x] = <span class="number">64</span> + x + i * <span class="number">5</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pFrame-&gt;pts = i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//encode this img</span></span><br><span class="line">    <span class="built_in">encode</span>(pCodecCtx, pFrame, pPacket, p_output_f);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//flush the encoder</span></span><br><span class="line">  <span class="built_in">encode</span>(pCodecCtx, <span class="literal">NULL</span>, pPacket, p_output_f);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//add sequence end code to have a real MPEG file</span></span><br><span class="line">  <span class="built_in">fwrite</span>(endcode, <span class="number">1</span>, <span class="built_in">sizeof</span>(endcode), p_output_f);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fclose</span>(p_output_f);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">  <span class="keyword">if</span> (pCodecCtx)</span><br><span class="line">    <span class="built_in">avcodec_free_context</span>(&amp;pCodecCtx);</span><br><span class="line">  <span class="keyword">if</span> (pPacket)</span><br><span class="line">    <span class="built_in">av_packet_free</span>(&amp;pPacket);</span><br><span class="line">  <span class="keyword">if</span> (pFrame)</span><br><span class="line">    <span class="built_in">av_frame_free</span>(&amp;pFrame);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;=============== encode_yuv_to_h264 done ===============\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. FFmpeg编码音频</strong></p><p>使用FFmpeg库编码<code>PCM</code>，代码及调用逻辑如下</p><p><img src="/img/mv1.38.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file:encode_pcm_to_pm2.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;encode_pcm_to_mp2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;output_log.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/channel_layout.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/common.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/frame.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/samplefmt.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check that a given sample format is supported by the encoder */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">check_sample_fmt</span><span class="params">(<span class="type">const</span> AVCodec *pCodec, <span class="keyword">enum</span> AVSampleFormat sample_fmt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="keyword">enum</span> <span class="title class_">AVSampleFormat</span> *p = pCodec-&gt;sample_fmts;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (*p != AV_SAMPLE_FMT_NONE) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (*p == sample_fmt)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* just pick the highest supported samplerate */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">select_sample_rate</span><span class="params">(<span class="type">const</span> AVCodec *pCodec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> *p;</span><br><span class="line">  <span class="type">int</span> best_samplerate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!pCodec-&gt;supported_samplerates)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">44100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  p = pCodec-&gt;supported_samplerates; <span class="comment">//&lt; array of supported audio samplerates, or NULL if unknown, array is terminated by 0</span></span><br><span class="line">  <span class="keyword">while</span> (*p)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!best_samplerate || <span class="built_in">abs</span>(<span class="number">44100</span> - *p) &lt; <span class="built_in">abs</span>(<span class="number">44100</span> - best_samplerate))</span><br><span class="line">      best_samplerate = *p;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> best_samplerate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* select layout with the highest channel count */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">select_channel_layout</span><span class="params">(<span class="type">const</span> AVCodec *codec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">uint64_t</span> *p;</span><br><span class="line">  <span class="type">uint64_t</span> best_ch_layout = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> best_nb_channels = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!codec-&gt;channel_layouts)</span><br><span class="line">    <span class="keyword">return</span> AV_CH_LAYOUT_STEREO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  p = codec-&gt;channel_layouts; <span class="comment">//&lt; array of support channel layouts, or NULL if unknown. array is terminated by 0</span></span><br><span class="line">  <span class="keyword">while</span> (*p)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> nb_channels = <span class="built_in">av_get_channel_layout_nb_channels</span>(*p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nb_channels &gt; best_nb_channels) </span><br><span class="line">    &#123;</span><br><span class="line">      best_ch_layout = *p;</span><br><span class="line">      best_nb_channels = nb_channels;</span><br><span class="line">    &#125;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> best_ch_layout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">encode</span><span class="params">(AVCodecContext* pCodecCtx, AVFrame *pFrame, AVPacket* pPacket, FILE* p_output_f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> ret;</span><br><span class="line">  ret = <span class="built_in">avcodec_send_frame</span>(pCodecCtx, pFrame);</span><br><span class="line">  <span class="keyword">while</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ret = <span class="built_in">avcodec_receive_packet</span>(pCodecCtx, pPacket);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="built_in">AVERROR</span>(EAGAIN) || ret == AVERROR_EOF)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">fwrite</span>(pPacket-&gt;data, <span class="number">1</span>, pPacket-&gt;size, p_output_f);</span><br><span class="line">    <span class="built_in">av_packet_unref</span>(pPacket);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">encode_pcm_to_mp2</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* output_filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  AVCodecContext* pCodecCtx = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">const</span> AVCodec* pCodec = <span class="literal">NULL</span>;</span><br><span class="line">  AVPacket* pPacket = <span class="literal">NULL</span>;</span><br><span class="line">  AVFrame* pFrame = <span class="literal">NULL</span>;</span><br><span class="line">  FILE* p_output_f = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">int</span> i, j, k, ret = <span class="number">0</span>;</span><br><span class="line">  <span class="type">uint16_t</span> *samples;</span><br><span class="line">  <span class="type">float</span> t, tincr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  pCodec = <span class="built_in">avcodec_find_encoder</span>(AV_CODEC_ID_MP2);</span><br><span class="line">  <span class="keyword">if</span> (!pCodec)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;avcodec_find_encoder(AV_CODEC_ID_MP2) error&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line">  pCodecCtx = <span class="built_in">avcodec_alloc_context3</span>(pCodec);</span><br><span class="line">  pPacket = <span class="built_in">av_packet_alloc</span>();</span><br><span class="line">  <span class="keyword">if</span> (!pPacket)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;av_packet_alloc error&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line">  pFrame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">  <span class="keyword">if</span> (!pFrame)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;av_frame_alloc error&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//set AVCodecContext parameters</span></span><br><span class="line">  pCodecCtx-&gt;bit_rate = <span class="number">64000</span>;</span><br><span class="line">  <span class="comment">/* check that the encoder supports s16 pcm input */</span></span><br><span class="line">  pCodecCtx-&gt;sample_fmt = AV_SAMPLE_FMT_S16;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">check_sample_fmt</span>(pCodec, pCodecCtx-&gt;sample_fmt))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;check_sample_fmt error&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* select other audio parameters supported by the encoder */</span></span><br><span class="line">  pCodecCtx-&gt;sample_rate = <span class="built_in">select_sample_rate</span>(pCodec);</span><br><span class="line">  pCodecCtx-&gt;channel_layout = <span class="built_in">select_channel_layout</span>(pCodec);</span><br><span class="line">  pCodecCtx-&gt;channels = <span class="built_in">av_get_channel_layout_nb_channels</span>(pCodecCtx-&gt;channel_layout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//open codec</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">avcodec_open2</span>(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//set AVFrame parameters</span></span><br><span class="line">  pFrame-&gt;nb_samples = pCodecCtx-&gt;frame_size;</span><br><span class="line">  pFrame-&gt;format = pCodecCtx-&gt;sample_fmt;</span><br><span class="line">  pFrame-&gt;channel_layout = pCodecCtx-&gt;channel_layout;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">av_frame_get_buffer</span>(pFrame, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;av_frame_get_buffer error&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fopen_s</span>(&amp;p_output_f, output_filepath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!p_output_f)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;fopen_s error&quot;</span>);</span><br><span class="line">    ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//encode a single tone sound</span></span><br><span class="line">  t = <span class="number">0</span>;</span><br><span class="line">  tincr = <span class="number">2</span> * M_PI * <span class="number">440.0</span> / pCodecCtx-&gt;sample_rate;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* make sure the frame is writable -- makes a copy if the encoder</span></span><br><span class="line"><span class="comment">    * kept a reference internally */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">av_frame_make_writable</span>(pFrame) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">output_log</span>(LOG_ERROR, <span class="string">&quot;av_frame_make_writable error&quot;</span>);</span><br><span class="line">      ret = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">    samples = (<span class="type">uint16_t</span>*)pFrame-&gt;data[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; pCodecCtx-&gt;frame_size; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      samples[<span class="number">2</span> * j] = (<span class="type">int</span>)(<span class="built_in">sin</span>(t) * <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; pCodecCtx-&gt;channels; k++)</span><br><span class="line">      &#123;</span><br><span class="line">        samples[<span class="number">2</span> * j + k] = samples[<span class="number">2</span> * j];</span><br><span class="line">      &#125;</span><br><span class="line">      t += tincr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">encode</span>(pCodecCtx, pFrame, pPacket, p_output_f);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//flush the encoder </span></span><br><span class="line">  <span class="built_in">encode</span>(pCodecCtx, <span class="literal">NULL</span>, pPacket, p_output_f);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fclose</span>(p_output_f);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">  <span class="keyword">if</span> (pCodecCtx)</span><br><span class="line">    <span class="built_in">avcodec_free_context</span>(&amp;pCodecCtx);</span><br><span class="line">  <span class="keyword">if</span> (pPacket)</span><br><span class="line">    <span class="built_in">av_packet_free</span>(&amp;pPacket);</span><br><span class="line">  <span class="keyword">if</span> (pFrame)</span><br><span class="line">    <span class="built_in">av_frame_free</span>(&amp;pFrame);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;=============== encode_pcm_to_mp2 done ===============\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5-转码"><a href="#6-5-转码" class="headerlink" title="6.5 转码"></a>6.5 转码</h2><p>转码比较好理解，就是将<code>解码和编码结合</code>起来，过程为：<code>解封装-&gt;解码-&gt;编码-&gt;封装</code>。逻辑如下：</p><ul><li><p>解封装：将音视频文件的封装格式去掉，<code>获取视频流（H.264）和音频流（AAC）</code></p></li><li><p>解码：将视频流<code>解码成原始图像数据</code>（YUV），将音频流<code>解码成原始音频数据</code>（PCM）</p></li><li><p>编码：将原始图像（YUV）进行<code>编码</code>（MPG2），将音频流进行<code>编码</code>（MP3）</p></li><li><p>封装：将视频流和音频流封装成视频文件</p></li></ul><p><img src="/img/mv1.39.png"></p><h2 id="6-6-ffmpeg-结构体分析"><a href="#6-6-ffmpeg-结构体分析" class="headerlink" title="6.6 ffmpeg 结构体分析"></a>6.6 ffmpeg 结构体分析</h2><p>知道了如何通过调用FFmpeg代码来进行解码和编码，知其然还要知其所以然<br>这篇文章分析下FFmpeg编解码过程中主要的结构体，通过对这些结构体的分析，可以更好的<code>理解FFmpeg的编解码过程。</code></p><p><strong>1. FFmpeg结构体分析</strong></p><p>总结FFmpeg结构体主要分为三个层次：<br><code>协议层</code>（AVIOContext）、<code>封装层</code>（AVInputFormat）、<code>解码层</code>（AVStream）</p><p><img src="/img/mv1.40.png"></p><p><strong>2. FFmpeg编解码关键结构体</strong></p><p>按照FFmpeg编解码时代码的调用过程，总结八个关键结构体。<br>按照编解码调用顺序介绍如下：</p><p><strong>2.1 AVFormatContext</strong> ：描述媒体文件或媒体流的构成和基本信息，贯穿ffmpeg使用<code>整个流程</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AVInputFormat *iformat、AVOutputFormat *oformat <span class="comment">//输入或者输出流的格式（只能存在一个）(封装层)</span></span><br><span class="line">AVIOContext *pb <span class="comment">//管理输入输出数据   (协议层)     </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> nb_streams <span class="comment">//音视频流的个数</span></span><br><span class="line">AVStream **streams <span class="comment">//音视频流       (解码层) </span></span><br><span class="line"><span class="type">char</span> *url <span class="comment">//文件名</span></span><br><span class="line"><span class="type">int64_t</span> duration <span class="comment">//时长</span></span><br><span class="line"><span class="type">int</span> bit_rate <span class="comment">//比特率（单位bite/s）</span></span><br><span class="line">AVDictionary *metadata <span class="comment">//元数据（查看元数据：ffprobe filename）</span></span><br></pre></td></tr></table></figure><p><strong>2.2 AVInputFormat：</strong> 文件的封装格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* name <span class="comment">//封装格式的名字</span></span><br><span class="line"><span class="type">char</span>* long_name <span class="comment">//封装格式的长名字</span></span><br><span class="line"><span class="type">char</span>* extensions <span class="comment">//文件扩展名</span></span><br></pre></td></tr></table></figure><p><strong>2.3 AVIOContext-&gt;URLContext-&gt;URLProtocol</strong></p><ul><li><code>AVIOContext</code> ：文件（协议）操作的顶层对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *buffer <span class="comment">//缓冲开始位置</span></span><br><span class="line"><span class="type">int</span> buffer_size <span class="comment">//缓冲区大小（默认32768）</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *buf_ptr <span class="comment">//当前指针读取到的位置</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *buf_end <span class="comment">//缓存结束的位置</span></span><br><span class="line"><span class="type">void</span> *opaque <span class="comment">//URLContext结构体</span></span><br><span class="line">(*read_packet)(...) <span class="comment">//读取音视频数据的函数指针</span></span><br><span class="line">(*write_packet)(...) <span class="comment">//写入音视频数据的函数指针</span></span><br><span class="line">(*read_pause)(...) <span class="comment">//网络流媒体协议的暂停或恢复播放函数指针</span></span><br></pre></td></tr></table></figure><ul><li><code>URLContext</code> ：每种协议，有一个协议操作对象和一个关联的协议对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* name <span class="comment">//协议名称</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">URLProtocol</span> *prot <span class="comment">//协议操作对象（ff_file_protocol、ff_librtmp_protocol...）</span></span><br><span class="line"><span class="type">void</span> *priv_data <span class="comment">//协议对象（FileContext、LibRTMPContext）</span></span><br></pre></td></tr></table></figure><ul><li><code>URLProtocol</code> ：协议操作对象</li></ul><p><strong>2.4 AVStream</strong> ：存储音频流或视频流的结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> index <span class="comment">//音频流或视频流的索引</span></span><br><span class="line">AVRational time_base <span class="comment">//计算pts或dts是使用的时间戳基本单位（显示时间：pt = av_q2d(video_stream-&gt;time_base) * frame-&gt;pts）</span></span><br><span class="line"><span class="type">int64_t</span> duration <span class="comment">//该视频/音频流长度</span></span><br><span class="line">AVRational avg_frame_rate <span class="comment">//平均帧率（对于视频来说，frame_rate=avg_frame_rate.num / avg_frame_rate.den）</span></span><br><span class="line">AVCodecParameters *codecpar <span class="comment">//解码器参数</span></span><br></pre></td></tr></table></figure><p><strong>2.5 AVCodecParameter 和 AVCodecContext</strong></p><ul><li><p>新的 ffmpeg 中 <code>AVStream.codecpar(struct AVCodecParameter)</code> 代替 <code>AVStream.codec(struct AVCodecContext)</code><br><code>AVCodecParameter</code> 是由 <code>AVCodecContext</code> 分离出来的，<code>AVCodecParameter中没有函数</code></p></li><li><p><code>AVCodecContext</code> 结构体仍然是编解码时不可或缺的结构体<br><code>avcodec_send_packet</code> 和 <code>avcodec_receive_frame</code> 使用 <code>AVCodecContext</code></p></li></ul><blockquote><p><code>AVCodecContext</code> 和 <code>AVCodec</code> 的获取方法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=============== new version code ===============</span></span><br><span class="line"><span class="type">char</span> filePath[] = <span class="string">&quot;test.mp4&quot;</span>;</span><br><span class="line">AVFormatContext  *pFormatCtx;</span><br><span class="line">AVCodecContext *pCodecCtx;</span><br><span class="line">AVCodec *pCodec;</span><br><span class="line">pFormatCtx = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">av_register_all</span>();</span><br><span class="line"><span class="built_in">avformat_network_init</span>();</span><br><span class="line"><span class="built_in">avformat_open_input</span>(&amp;pFormatCtx, filePath, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">avformat_find_stream_info</span>(pFormatCtx, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pFormatCtx-&gt;nb_streams; i++)</span><br><span class="line">&#123;</span><br><span class="line">    AVStream *pStream = pFormatCtx-&gt;streams[i];</span><br><span class="line">    pCodec = <span class="built_in">avcodec_find_decoder</span>(pStream-&gt;codecpar-&gt;codec_id); <span class="comment">//new_begin</span></span><br><span class="line">    pCodecCtx = <span class="built_in">avcodec_alloc_context3</span>(pCodec);</span><br><span class="line">    <span class="built_in">avcodec_parameters_to_context</span>(pCodecCtx, pStream-&gt;codecpar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//============ old version code ============</span></span><br><span class="line"><span class="type">char</span> filePath[] = <span class="string">&quot;test.mp4&quot;</span>;</span><br><span class="line">AVFormatContext  *pFormatCtx;</span><br><span class="line">AVCodecContext *pCodecCtx;</span><br><span class="line">AVCodec *pCodec;</span><br><span class="line">pFormatCtx = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">av_register_all</span>();</span><br><span class="line"><span class="built_in">avformat_network_init</span>();</span><br><span class="line"><span class="built_in">avformat_open_input</span>(&amp;pFormatCtx, filePath, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">avformat_find_stream_info</span>(pFormatCtx, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pFormatCtx-&gt;nb_streams; i++)</span><br><span class="line">&#123;</span><br><span class="line">    AVStream *pStream = pFormatCtx-&gt;streams[i];</span><br><span class="line">    pCodecCtx = pStream-&gt;codec;</span><br><span class="line">    pCodec = <span class="built_in">avcodec_find_decoder</span>(pCodecCtx-&gt;codec_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆ 关键参数：可参考 avcodec_parameters_to_context 源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">AVMediaType</span> codec_type <span class="comment">//编解码器的类型（视频，音频...）</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">AVCodecID</span> codec_id <span class="comment">//标示特定的编码器</span></span><br><span class="line">AVCodecContext:<span class="keyword">struct</span> <span class="title class_">AVCodec</span> *codec <span class="comment">//采用的解码器AVCodec（H.264,MPEG2...）</span></span><br><span class="line"><span class="type">int</span> bit_rate <span class="comment">//平均比特率</span></span><br><span class="line"><span class="type">uint8_t</span> *extradata; <span class="type">int</span> extradata_size <span class="comment">//针对特定编码器包含的附加信息（例如对于H.264解码器来说，存储SPS，PPS等）</span></span><br><span class="line">AVCodecContext:<span class="keyword">enum</span> <span class="title class_">AVPixelFormat</span> pix_fmt <span class="comment">//像素格式（视频）</span></span><br><span class="line"><span class="type">int</span> width, height <span class="comment">//宽和高（视频）</span></span><br><span class="line">AVCodecContext:<span class="keyword">enum</span> <span class="title class_">AVSampleFormat</span> sample_fmt <span class="comment">//采样格式（音频）</span></span><br><span class="line"><span class="type">int</span> sample_rate <span class="comment">//采样率（音频）</span></span><br><span class="line"><span class="type">int</span> channels <span class="comment">//声道数（音频）</span></span><br><span class="line"><span class="type">uint64_t</span> channel_layout <span class="comment">//声道格式</span></span><br><span class="line">AVCodecParameters:<span class="type">int</span> format <span class="comment">//像素格式（视频）/采样格式（音频）</span></span><br></pre></td></tr></table></figure><p><strong>2.6 AVCodec</strong> ：编解码器结构体</p><ul><li>每一个解码器<code>对应</code>一个<code>AVCodec结构体</code><br>AVCodec ff_h264_decoder，AVCodec ff_jpeg2000_decoder</li></ul><p>◆ 关键成员变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *name <span class="comment">//编解码器短名字（形如：&quot;h264&quot;）</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *long_name <span class="comment">//编解码器全称（形如：&quot;H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10&quot;）</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">AVMediaType</span> type <span class="comment">//媒体类型：视频、音频或字母</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">AVCodecID</span> id <span class="comment">//标示特定的编码器</span></span><br><span class="line"><span class="type">const</span> AVRational *supported_framerates <span class="comment">//支持的帧率（仅视频）</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">enum</span> <span class="title class_">AVPixelFormat</span> *pix_fmts <span class="comment">//支持的像素格式（仅视频）</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *supported_samplerates <span class="comment">//支持的采样率（仅音频）</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">enum</span> <span class="title class_">AVSampleFormat</span> *sample_fmts <span class="comment">//支持的采样格式（仅音频）</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span> *channel_layouts <span class="comment">//支持的声道数（仅音频）</span></span><br></pre></td></tr></table></figure><p><strong>2.7 AVPacket</strong> ：存储解码前数据的结构体</p><p>◆ 关键成员变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AVBufferRef *buf <span class="comment">//管理data指向的数据</span></span><br><span class="line"><span class="type">uint8_t</span> *data <span class="comment">//压缩编码的数据</span></span><br><span class="line"><span class="type">int</span> size <span class="comment">//data的大小</span></span><br><span class="line"><span class="type">int64_t</span> pts <span class="comment">//显示时间戳</span></span><br><span class="line"><span class="type">int64_t</span> dts <span class="comment">//解码时间戳</span></span><br><span class="line"><span class="type">int</span> stream_index <span class="comment">//标识该AVPacket所属的视频/音频流</span></span><br></pre></td></tr></table></figure><blockquote><p>AVPacket的内存管理：AVPacket本身并不包含压缩的数据，通过<code>data指针</code>引用数据的缓存空间<br> 多个AVPacket<code>共享</code>同一个数据缓存（<code>AVBufferRef</code>、<code>AVBuffer</code>）<br> AVPacket拥有<code>独立的数据缓存</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">av_read_frame</span>(pFormatCtx, packet)  <span class="comment">// 读取Packet</span></span><br><span class="line"><span class="built_in">av_packet_ref</span>(dst_pkt,packet) <span class="comment">// dst_pkt 和 packet 共享同一个数据缓存空间，引用计数+1</span></span><br><span class="line"><span class="built_in">av_packet_unref</span>(dst_pkt); <span class="comment">//释放 pkt_pkt 引用的数据缓存空间，引用计数-1</span></span><br></pre></td></tr></table></figure><p>◆ AVBuffer 关键成员变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> *data <span class="comment">//压缩编码的数据</span></span><br><span class="line"><span class="type">size_t</span> size <span class="comment">//数据长度</span></span><br><span class="line">atomic_uint refcount <span class="comment">//引用计数，如果引用计数为0,则释放数据缓存空间</span></span><br></pre></td></tr></table></figure><p><strong>2.8 AVFrame</strong> ：存储解码后数据的结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> *data[AV_NUM_DATA_POINTERS] <span class="comment">//解码后原始数据（对视频来说是YUV，RGB，对音频来说是PCM）</span></span><br><span class="line"><span class="type">int</span> linesize[AV_NUM_DATA_POINTERS] <span class="comment">//data中“一行”数据的大小。注意：未必等于图像的宽，一般大于图像的宽。</span></span><br><span class="line"><span class="type">int</span> width, height <span class="comment">//视频帧宽和高（1920x1080,1280x720...）</span></span><br><span class="line"><span class="type">int</span> nb_samples <span class="comment">//音频的一个AVFrame中可能包含多个音频帧，在此标记包含了几个</span></span><br><span class="line"><span class="type">int</span> format <span class="comment">//解码后原始数据类型（YUV420，YUV422，RGB24...）</span></span><br><span class="line"><span class="type">int</span> key_frame <span class="comment">//是否是关键帧</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">AVPictureType</span> pict_type <span class="comment">//帧类型（I,B,P...）</span></span><br><span class="line">AVRational sample_aspect_ratio <span class="comment">//图像宽高比（16:9，4:3...）</span></span><br><span class="line"><span class="type">int64_t</span> pts <span class="comment">//显示时间戳</span></span><br><span class="line"><span class="type">int</span> coded_picture_number <span class="comment">//编码帧序号</span></span><br><span class="line"><span class="type">int</span> display_picture_number <span class="comment">//显示帧序号</span></span><br></pre></td></tr></table></figure><h2 id="6-7-ffmpeg-源码分析"><a href="#6-7-ffmpeg-源码分析" class="headerlink" title="6.7 ffmpeg 源码分析"></a>6.7 ffmpeg 源码分析</h2><p>前面分析FFmpeg的编解码调用过程，也对FFmpeg编解码过程中使用到的关键结构体进行分析<br>现以FFmpeg<code>解码流程</code>为主线，深入分析其中层层调用的FFmpeg代码。</p><p>FFmpeg解码过程涉及到源码调用过程，如图所示<br>橙色部分+红色箭头为解码主流程<br>橙色部分为FFmpeg对外提供的接口函数<br>白色部分为橙色功能函数实现中涉及到主要功能函数）：</p><p><img src="/img/mv1.41.png"></p><p>主要函数</p><ul><li><p>avformat_network_init()：初始化网络库</p></li><li><p>avformat_open_input()：打开输入流，获取头信息</p></li><li><p>avformat_find_stream_info()：通过读媒体数据，获取音视频流信息</p></li><li><p>avcodec_find_decoder()：通过ID查找音频解码器或者视频解码器</p></li><li><p>avcodec_parameters_to_context()：填充解码器上下文</p></li><li><p>avcodec_open2()：打开音频解码器或者视频解码器</p></li><li><p>av_read_frame()：获取音视频（编码）数据</p></li><li><p>avcodec_send_packet()：将音视频编码数据发送给解码器</p></li><li><p>avcodec_receive_frame()：获取解码后的音视频数据（音视频原始数据，如YUV和PCM）</p></li></ul><h2 id="6-8-ffplay源码分析"><a href="#6-8-ffplay源码分析" class="headerlink" title="6.8 ffplay源码分析"></a>6.8 ffplay源码分析</h2><p>前面介绍FFmpeg的解码、编码、转码流程及相关的函数调用，并以FFmpeg解码流程为主线，深入分析其中层层调用的FFmpeg代码</p><p>做一个真正的播放器，还有很多问题需要处理：<code>音视频同步</code>，<code>多线程解复用</code>、<code>解码</code>，<code>线程安全等</code>问题需要处理。<br>带着问题，分析下ffplay(FFmpeg提供的一个简单的播放器)的源码。</p><p>ffplay解码并播放音视频的源码分析如图所示<br>（分为两条主线，一条为解复用、解码，另一条为事件循环（包含音视频播放））：</p><p><img src="/img/mv1.42.png"></p><p><strong>1. 解复用、解码</strong></p><ul><li><p>stream_open：起始入口</p></li><li><p>audio_thread：音频处理线程</p></li><li><p>音频数据流转：audioq（编码数据）-&gt;sampq（解码数据）</p></li><li><p>video_thread：视频处理线程</p></li><li><p>视频数据流转：videoq（编码数据）-&gt;pictq（解码数据）</p></li><li><p>subtitle_thread：字幕解码线程</p></li><li><p>字幕数据流转：subtitleq（编码数据）-&gt;subpq（解码数据）</p></li></ul><p><strong>2. 事件循环（包含音视频播放）</strong></p><ul><li><p>event_loop：起始入口</p></li><li><p>refresh_loop_wait_event：显示音视频（包括音视频同步）</p></li></ul><p><strong>3. 事件循环</strong></p><ul><li><p>事件循环函数调用SDL_PeepEvents函数，查看事件队列中是否有事件存在</p></li><li><p>如果有事件（如键盘、鼠标等事件），优先处理事件</p></li><li><p>如果事件队列中没有事件，则播放音视频</p></li></ul><hr><h1 id="7-协议篇"><a href="#7-协议篇" class="headerlink" title="7. 协议篇"></a>7. 协议篇</h1><h2 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7.1 简介"></a>7.1 简介</h2><p><code>RTP</code>，<code>RTCP</code>，<code>RTMP</code>等等协议</p><p>如下罗列了部分流媒体相关协议，稍后详细介绍这些协议：</p><ul><li><p>RTP(Real-time Transport Protocol)，实时传输协议。</p></li><li><p>RTCP(Real-time Transport Control Protocol)，实时传输控制协议。</p></li><li><p>RTSP(Real Time Streaming Protocol)，实时流协议。</p></li><li><p>RTMP(Real Time Messaging Protocol)，实时消息传输协议。</p></li><li><p>HLS(HTTP Live Streaming)，苹果公司提出的基于HTTP的流媒体网络传输协议。</p></li><li><p>HTTP-FLV，将<code>RTMP</code>等负载信息携带在HTTP协议之上的码流传输协议。</p></li></ul><h2 id="7-2-RTP-RTCP-RTSP"><a href="#7-2-RTP-RTCP-RTSP" class="headerlink" title="7.2 RTP &amp; RTCP &amp; RTSP"></a>7.2 RTP &amp; RTCP &amp; RTSP</h2><p>RTP、RTCP这两个协议一般是成对出现，而他们与RTSP协同工作。介绍下这三个协议。</p><p><strong>1. RTP、RTCP、RTSP的关系</strong></p><blockquote><p>RTP 负责多媒体的传输<br>RTCP 配合 RTP 做控制和流量统计<br>RTSP 负责建立和控制会话</p></blockquote><p><img src="/img/mv1.43.png"></p><p><img src="/img/mv1.44.png"></p><p><strong>2. RTP(Real-time Transport Protocol)，实时传输协议：</strong></p><ul><li><p>RTP建立在<code>UDP</code>协议上；</p></li><li><p>RTP<code>不确保</code>网络底层的可靠性，<code>不提供</code>按时发送机制或其他服务质量（QoS）保证；</p></li><li><p>RTP<code>不保证</code>传送或防止无序传送；</p></li><li><p>RTP<code>提供</code>时间标志，序列号以及其他能够保证在实时数据传输时处理时间的<code>方法</code>；</p></li></ul><p>◆ RTP报文格式如下：</p><p><img src="/img/mv1.45.png"></p><blockquote><p><code>V</code>：RTP协议的版本号，占2位，当前协议版本号为2P：填充标志，占1位，如果P&#x3D;1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。<br><code>X</code>：扩展标志，占1位，如果X&#x3D;1，则在RTP报头后跟有一个扩展报头<br><code>CC</code>：CSRC计数器，占4位，指示CSRC 标识符的个数<br><code>M</code>：标记，占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。<br><code>PT</code>：有效荷载类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEM图像等,在流媒体中大部分是用来区分音频流和视频流的，这样便于客户端进行解析。<br><code>sequence number</code>：序列号，16比特，发送方在每发送完一个RTP包后就将该域的值增加1，接收方可以由该域检测包的丢失及恢复包序列。序列号的初始值是随机的。<br><code>timestamp</code>：时间戳，32比特，记录了该包中数据的第一个字节的采样时刻。在一次会话开始时，时间戳初始化成一个初始值。即使在没有信号发送时，时间戳的数值也要随时间而不断地增加（时间在流逝嘛）。时间戳是去除抖动和实现同步不可缺少的。<br><code>SSRC</code>：同步源标识符，32比特，同步源就是指RTP包流的来源。在同一个RTP会话中不能有两个相同的SSRC值。该标识符是随机选取的 RFC1889推荐了MD5随机算法。<br><code>CSRC</code>：贡献源列表，0～15项，每项32比特，用来标志对一个RTP混合器产生的新包有贡献的所有RTP包的源。由混合器将这些有贡献的SSRC标识符插入表中。SSRC标识符都被列出来，以便接收端能正确指出交谈双方的身份 </p></blockquote><p><strong>3. RTCP(Real-time Transport Control Protocol)，实时传输控制协议：</strong></p><ul><li><p><code>RTP</code>和<code>RTCP</code>是一起使用的；</p></li><li><p>RTCP的主要功能是为RTP所提供的服务质量<code>提供反馈</code>，RTCP收集相关媒体连接的统计信息<br>例如：传输字节数，传输分组数，丢失分组数，时延抖动，单向和双向网络延迟等等；</p></li><li><p>网络应用程序可以利用RTCP所提供的信息试图<code>提高服务质量</code>，比如限制信息流量或改用压缩比较小的编解码器；</p></li><li><p>RTCP本身<code>不提供</code>数据加密或身份认证，其伴生协议<code>SRTCP</code>（安全实时传输控制协议）则可用于此类用途；</p></li></ul><p>◆ RTCP报文格式如下：</p><p><img src="/img/mv1.46.png"></p><p><strong>4. RTSP(Real Time Streaming Protocol)，实时流协议：</strong></p><ul><li><p>RTSP是一种<code>双向实时数据传输协议</code>；</p></li><li><p>RTSP在体系结构上位于<code>RTP和RTCP之上</code>，它使用TCP或RTP完成数据传输；</p></li><li><p>RTSP主要用来控制具有<code>实时特性</code>的数据发送<br>比如：对流媒体提供诸如播放、暂停、快进等操作；</p></li><li><p>RTSP负责定义具体的控制消息、操作方法、状态码等，但它本身并<code>不传输数据</code>，而是必须<code>依赖于下层传输协议</code>所提供的某些服务；</p></li></ul><h2 id="7-3-RTMP-HLS"><a href="#7-3-RTMP-HLS" class="headerlink" title="7.3 RTMP &amp; HLS"></a>7.3 RTMP &amp; HLS</h2><p><strong>1. RTMP(Real Time Messaging Protocol)</strong></p><p>RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议<code>基于TCP</code>，是一个协议族，包括RTMP基本协议RTMPT&#x2F;RTMPS&#x2F;RTMPE等多种变种。<br>RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash&#x2F;AIR平台和支持RTMP协议的流媒体&#x2F;交互服务器之间进行音视频和数据通信。<br>支持该协议的软件包括Adobe Media Server&#x2F;Ultrant Media Server&#x2F;red5等。RTMP与HTTP一样，都属于TCP&#x2F;IP四层模型的应用层。</p><ul><li><p>应用层协议，依靠TCP保证可靠传输。</p></li><li><p>默认端口：<code>1953</code>，可能被防火墙屏蔽。</p></li><li><p>在流媒体&#x2F;交互服务器之间进行音视频和数据<code>通信</code>。</p></li></ul><p><strong>2. HLS(HTTP Live Streaming)</strong></p><p>HLS是一个由苹果公司提出的<strong>基于HTTP</strong>的流媒体网络传输协议。</p><p><font color = red>工作原理 : 把整个流分成一个个小的基于HTTP的TS文件来下载，每次只下载一些。</font><br>当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。</p><p>HLS请求基本的HTTP报文，与实时传输协议（<code>RTP</code>)不同<br><font color = red>HLS可以穿过任何允许HTTP数据通过的防火墙或者代理服务器。它也很容易使用内容分发网络来传输媒体流。 </font></p><p>HLS规范：</p><ul><li><p>视频的封装格式是<code>TS</code>。</p></li><li><p>音视频采用<code>H264</code>编码和<code>AAC</code>编码。</p></li><li><p>除了<code>TS</code>视频文件本身，还定义了用来控制播放的<code>m3u8</code>索引文件</p></li></ul><h2 id="7-4-对比RTMP，HLS和HTTP-FLV"><a href="#7-4-对比RTMP，HLS和HTTP-FLV" class="headerlink" title="7.4 对比RTMP，HLS和HTTP-FLV"></a>7.4 对比RTMP，HLS和HTTP-FLV</h2><p>在开始之前，我们先要明确一个问题，根据应用场景不同，流媒体协议分为：</p><ul><li><p>推流协议</p></li><li><p>拉流播放协议</p></li></ul><blockquote><p><code>RTMP</code>  &gt;&gt; 双端<br><code>HLS</code> &gt;&gt; 拉流端<br><code>HTTP-FLV</code> &gt;&gt; 拉流端。</p></blockquote><p>我们先放一张表格从几个维度来对比下这三种协议。</p><table><thead><tr><th></th><th>RTMP</th><th>HTTP-FLV</th><th>HLS</th></tr></thead><tbody><tr><td>传输协议</td><td>TCP</td><td>HTTP</td><td>HTTP</td></tr><tr><td>视频封装格式</td><td>flv</td><td>flv</td><td>ts</td></tr><tr><td>延时</td><td>1-3秒</td><td>1-3秒</td><td>5-20秒</td></tr><tr><td>Web支持</td><td>H5需要使用插件</td><td>H5需要使用插件</td><td>支持H5</td></tr><tr><td>数据</td><td>连续流</td><td>连续流</td><td>切片文件</td></tr></tbody></table><p>ps: H5 是 HTML5</p><p><strong>1. RTMP &amp; HTTP-FLV</strong></p><ul><li><p>这两个协议实际上传输的数据是一样的，数据都是<code>flv文件的tag</code>。</p></li><li><p>RTMP：实时播放服务器的 FLV 文件或服务器转发的FLV数据，本地<code>无 FLV 缓存文件</code>，<code>FLV保密性好</code>。</p></li><li><p>HTTP-FLV：将 FLV <code>下载到本地</code>再播放，FLV<code>保密性不好</code>。</p></li></ul><p><strong>2. HLS &amp; RTMP</strong></p><ul><li><p>RTMP：采用<code>1935</code>端口，而非HTTP<code>80</code>端口，在某些网络环境下可能被<code>屏蔽</code>。</p></li><li><p>RTMP：是一种<code>有状态协议</code>，需要为每一个播放视频流的客户端维护状态，服务器平滑<code>扩展难度大</code>。</p></li><li><p>HLS：基于<code>无状态HTTP协议</code>，客户端只需要按顺序使用下载的TS文件就可，负载均衡如同普通的HTTP文件服务器负载均衡一样。</p></li></ul><p><strong>3. HTTP-FLV</strong></p><p>HTTP-FLV 结合了 RTMP 和 HLS 的优点，易用（HTTP协议）低延时（flv）</p><p><strong>4. 为什么 RTPM 比 HLS 快</strong></p><ul><li><p>HLS拉流：服务器音视频数据切片生成 TS 文件</p></li><li><p>HLS拉流：客户端必须等待服务端至少生成一个 TS 文件<br>通常下载完两个媒体文件后才能保证不同分段音视频间的无缝连接。</p></li><li><p>HLS一直在等切片数据，<code>RTMP不需要切片</code></p></li></ul><p><img src="/img/mv1.47.png"></p><hr><h1 id="8-服务器篇"><a href="#8-服务器篇" class="headerlink" title="8. 服务器篇"></a>8. 服务器篇</h1><blockquote><p>介绍下目前常用的流媒体服务器，并实际部署下部分服务器，感受下流媒体服务器是如何工作。<br>市面上优秀的流媒体服务器解决方案有很多，比如SRS，Red5，EasyDarwin，nginx-rtmp，live555，mediasoup等等。<br>这些服务器框架各有优缺点，需要明白的是，世上没有一款完美的流媒体服务器解决方案，在流媒体选型的时候，需要根据自己的业务选择适合的流媒体服务器</p></blockquote><h2 id="8-1-nginx-rtmp-的部署"><a href="#8-1-nginx-rtmp-的部署" class="headerlink" title="8.1 nginx-rtmp 的部署"></a>8.1 nginx-rtmp 的部署</h2><p>介绍下使用nginx-rtmp来部署一套流媒体服务器，并用FFmpeg来推流，VLC来拉流。</p><p><strong>1. 下载nginx 和 nginx-rtmp-module</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://nginx.org/en/download.html</span><br><span class="line">https://github.com/arut/nginx-rtmp-module.git</span><br></pre></td></tr></table></figure><p><strong>2. 解压压缩包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tar</span> xvf nginx-1.20.1.tar.gz</span><br><span class="line"><span class="variable">$unzip</span> nginx-rtmp-module-master.zip</span><br></pre></td></tr></table></figure><p><strong>3. 创建build目录</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> nginx-1.20.1</span><br><span class="line"><span class="variable">$mkdir</span> build</span><br></pre></td></tr></table></figure><p><strong>4. config &amp; make &amp; make install</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$./configure --prefix=/home/fly/work/nginx-rtmp/nginx-1.20.1/build --add-module=/home/fly/work/nginx-rtmp/nginx-rtmp-module-master</span><br><span class="line"><span class="variable">$make</span></span><br><span class="line"><span class="variable">$make</span> install</span><br></pre></td></tr></table></figure><p><strong>5. config过程中错误及错误处理</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error : ./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">error :./configure: error: SSL modules require the OpenSSL library.</span><br><span class="line">error :./configure: error: the HTTP gzip module requires the zlib library.</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line">sudo apt-get install openssl libssl-dev</span><br><span class="line">sudo apt-get install zlib1g-dev</span><br></pre></td></tr></table></figure><p><strong>6. 配置文件：&#x2F;home&#x2F;fly&#x2F;work&#x2F;nginx-rtmp&#x2F;nginx-1.20.1&#x2F;build&#x2F;conf&#x2F;nginx.conf</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        chunk_size 4096;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># live on</span></span><br><span class="line">        application rtmp_live &#123;</span><br><span class="line">            live on;</span><br><span class="line">            <span class="comment"># hls on; #这个参数把直播服务器改造成实时回放服务器。</span></span><br><span class="line">            <span class="comment"># wait_key on; #对视频切片进行保护，这样就不会产生马赛克了。</span></span><br><span class="line">            <span class="comment"># hls_path ./sbin/html; #切片视频文件存放位置。</span></span><br><span class="line">            <span class="comment"># hls_fragment 10s;     #每个视频切片的时长。</span></span><br><span class="line">            <span class="comment"># hls_playlist_length 60s;  #总共可以回看的时间，这里设置的是1分钟。</span></span><br><span class="line">            <span class="comment"># hls_continuous on; #连续模式。</span></span><br><span class="line">            <span class="comment"># hls_cleanup on;    #对多余的切片进行删除。</span></span><br><span class="line">            <span class="comment"># hls_nested on;     #嵌套模式。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># play videos</span></span><br><span class="line">        application rtmp_play&#123;</span><br><span class="line">            play ./videos;  <span class="comment">#build directory</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7. 启动 nginx</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/home/fly/work/nginx-rtmp/nginx-1.20.1/build$ sudo ./sbin/nginx</span><br></pre></td></tr></table></figure><p><strong>8. ffmpeg推流</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i test.flv -vcodec libx264 -acodec aac -f flv rtmp://192.168.2.128:1935/rtmp_live/mystream</span><br></pre></td></tr></table></figure><p><strong>9. VLC拉流（直播、点播）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直播：rtmp://192.168.2.128:1935/rtmp_live/mystream</span><br><span class="line">点播：rtmp://192.168.2.128:1935/rtmp_play/test.flv</span><br></pre></td></tr></table></figure><h2 id="8-2-SRS-的部署"><a href="#8-2-SRS-的部署" class="headerlink" title="8.2 SRS 的部署"></a>8.2 SRS 的部署</h2><p>介绍下使用SRS来部署一套流媒体服务器，并用FFmpeg来推流，VLC来拉流。</p><p><strong>1. 下载srs源码</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ossrs/srs/releases</span><br></pre></td></tr></table></figure><p><strong>2. 解压压缩包</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tar</span> xvf srs-3.0-r8.tar.gz</span><br></pre></td></tr></table></figure><p><strong>3. 创建build目录</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> srs-3.0-r8/trunk/</span><br><span class="line"><span class="variable">$mkdir</span> build</span><br></pre></td></tr></table></figure><p><strong>4. config &amp; make &amp; make install</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$./configure --prefix=/home/fly/work/srs/srs-3.0-r8/trunk/build --full</span><br><span class="line"><span class="variable">$make</span></span><br><span class="line"><span class="variable">$make</span> install</span><br></pre></td></tr></table></figure><p><strong>5. make过程中出现错误及解决方法</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In file included from ../../../objs/gtest/include/gtest/internal/gtest-port.h:197:0,</span><br><span class="line">                 from ../../../objs/gtest/include/gtest/internal/gtest-internal.h:40,</span><br><span class="line">                 from ../../../objs/gtest/include/gtest/gtest.h:57,</span><br><span class="line">                 from ../../../src/utest/srs_utest.hpp:36,</span><br><span class="line">                 from ../../../src/utest/srs_utest.cpp:24:</span><br><span class="line">/usr/include/c++/7/sstream:300:7: error: ‘struct std::__cxx11::basic_stringbuf&lt;_CharT, _Traits, _Alloc&gt;::__xfer_bufptrs’ redeclared with different access struct __xfer_bufptrs</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$./configure --prefix=/home/fly/work/srs/srs-3.0-r8/trunk/build --full --without-utest</span><br><span class="line"><span class="variable">$make</span></span><br><span class="line"><span class="variable">$make</span> install</span><br></pre></td></tr></table></figure><p><strong>6. 增加配置文件：&#x2F;home&#x2F;fly&#x2F;work&#x2F;srs&#x2F;srs-3.0-r8&#x2F;trunk&#x2F;build&#x2F;conf&#x2F;my_hls.conf</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">listen              1935;</span><br><span class="line">max_connections     1000;</span><br><span class="line">daemon              on;</span><br><span class="line">srs_log_tank        file;</span><br><span class="line">srs_log_level        error;</span><br><span class="line">srs_log_file        ./objs/srs.log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http_server &#123;</span><br><span class="line">    enabled         on;</span><br><span class="line">    listen          8081;</span><br><span class="line">    <span class="built_in">dir</span>             ./objs/nginx/html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vhost __defaultVhost__ &#123;</span><br><span class="line">    hls &#123;</span><br><span class="line">        enabled         on;</span><br><span class="line">        hls_fragment    10;</span><br><span class="line">        hls_window      60;</span><br><span class="line">        hls_path        ./objs/nginx/html;</span><br><span class="line">        hls_m3u8_file   [app]/[stream].m3u8;</span><br><span class="line">        hls_ts_file     [app]/[stream]-[<span class="built_in">seq</span>].ts;</span><br><span class="line">        hls_cleanup     on;</span><br><span class="line">        hls_dispose     30;</span><br><span class="line">        hls_on_error    <span class="built_in">continue</span>;</span><br><span class="line">        hls_storage     disk;</span><br><span class="line">        hls_wait_keyframe       on;</span><br><span class="line">        hls_acodec      aac;</span><br><span class="line">        hls_vcodec      h264;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7. 启动 srs</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/home/fly/work/srs/srs-3.0-r8/trunk/build<span class="variable">$sudo</span> ./objs/srs -c ./conf/my_hls.conf</span><br></pre></td></tr></table></figure><p><strong>8. ffmpeg推流</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i test.mp4 -vcodec libx264 -acodec aac -f flv rtmp://192.168.2.128:1935/live/index</span><br></pre></td></tr></table></figure><p><strong>9. 生成的 m3u8 和 ts 文件路径</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/work/srs/srs-3.0-r8/trunk/build/objs/nginx/html/live</span><br></pre></td></tr></table></figure><p><strong>10. VLC拉流（rtmp、http）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rtmp://192.168.2.128:1935/live/index</span><br><span class="line">http://192.168.2.128:8081/live/index.m3u8</span><br><span class="line">``````</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 8.3 live555 的部署</span></span><br><span class="line"></span><br><span class="line">本篇文章，我们详细介绍下使用live555来部署一套流媒体服务器，并使用VLC来拉流。</span><br><span class="line"></span><br><span class="line">**1.下载live555源码**</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">http://www.live555.com/liveMedia/public/</span><br></pre></td></tr></table></figure><p><strong>2. 解压</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tar</span> vxf live.2021.08.24.tar.gz</span><br><span class="line"><span class="comment">#cd live</span></span><br></pre></td></tr></table></figure><p><strong>3. make</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$./genMakefiles linux-64bit</span><br><span class="line"><span class="variable">$make</span></span><br></pre></td></tr></table></figure><p><strong>4. 启动live555</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> mediaServer</span><br><span class="line"><span class="variable">$sudo</span> ./live555MediaServer</span><br></pre></td></tr></table></figure><p><strong>5. 上传视频</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将test.mkv上传至 live/mediaServer目录下</span><br></pre></td></tr></table></figure><p><strong>6. 播放</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">拷贝 live555 生成的 url 地址</span><br><span class="line">vlc拉流：rtsp://192.168.2.128:8554/test.mkv</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-音视频播放原理&quot;&gt;&lt;a href=&quot;#1-音视频播放原理&quot; class=&quot;headerlink&quot; title=&quot;1. 音视频播放原理&quot;&gt;&lt;/a&gt;1. 音视频播放原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/mv1.1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;2</summary>
      
    
    
    
    <category term="音视频" scheme="http://example.com/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录-补充篇</title>
    <link href="http://example.com/2023/11/27/algorithm-other/"/>
    <id>http://example.com/2023/11/27/algorithm-other/</id>
    <published>2023-11-27T14:24:29.000Z</published>
    <updated>2023-12-06T02:57:09.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-单调栈-1-1-739-每日温度"><a href="#1-单调栈-1-1-739-每日温度" class="headerlink" title="1. 单调栈# 1.1 739-每日温度"></a>1. 单调栈# 1.1 739-每日温度</h1><p><a href="https://leetcode.cn/problems/daily-temperatures/description/">739</a></p><p><img src="/img/add1.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = temperatures.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(size,<span class="number">0</span>)</span></span>; <span class="comment">//初始化为0,防止后续计算的递减导致无法找到而无法赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temperatures[i] &lt; temperatures[st.<span class="built_in">top</span>()])</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temperatures[i] == temperatures[st.<span class="built_in">top</span>()])</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; temperatures[i] &gt; temperatures[st.<span class="built_in">top</span>()])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[st.<span class="built_in">top</span>()] = i - st.<span class="built_in">top</span>(); <span class="comment">//计算距离后入数组</span></span><br><span class="line">                    st.<span class="built_in">pop</span>(); <span class="comment">//弹出</span></span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-496-下一个更大元素-I"><a href="#1-2-496-下一个更大元素-I" class="headerlink" title="1.2 496-下一个更大元素 I"></a>1.2 496-下一个更大元素 I</h2><p><a href="https://leetcode.cn/problems/next-greater-element-i/description/">496</a></p><p><img src="/img/add2.png"></p><blockquote><p>类似于上一题,且精简版的写法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(size1,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(size1 == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; um; <span class="comment">//key为下标元素, value为index</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size1; ++i)</span><br><span class="line">            um[nums1[i]] = i;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size2; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; nums2[i] &gt; nums2[st.<span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(um.<span class="built_in">count</span>(nums2[st.<span class="built_in">top</span>()]) &gt; <span class="number">0</span>) <span class="comment">//哈希内有对应num2的元素</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> index = um[nums2[st.<span class="built_in">top</span>()]]; <span class="comment">//index为num1中较小元素的坐标</span></span><br><span class="line">                    ans[index] = nums2[i];</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-503-下一个最大元素-II"><a href="#1-3-503-下一个最大元素-II" class="headerlink" title="1.3 503-下一个最大元素 II"></a>1.3 503-下一个最大元素 II</h2><p><a href="https://leetcode.cn/problems/next-greater-element-ii/description/">503</a></p><p><img src="/img/add3.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(size,<span class="number">-1</span>)</span></span>;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size*<span class="number">2</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i % size] &lt; nums[st.<span class="built_in">top</span>()])</span><br><span class="line">                st.<span class="built_in">push</span>(i % size);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; nums[i % size] &gt; nums[st.<span class="built_in">top</span>()])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[st.<span class="built_in">top</span>()] = nums[i % size];</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">push</span>(i % size);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-4-42-接雨水"><a href="#1-4-42-接雨水" class="headerlink" title="1.4* 42-接雨水"></a>1.4* 42-接雨水</h2><p><a href="https://leetcode.cn/problems/trapping-rain-water/description/">42</a></p><p><img src="/img/add4.png"></p><blockquote><p>…</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = height.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; height[i] &gt; height[st.<span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(!st.<span class="built_in">empty</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> h = <span class="built_in">min</span>(height[st.<span class="built_in">top</span>()], height[i]) - height[mid];</span><br><span class="line">                    <span class="type">int</span> w = i - st.<span class="built_in">top</span>() - <span class="number">1</span>;</span><br><span class="line">                    ans += h*w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(i); <span class="comment">//求右边第一个更大元素,所以单调栈是递增的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-5-84-柱状图中最大的矩形"><a href="#1-5-84-柱状图中最大的矩形" class="headerlink" title="1.5* 84-柱状图中最大的矩形"></a>1.5* 84-柱状图中最大的矩形</h2><p><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/description/">84</a></p><p><img src="/img/add5.png"></p><blockquote><p>…</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestRectangleArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        heights.<span class="built_in">insert</span>(heights.<span class="built_in">begin</span>(),<span class="number">0</span>);</span><br><span class="line">        heights.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> size = heights.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(heights[i] &lt; heights[st.<span class="built_in">top</span>()])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> w = i - st.<span class="built_in">top</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> h = heights[mid];</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, w*h);</span><br><span class="line">            &#125;</span><br><span class="line">            st.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-索引相关"><a href="#2-索引相关" class="headerlink" title="2. 索引相关"></a>2. 索引相关</h1><h2 id="2-1-1365-有多少小于当前数字的数字"><a href="#2-1-1365-有多少小于当前数字的数字" class="headerlink" title="2.1 1365-有多少小于当前数字的数字"></a>2.1 1365-有多少小于当前数字的数字</h2><p><a href="https://leetcode.cn/problems/how-many-numbers-are-smaller-than-the-current-number/description/">1365</a></p><p><img src="/img/add6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">smallerNumbersThanCurrent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans = nums;</span><br><span class="line">        <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">101</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = ans.<span class="built_in">size</span>()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">            hash[ans[i]] = i; <span class="comment">//元素值就是下标,下标就是大于本元素数值的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            ans[i] = hash[nums[i]];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-2-941-有效的山脉数组"><a href="#2-2-941-有效的山脉数组" class="headerlink" title="2.2 941-有效的山脉数组"></a>2.2 941-有效的山脉数组</h2><p><a href="https://leetcode.cn/problems/valid-mountain-array/description/">941</a></p><p>满足以下条件为有效山脉zai</p><p><img src="/img/add7.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validMountainArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; size - <span class="number">1</span> &amp;&amp; arr[left] &lt; arr[left+<span class="number">1</span>])</span><br><span class="line">            left++;</span><br><span class="line">        <span class="keyword">while</span>(right &gt; <span class="number">0</span> &amp;&amp; arr[right] &lt; arr[right<span class="number">-1</span>])</span><br><span class="line">            right--;</span><br><span class="line">        <span class="keyword">if</span>(left == right &amp;&amp; left != <span class="number">0</span> &amp;&amp; right != size<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-1207-独一无二的出现次数"><a href="#2-3-1207-独一无二的出现次数" class="headerlink" title="2.3 1207-独一无二的出现次数"></a>2.3 1207-独一无二的出现次数</h2><p><a href="https://leetcode.cn/problems/unique-number-of-occurrences/description/">1207</a></p><p><img src="/img/add8.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">uniqueOccurrences</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">2002</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : arr)</span><br><span class="line">            hash[e + <span class="number">1000</span>]++; <span class="comment">//记录频率</span></span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> frequent[<span class="number">1002</span>] = &#123;<span class="literal">false</span>&#125;; <span class="comment">//记录相同频率是否出现</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">2000</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[i]) <span class="comment">//如果这个数字出现过</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(frequent[hash[i]] == <span class="literal">false</span>) <span class="comment">//记录此频率</span></span><br><span class="line">                    frequent[hash[i]] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//频率被记录过直接返回</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-4-283-移动零"><a href="#2-4-283-移动零" class="headerlink" title="2.4 283-移动零"></a>2.4 283-移动零</h2><p><a href="https://leetcode.cn/problems/move-zeroes/description/">283</a></p><p><img src="/img/add9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slowindex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> fastindex = <span class="number">0</span>; fastindex &lt; nums.<span class="built_in">size</span>(); fastindex++)</span><br><span class="line">            <span class="keyword">if</span>(nums[fastindex] != <span class="number">0</span>) <span class="comment">//元素==0 快指针向前</span></span><br><span class="line">                nums[slowindex++] = nums[fastindex];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = slowindex; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-5-189-轮转数组"><a href="#2-5-189-轮转数组" class="headerlink" title="2.5 189-轮转数组"></a>2.5 189-轮转数组</h2><p><a href="https://leetcode.cn/problems/rotate-array/description/">189</a></p><p><img src="/img/add10.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k = k % nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">begin</span>()+k);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+k,nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-6-724-寻找数组的中心下标"><a href="#2-6-724-寻找数组的中心下标" class="headerlink" title="2.6 724-寻找数组的中心下标"></a>2.6 724-寻找数组的中心下标</h2><p><a href="https://leetcode.cn/problems/find-pivot-index/description/">724</a></p><p><img src="/img/add11.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)</span><br><span class="line">            sum += num; </span><br><span class="line">        <span class="type">int</span> leftsum = <span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> rightsum = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            leftsum += nums[i]; <span class="comment">//左边+中间</span></span><br><span class="line">            rightsum = sum - leftsum + nums[i]; <span class="comment">//右边+中间</span></span><br><span class="line">            <span class="keyword">if</span>(leftsum == rightsum)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-7-34-在排序数组中查找元素的第一个和最后一个位置"><a href="#2-7-34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="2.7 34-在排序数组中查找元素的第一个和最后一个位置"></a>2.7 34-在排序数组中查找元素的第一个和最后一个位置</h2><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34</a></p><p><img src="/img/add12.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="built_in">getLeftBorder</span>(nums, target);</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="built_in">getRightBorder</span>(nums, target);</span><br><span class="line">        <span class="comment">// 情况1 : 没有找到(target跑到边界外,循环都没有进入)</span></span><br><span class="line">        <span class="keyword">if</span> (leftBorder == <span class="number">-2</span> || rightBorder == <span class="number">-2</span>)  </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="comment">// 情况三</span></span><br><span class="line">        <span class="keyword">if</span> (rightBorder - leftBorder &gt; <span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> &#123;leftBorder + <span class="number">1</span>, rightBorder - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 情况2 : 进入循环内部但是找不到</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">     <span class="function"><span class="type">int</span> <span class="title">getRightBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rightBorder = <span class="number">-2</span>; <span class="comment">// 记录一下rightBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) </span><br><span class="line">            &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; <span class="comment">// 寻找右边界，nums[middle] == target的时候更新left</span></span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">                rightBorder = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightBorder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getLeftBorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> leftBorder = <span class="number">-2</span>; <span class="comment">// 记录一下leftBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt;= target) </span><br><span class="line">            &#123; <span class="comment">// 寻找左边界，nums[middle] == target的时候更新right</span></span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">                leftBorder = right;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-8-922-按奇偶排序数组"><a href="#2-8-922-按奇偶排序数组" class="headerlink" title="2.8 922-按奇偶排序数组"></a>2.8 922-按奇偶排序数组</h2><p><a href="https://leetcode.cn/problems/sort-array-by-parity-ii/description/">922</a></p><p><img src="/img/add13.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArrayByParityII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> oddindex = <span class="number">1</span>; <span class="comment">//奇数位</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] % <span class="number">2</span> == <span class="number">1</span>) <span class="comment">//偶数为遇到奇数</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(nums[oddindex] % <span class="number">2</span> != <span class="number">0</span>) <span class="comment">//如果奇数位也是偶数</span></span><br><span class="line">                    oddindex += <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">swap</span>(nums[i],nums[oddindex]); <span class="comment">//替换</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-9-35-搜索插入位置"><a href="#2-9-35-搜索插入位置" class="headerlink" title="2.9 35-搜索插入位置"></a>2.9 35-搜索插入位置</h2><p><a href="https://leetcode.cn/problems/search-insert-position/description/">35</a></p><p><img src="/img/add14.png"></p><blockquote><p>双闭区间</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) <span class="comment">//left == right 区间[left,right]仍然有效</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>单开区间</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = n; <span class="comment">// 定义target在左闭右开的区间里，[left, right)  target</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) <span class="comment">// 因为left == right的时候，在[left, right)无效</span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="type">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target)</span><br><span class="line">                right = middle; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)</span><br><span class="line">                left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，在 [middle+1, right)中</span></span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> middle; <span class="comment">// 数组中找到目标值的情况，直接返回下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="3-链表"><a href="#3-链表" class="headerlink" title="3. 链表"></a>3. 链表</h1><h2 id="3-1-24-两两交换链表中的节点"><a href="#3-1-24-两两交换链表中的节点" class="headerlink" title="3.1 24-两两交换链表中的节点"></a>3.1 24-两两交换链表中的节点</h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">24</a></p><p><img src="/img/add15.png"></p><blockquote><p>迭代</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* solider = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>); <span class="comment">//头部创建一个新节点</span></span><br><span class="line">        solider-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        ListNode* temp = solider;</span><br><span class="line">        <span class="keyword">while</span>(temp-&gt;next &amp;&amp; temp-&gt;next-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* node1 = temp-&gt;next;</span><br><span class="line">            ListNode* node2 = temp-&gt;next-&gt;next;</span><br><span class="line">            temp-&gt;next = node2;</span><br><span class="line">            node1-&gt;next = node2-&gt;next;</span><br><span class="line">            node2-&gt;next = node1;</span><br><span class="line">            temp = node1;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ans = solider-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> solider;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-2-234-回文链表"><a href="#3-2-234-回文链表" class="headerlink" title="3.2 234-回文链表"></a>3.2 234-回文链表</h2><p><a href="https://leetcode.cn/problems/palindrome-linked-list/description/">234</a></p><p><img src="/img/add16.png"></p><blockquote><p>O(N) 时间复杂度, O(1) 空间复杂度</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> <span class="comment">//反转链表</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) </span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next; <span class="comment">//向前递进</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">endOfFirstHalf</span><span class="params">(ListNode* head)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) </span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//找到前半部分链表的尾节点并反转后半部分</span></span><br><span class="line">        ListNode* first_half_end = <span class="built_in">endOfFirstHalf</span>(head); <span class="comment">//前半部分的尾节点</span></span><br><span class="line">        ListNode* second_half_start = <span class="built_in">reverseList</span>(first_half_end-&gt;next); <span class="comment">//反转后的头节点</span></span><br><span class="line"></span><br><span class="line">        ListNode* p1 = head; <span class="comment">//最左</span></span><br><span class="line">        ListNode* p2 = second_half_start; <span class="comment">//最右</span></span><br><span class="line">        <span class="type">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans &amp;&amp; p2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p1-&gt;val != p2-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        first_half_end-&gt;next = <span class="built_in">reverseList</span>(second_half_start); <span class="comment">//重新接好</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-3-143-重排链表"><a href="#3-3-143-重排链表" class="headerlink" title="3.3 143-重排链表"></a>3.3 143-重排链表</h2><p><a href="https://leetcode.cn/problems/reorder-list/description/">134</a></p><p><img src="/img/add17.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> <span class="comment">//返回中间节点(左)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next  &amp;&amp; fast-&gt;next-&gt;next ) </span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> <span class="comment">//反转链表</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) </span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* nextTemp = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mergeList</span><span class="params">(ListNode* l1, ListNode* l2)</span> <span class="comment">//交叉合并链表</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ListNode* l1_tmp;</span><br><span class="line">        ListNode* l2_tmp;</span><br><span class="line">        <span class="keyword">while</span> (l1  &amp;&amp; l2 ) </span><br><span class="line">        &#123;</span><br><span class="line">            l1_tmp = l1-&gt;next;</span><br><span class="line">            l2_tmp = l2-&gt;next;</span><br><span class="line"></span><br><span class="line">            l1-&gt;next = l2;</span><br><span class="line">            l1 = l1_tmp;</span><br><span class="line"></span><br><span class="line">            l2-&gt;next = l1;</span><br><span class="line">            l2 = l2_tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* mid = <span class="built_in">middleNode</span>(head);</span><br><span class="line">        ListNode* l1 = head;</span><br><span class="line">        ListNode* l2 = mid-&gt;next; <span class="comment">//后半部分的头节点</span></span><br><span class="line">        mid-&gt;next = <span class="literal">nullptr</span>;      <span class="comment">//断开两半连接</span></span><br><span class="line">        l2 = <span class="built_in">reverseList</span>(l2);     <span class="comment">//反转后半部分</span></span><br><span class="line">        <span class="built_in">mergeList</span>(l1, l2);        <span class="comment">//交叉连接两部分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-4-141-环形列表"><a href="#3-4-141-环形列表" class="headerlink" title="3.4 141-环形列表"></a>3.4 141-环形列表</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle/description/">141</a></p><p><img src="/img/add18.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-5-面试题02-07-链表相交"><a href="#3-5-面试题02-07-链表相交" class="headerlink" title="3.5 面试题02.07-链表相交"></a>3.5 面试题02.07-链表相交</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">02.07</a></p><p><img src="/img/add19.png"></p><blockquote><p>时间复杂度为O(N),空间复杂度为O(1)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!headA || !headB)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pa = headA;</span><br><span class="line">        ListNode* pb = headB;</span><br><span class="line">        <span class="keyword">while</span>(pa != pb) </span><br><span class="line">        &#123;</span><br><span class="line">            pa = !pa ? headB : pa-&gt;next;</span><br><span class="line">            pb = !pb ? headA : pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//核心思想是,链表走过头后再重置为另一条链表,依次之间的差距会在第二次遍历后为0</span></span><br><span class="line">        <span class="keyword">return</span> pa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-哈希表"><a href="#4-哈希表" class="headerlink" title="4. 哈希表"></a>4. 哈希表</h1><h2 id="4-1-205-同构字符串"><a href="#4-1-205-同构字符串" class="headerlink" title="4.1 205-同构字符串"></a>4.1 205-同构字符串</h2><p><a href="https://leetcode.cn/problems/isomorphic-strings/description/">205</a></p><p><img src="/img/add20.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIsomorphic</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">char</span>&gt; um1;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">char</span>&gt; um2;</span><br><span class="line">        <span class="type">int</span> size = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> x = s[i];</span><br><span class="line">            <span class="type">char</span> y = t[i];</span><br><span class="line">            <span class="comment">//遇见过(重复使用了),并且对方字符串没有使用相对应的字符</span></span><br><span class="line">            <span class="keyword">if</span>((um1.<span class="built_in">count</span>(x) &amp;&amp; um1[x] != y) || </span><br><span class="line">                (um2.<span class="built_in">count</span>(y) &amp;&amp; um2[y] != x))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            um1[x] = y;</span><br><span class="line">            um2[y] = x;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5. 字符串"></a>5. 字符串</h1><h2 id="5-1-925-长按键入"><a href="#5-1-925-长按键入" class="headerlink" title="5.1 925-长按键入"></a>5.1 925-长按键入</h2><p><a href="https://leetcode.cn/problems/long-pressed-name/description/">925</a></p><p><img src="/img/add21.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isLongPressedName</span><span class="params">(string name, string typed)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; typed.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; name.<span class="built_in">size</span>() &amp;&amp; name[i] == typed[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; typed[j] == typed[j - <span class="number">1</span>]) <span class="comment">//如果要长按</span></span><br><span class="line">                j++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == name.<span class="built_in">size</span>(); <span class="comment">//name走完了就true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-2-844-比较含退格的字符串"><a href="#5-2-844-比较含退格的字符串" class="headerlink" title="5.2 844-比较含退格的字符串"></a>5.2 844-比较含退格的字符串</h2><p><a href="https://leetcode.cn/problems/backspace-string-compare/description/">844</a></p><p><img src="/img/add22.png"></p><blockquote><p>时间复杂度为O(N), 空间复杂度为O(1)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backspaceCompare</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j = t.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> skips = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> skipt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    skips++;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(skips &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    skips--;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(t[j] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    skipt++;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(skipt &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    skipt--;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] != t[j])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="6-二叉树"><a href="#6-二叉树" class="headerlink" title="6. 二叉树"></a>6. 二叉树</h1><h2 id="6-1-129-求根节点到叶节点数字之和"><a href="#6-1-129-求根节点到叶节点数字之和" class="headerlink" title="6.1 129-求根节点到叶节点数字之和"></a>6.1 129-求根节点到叶节点数字之和</h2><p><a href="https://leetcode.cn/problems/sum-root-to-leaf-numbers/description/">129</a></p><p><img src="/img/add23.png"></p><blockquote><p>dfs</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Recursion</span><span class="params">(TreeNode* root, <span class="type">int</span> prevsum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = prevsum*<span class="number">10</span> + root-&gt;val;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Recursion</span>(root-&gt;left,sum) + <span class="built_in">Recursion</span>(root-&gt;right,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(root,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-2-1382-将二叉搜索树变平衡"><a href="#6-2-1382-将二叉搜索树变平衡" class="headerlink" title="6.2 1382-将二叉搜索树变平衡"></a>6.2 1382-将二叉搜索树变平衡</h2><p><a href="https://leetcode.cn/problems/balance-a-binary-search-tree/description/">1382</a></p><p><img src="/img/add24.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Traversal</span><span class="params">(TreeNode* cur)</span> <span class="comment">//将有序树转换为有序数组</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Traversal</span>(cur-&gt;left);</span><br><span class="line">        vec.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="built_in">Traversal</span>(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将有序数组转换为平衡二叉树</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">GetTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> mid = left + (right-left) / <span class="number">2</span>;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[mid]);</span><br><span class="line">        root-&gt;left = <span class="built_in">GetTree</span>(nums, left, mid<span class="number">-1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">GetTree</span>(nums, mid+<span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">balanceBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">Traversal</span>(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">GetTree</span>(vec, <span class="number">0</span>, vec.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-3-100-相同的树"><a href="#6-3-100-相同的树" class="headerlink" title="6.3 100-相同的树"></a>6.3 100-相同的树</h2><p><a href="https://leetcode.cn/problems/same-tree/description/">100</a></p><p><img src="/img/add25.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!p &amp;&amp; !q)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!p || !q) <span class="comment">//一个有一个没有</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;val != q-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">isSameTree</span>(p-&gt;left, q-&gt;left) &amp;&amp; <span class="built_in">isSameTree</span>(p-&gt;right,q-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-4-116-填充每个节点的下一个右侧节点指针"><a href="#6-4-116-填充每个节点的下一个右侧节点指针" class="headerlink" title="6.4 116-填充每个节点的下一个右侧节点指针"></a>6.4 116-填充每个节点的下一个右侧节点指针</h2><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/">116</a></p><p><img src="/img/add26.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        Node* leftmost = root;</span><br><span class="line">        <span class="keyword">while</span>(leftmost-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            Node* head = leftmost;</span><br><span class="line">            <span class="keyword">while</span>(head)</span><br><span class="line">            &#123;</span><br><span class="line">                head-&gt;left-&gt;next = head-&gt;right;</span><br><span class="line">                <span class="keyword">if</span>(head-&gt;next) <span class="comment">//如果右边有节点</span></span><br><span class="line">                    head-&gt;right-&gt;next = head-&gt;next-&gt;left;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            leftmost = leftmost-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="7-回溯算法"><a href="#7-回溯算法" class="headerlink" title="7. 回溯算法"></a>7. 回溯算法</h1><h2 id="7-1-52-N皇后II"><a href="#7-1-52-N皇后II" class="headerlink" title="7.1* 52-N皇后II"></a>7.1* 52-N皇后II</h2><p><a href="https://leetcode.cn/problems/n-queens-ii/description/">52</a></p><p><img src="/img/add27.png"></p><blockquote><p>…</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; columns, diagonals1, diagonals2;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">backtrack</span>(n, <span class="number">0</span>, columns, diagonals1, diagonals2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, unordered_set&lt;<span class="type">int</span>&gt;&amp; columns, unordered_set&lt;<span class="type">int</span>&gt;&amp; diagonals1, unordered_set&lt;<span class="type">int</span>&gt;&amp; diagonals2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (columns.<span class="built_in">find</span>(i) != columns.<span class="built_in">end</span>()) </span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> diagonal1 = row - i;</span><br><span class="line">                <span class="keyword">if</span> (diagonals1.<span class="built_in">find</span>(diagonal1) != diagonals1.<span class="built_in">end</span>()) </span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> diagonal2 = row + i;</span><br><span class="line">                <span class="keyword">if</span> (diagonals2.<span class="built_in">find</span>(diagonal2) != diagonals2.<span class="built_in">end</span>()) </span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                </span><br><span class="line">                columns.<span class="built_in">insert</span>(i);</span><br><span class="line">                diagonals1.<span class="built_in">insert</span>(diagonal1);</span><br><span class="line">                diagonals2.<span class="built_in">insert</span>(diagonal2);</span><br><span class="line">                count += <span class="built_in">backtrack</span>(n, row + <span class="number">1</span>, columns, diagonals1, diagonals2);</span><br><span class="line">                columns.<span class="built_in">erase</span>(i);</span><br><span class="line">                diagonals1.<span class="built_in">erase</span>(diagonal1);</span><br><span class="line">                diagonals2.<span class="built_in">erase</span>(diagonal2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="8-贪心算法"><a href="#8-贪心算法" class="headerlink" title="8.  贪心算法"></a>8.  贪心算法</h1><h2 id="8-1-649-Dota2参议院"><a href="#8-1-649-Dota2参议院" class="headerlink" title="8.1 649-Dota2参议院"></a>8.1 649-Dota2参议院</h2><p><a href="https://leetcode.cn/problems/dota2-senate/description/">649</a></p><p><img src="/img/add28.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">predictPartyVictory</span><span class="params">(string senate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// R = true表示本轮循环结束后，字符串里依然有R。D同理</span></span><br><span class="line">        <span class="type">bool</span> R = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">bool</span> D = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当flag大于0时，R在D前出现，R可以消灭D。</span></span><br><span class="line">        <span class="comment">// 当flag小于0时，D在R前出现，D可以消灭R</span></span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (R &amp;&amp; D) <span class="comment">// 一旦R或者D为false，就结束循环，说明本轮结束后只剩下R或者D了</span></span><br><span class="line">        &#123; </span><br><span class="line">            R = <span class="literal">false</span>;</span><br><span class="line">            D = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; senate.<span class="built_in">size</span>(); i++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (senate[i] == <span class="string">&#x27;R&#x27;</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (flag &lt; <span class="number">0</span>) </span><br><span class="line">                        senate[i] = <span class="number">0</span>; <span class="comment">// 消灭R，R此时为false</span></span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                        R = <span class="literal">true</span>; <span class="comment">// 如果没被消灭，本轮循环结束有R</span></span><br><span class="line">                    flag++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (senate[i] == <span class="string">&#x27;D&#x27;</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (flag &gt; <span class="number">0</span>) <span class="comment">//前面有D</span></span><br><span class="line">                        senate[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                        D = <span class="literal">true</span>;</span><br><span class="line">                    flag--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环结束之后，R和D只能有一个为true</span></span><br><span class="line">        <span class="keyword">return</span> R == <span class="literal">true</span> ? <span class="string">&quot;Radiant&quot;</span> : <span class="string">&quot;Dire&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="8-2-1221-分割平衡字符串"><a href="#8-2-1221-分割平衡字符串" class="headerlink" title="8.2 1221-分割平衡字符串"></a>8.2 1221-分割平衡字符串</h2><p><a href="https://leetcode.cn/problems/split-a-string-in-balanced-strings/description/">1221</a></p><p><img src="/img/add29.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">balancedStringSplit</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : s)</span><br><span class="line">        &#123;</span><br><span class="line">            ch == <span class="string">&#x27;L&#x27;</span> ? ++d : --d;</span><br><span class="line">            <span class="keyword">if</span>(d == <span class="number">0</span>)</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="9-动态规划"><a href="#9-动态规划" class="headerlink" title="9. 动态规划"></a>9. 动态规划</h1><h2 id="9-1-5-最长回文子串"><a href="#9-1-5-最长回文子串" class="headerlink" title="9.1 5-最长回文子串"></a>9.1 5-最长回文子串</h2><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/description/">5</a></p><p><img src="/img/add30.png"></p><blockquote><p>&#x2F;&#x2F;</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) </span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[i][j] 表示 s[i..j] 是否是回文串</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="comment">// 初始化：所有长度为 1 的子串都是回文串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 递推开始</span></span><br><span class="line">        <span class="comment">// 先枚举子串长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> L = <span class="number">2</span>; L &lt;= n; L++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 枚举左边界，左边界的上限设置可以宽松一些</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span></span><br><span class="line">                <span class="type">int</span> j = L + i - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 如果右边界越界，就可以退出当前循环</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= n) </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s[i] != s[j]) </span><br><span class="line">                    dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) </span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 只要 dp[i][L] == true 成立就表示子串 s[i..L] 是回文,此时记录回文长度和起始位置</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; maxLen) </span><br><span class="line">                &#123;</span><br><span class="line">                    maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(begin, maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9-2-132-分割回文串II"><a href="#9-2-132-分割回文串II" class="headerlink" title="9.2* 132-分割回文串II"></a>9.2* 132-分割回文串II</h2><p><a href="https://leetcode.cn/problems/palindrome-partitioning-ii/description/">132</a></p><p><img src="/img/add31.png"></p><blockquote><p>&#x2F;&#x2F;</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCut</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) </span><br><span class="line">                g[i][j] = (s[i] == s[j]) &amp;&amp; g[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n, INT_MAX)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[<span class="number">0</span>][i]) </span><br><span class="line">                f[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (g[j + <span class="number">1</span>][i]) </span><br><span class="line">                        f[i] = <span class="built_in">min</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9-3-673-最长递增子序列的个数"><a href="#9-3-673-最长递增子序列的个数" class="headerlink" title="9.3 673-最长递增子序列的个数"></a>9.3 673-最长递增子序列的个数</h2><p><a href="https://leetcode.cn/problems/number-of-longest-increasing-subsequence/description/">673</a></p><p><img src="/img/add32.png"></p><blockquote><p>&#x2F;&#x2F;</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findNumberOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), maxLen = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span>, <span class="title">cnt</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            cnt[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[j] + <span class="number">1</span> &gt; dp[i]) </span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                        cnt[i] = cnt[j]; <span class="comment">// 重置计数</span></span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (dp[j] + <span class="number">1</span> == dp[i]) </span><br><span class="line">                        cnt[i] += cnt[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; maxLen) </span><br><span class="line">            &#123;</span><br><span class="line">                maxLen = dp[i];</span><br><span class="line">                ans = cnt[i]; <span class="comment">// 重置计数</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dp[i] == maxLen) </span><br><span class="line">                ans += cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="10-图论"><a href="#10-图论" class="headerlink" title="10. 图论"></a>10. 图论</h1><h2 id="10-1-463-岛屿的周长"><a href="#10-1-463-岛屿的周长" class="headerlink" title="10.1 463-岛屿的周长"></a>10.1 463-岛屿的周长</h2><p><a href="https://leetcode.cn/problems/island-perimeter/description/">463</a></p><p><img src="/img/add33.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">islandPerimeter</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;    <span class="comment">// 陆地数量</span></span><br><span class="line">        <span class="type">int</span> cover = <span class="number">0</span>;  <span class="comment">// 相邻数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].<span class="built_in">size</span>(); j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                    <span class="comment">// 统计上边相邻陆地</span></span><br><span class="line">                    <span class="keyword">if</span>(i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i - <span class="number">1</span>][j] == <span class="number">1</span>) </span><br><span class="line">                        cover++;</span><br><span class="line">                    <span class="comment">// 统计左边相邻陆地</span></span><br><span class="line">                    <span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">                        cover++;</span><br><span class="line">                    <span class="comment">// 为什么没统计下边和右边？ 因为避免重复计算</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum * <span class="number">4</span> - cover * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="10-2-841-钥匙和房间"><a href="#10-2-841-钥匙和房间" class="headerlink" title="10.2 841-钥匙和房间"></a>10.2 841-钥匙和房间</h2><p><a href="https://leetcode.cn/problems/keys-and-rooms/description/">841</a></p><p><img src="/img/add34.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vis;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; rooms, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vis[x] = <span class="literal">true</span>;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : rooms[x])</span><br><span class="line">            <span class="keyword">if</span>(!vis[e]) <span class="comment">//如果这个房间第一次有方法进入</span></span><br><span class="line">                <span class="built_in">dfs</span>(rooms,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canVisitAllRooms</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; rooms)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = rooms.<span class="built_in">size</span>();</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        vis.<span class="built_in">resize</span>(size); <span class="comment">//必须初始化大小</span></span><br><span class="line">        <span class="built_in">dfs</span>(rooms,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> num == size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="10-3-127-单词接龙"><a href="#10-3-127-单词接龙" class="headerlink" title="10.3* 127-单词接龙"></a>10.3* 127-单词接龙</h2><p><a href="https://leetcode.cn/problems/word-ladder/description/">127</a></p><p><img src="/img/add35.png"></p><blockquote><p>…</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ladderLength</span><span class="params">(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将vector转成unordered_set，提高查询速度</span></span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">wordSet</span><span class="params">(wordList.begin(), wordList.end())</span></span>;</span><br><span class="line">        <span class="comment">// 如果endWord没有在wordSet出现，直接返回0</span></span><br><span class="line">        <span class="keyword">if</span> (wordSet.<span class="built_in">find</span>(endWord) == wordSet.<span class="built_in">end</span>()) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录word是否访问过</span></span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; visitMap; <span class="comment">// &lt;word, 查询到这个word路径长度&gt;</span></span><br><span class="line">        <span class="comment">// 初始化队列</span></span><br><span class="line">        queue&lt;string&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(beginWord);</span><br><span class="line">        <span class="comment">// 初始化visitMap</span></span><br><span class="line">        visitMap.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(beginWord, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            string word = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> path = visitMap[word]; <span class="comment">// 这个word的路径长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++) </span><br><span class="line">            &#123;</span><br><span class="line">                string newWord = word; <span class="comment">// 用一个新单词替换word，因为每次置换一个字母</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">26</span>; j++) </span><br><span class="line">                &#123;</span><br><span class="line">                    newWord[i] = j + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (newWord == endWord) </span><br><span class="line">                        <span class="keyword">return</span> path + <span class="number">1</span>; <span class="comment">// 找到了end，返回path+1</span></span><br><span class="line">                    <span class="comment">// wordSet出现了newWord，并且newWord没有被访问过</span></span><br><span class="line">                    <span class="keyword">if</span> (wordSet.<span class="built_in">find</span>(newWord) != wordSet.<span class="built_in">end</span>()</span><br><span class="line">                            &amp;&amp; visitMap.<span class="built_in">find</span>(newWord) == visitMap.<span class="built_in">end</span>()) </span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 添加访问信息</span></span><br><span class="line">                        visitMap.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(newWord, path + <span class="number">1</span>));</span><br><span class="line">                        que.<span class="built_in">push</span>(newWord);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="11-并查集"><a href="#11-并查集" class="headerlink" title="11. 并查集"></a>11. 并查集</h1><h2 id="11-1-684-冗余连接"><a href="#11-1-684-冗余连接" class="headerlink" title="11.1 684-冗余连接"></a>11.1 684-冗余连接</h2><p><a href="https://leetcode.cn/problems/redundant-connection/description/">684</a></p><p><img src="/img/add36.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1005</span>; <span class="comment">// 节点数量3 到 1000</span></span><br><span class="line">    <span class="type">int</span> father[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并查集初始化</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 并查集里寻根的过程</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u == father[u] ? u : father[u] = <span class="built_in">find</span>(father[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将v-&gt;u 这条边加入并查集</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        u = <span class="built_in">find</span>(u);</span><br><span class="line">        v = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (u == v) </span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        father[v] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断 u 和 v是否找到同一个根，本题用不上</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        u = <span class="built_in">find</span>(u);</span><br><span class="line">        v = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">return</span> u == v;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findRedundantConnection</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edges.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">same</span>(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>])) </span><br><span class="line">                <span class="keyword">return</span> edges[i];</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="built_in">join</span>(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="11-2-685-冗余连接-II"><a href="#11-2-685-冗余连接-II" class="headerlink" title="11.2* 685-冗余连接 II"></a>11.2* 685-冗余连接 II</h2><p><a href="https://leetcode.cn/problems/redundant-connection-ii/description/">685</a></p><p><img src="/img/add37.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>; <span class="comment">// 如题：二维数组大小的在3到1000范围内</span></span><br><span class="line">    <span class="type">int</span> father[N];</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 边的数量</span></span><br><span class="line">    <span class="comment">// 并查集初始化</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 并查集里寻根的过程</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u == father[u] ? u : father[u] = <span class="built_in">find</span>(father[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将v-&gt;u 这条边加入并查集</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">join</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        u = <span class="built_in">find</span>(u);</span><br><span class="line">        v = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (u == v) </span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        father[v] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断 u 和 v是否找到同一个根</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        u = <span class="built_in">find</span>(u);</span><br><span class="line">        v = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">return</span> u == v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在有向图里找到删除的那条边，使其变成树</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getRemoveEdge</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(); <span class="comment">// 初始化并查集</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        &#123; <span class="comment">// 遍历所有的边</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">same</span>(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]))  <span class="comment">// 构成有向环了，就是要删除的边</span></span><br><span class="line">                <span class="keyword">return</span> edges[i];</span><br><span class="line">            <span class="built_in">join</span>(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删一条边之后判断是不是树</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isTreeAfterRemoveEdge</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> deleteEdge)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(); <span class="comment">// 初始化并查集</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == deleteEdge) </span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">same</span>(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]))  <span class="comment">// 构成有向环了，一定不是树</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">join</span>(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findRedundantDirectedConnection</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> inDegree[N] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 记录节点入度</span></span><br><span class="line">        n = edges.<span class="built_in">size</span>(); <span class="comment">// 边的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            inDegree[edges[i][<span class="number">1</span>]]++; <span class="comment">// 统计入度</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec; <span class="comment">// 记录入度为2的边（如果有的话就两条边）</span></span><br><span class="line">        <span class="comment">// 找入度为2的节点所对应的边，注意要倒叙，因为优先返回最后出现在二维数组中的答案</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">            <span class="keyword">if</span> (inDegree[edges[i][<span class="number">1</span>]] == <span class="number">2</span>)</span><br><span class="line">                vec.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="comment">// 处理图中情况1 和 情况2</span></span><br><span class="line">        <span class="comment">// 如果有入度为2的节点，那么一定是两条边里删一个，看删哪个可以构成树</span></span><br><span class="line">        <span class="keyword">if</span> (vec.<span class="built_in">size</span>() &gt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isTreeAfterRemoveEdge</span>(edges, vec[<span class="number">0</span>])) </span><br><span class="line">                <span class="keyword">return</span> edges[vec[<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> edges[vec[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理图中情况3</span></span><br><span class="line">        <span class="comment">// 明确没有入度为2的情况，那么一定有有向环，找到构成环的边返回就可以了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getRemoveEdge</span>(edges);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="12-模拟"><a href="#12-模拟" class="headerlink" title="12. 模拟"></a>12. 模拟</h1><h2 id="12-1-657-机器人能否返回原点"><a href="#12-1-657-机器人能否返回原点" class="headerlink" title="12.1 657-机器人能否返回原点"></a>12.1 657-机器人能否返回原点</h2><p><a href="https://leetcode.cn/problems/robot-return-to-origin/description/">657</a></p><p><img src="/img/add38.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">judgeCircle</span><span class="params">(string moves)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; moves.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (moves[i] == <span class="string">&#x27;U&#x27;</span>) y++;</span><br><span class="line">            <span class="keyword">if</span> (moves[i] == <span class="string">&#x27;D&#x27;</span>) y--;</span><br><span class="line">            <span class="keyword">if</span> (moves[i] == <span class="string">&#x27;L&#x27;</span>) x--;</span><br><span class="line">            <span class="keyword">if</span> (moves[i] == <span class="string">&#x27;R&#x27;</span>) x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="12-2-31-下一个排列"><a href="#12-2-31-下一个排列" class="headerlink" title="12.2 31-下一个排列"></a>12.2 31-下一个排列</h2><p><a href="https://leetcode.cn/problems/next-permutation/description/">31</a></p><p><img src="/img/add39.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = nums.<span class="built_in">size</span>() - <span class="number">1</span>; j &gt; i; j--) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[i]) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(nums[j], nums[i]);</span><br><span class="line">                    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>() + i + <span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 到这里了说明整个数组都是倒叙了，反转一下便可</span></span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="13-位运算"><a href="#13-位运算" class="headerlink" title="13. 位运算"></a>13. 位运算</h1><h2 id="13-1-1356-根据数字二进制下1的数目排序"><a href="#13-1-1356-根据数字二进制下1的数目排序" class="headerlink" title="13.1 1356-根据数字二进制下1的数目排序"></a>13.1 1356-根据数字二进制下1的数目排序</h2><p><a href="https://leetcode.cn/problems/sort-integers-by-the-number-of-1-bits/description/">1356</a></p><p><img src="/img/add40.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">bitCount</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 计算n的二进制中1的数量</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) </span><br><span class="line">        &#123;</span><br><span class="line">            n &amp;= (n <span class="number">-1</span>); <span class="comment">// 清除最低位的1</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> bitA = <span class="built_in">bitCount</span>(a);</span><br><span class="line">        <span class="type">int</span> bitB = <span class="built_in">bitCount</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (bitA == bitB) </span><br><span class="line">            <span class="keyword">return</span> a &lt; b; <span class="comment">// 如果bit中1数量相同，比较数值大小</span></span><br><span class="line">        <span class="keyword">return</span> bitA &lt; bitB; <span class="comment">// 否则比较bit中1数量大小</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortByBits</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-单调栈-1-1-739-每日温度&quot;&gt;&lt;a href=&quot;#1-单调栈-1-1-739-每日温度&quot; class=&quot;headerlink&quot; title=&quot;1. 单调栈# 1.1 739-每日温度&quot;&gt;&lt;/a&gt;1. 单调栈# 1.1 739-每日温度&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="代码随想录" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://example.com/2023/11/27/dp/"/>
    <id>http://example.com/2023/11/27/dp/</id>
    <published>2023-11-27T14:00:24.000Z</published>
    <updated>2023-12-01T12:05:58.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础题目"><a href="#1-基础题目" class="headerlink" title="1. 基础题目"></a>1. 基础题目</h1><h2 id="1-1-509-斐波那契数"><a href="#1-1-509-斐波那契数" class="headerlink" title="1.1 509-斐波那契数"></a>1.1 509-斐波那契数</h2><p><a href="https://leetcode.cn/problems/fibonacci-number/description/">509</a></p><p><img src="/img/dp1.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = dp[<span class="number">0</span>]+dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2-70-爬楼梯"><a href="#1-2-70-爬楼梯" class="headerlink" title="1.2 70-爬楼梯"></a>1.2 70-爬楼梯</h2><p><a href="https://leetcode.cn/problems/climbing-stairs/submissions/480743178/">70</a></p><p><img src="/img/dp2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = dp[<span class="number">1</span>] + dp[<span class="number">2</span>];</span><br><span class="line">            dp[<span class="number">1</span>] = dp[<span class="number">2</span>];</span><br><span class="line">            dp[<span class="number">2</span>] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-746-使用最小花费爬楼梯"><a href="#1-3-746-使用最小花费爬楼梯" class="headerlink" title="1.3 746-使用最小花费爬楼梯"></a>1.3 746-使用最小花费爬楼梯</h2><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746</a></p><p><img src="/img/dp3.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> dp0 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> dp1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> dpi;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= cost.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dpi = <span class="built_in">min</span>(cost[i<span class="number">-1</span>]+dp1,cost[i<span class="number">-2</span>]+dp0);</span><br><span class="line">            dp0 = dp1;</span><br><span class="line">            dp1 = dpi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dpi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-4-62-不同路径"><a href="#1-4-62-不同路径" class="headerlink" title="1.4 62-不同路径"></a>1.4 62-不同路径</h2><p><a href="https://leetcode.cn/problems/unique-paths/">62</a></p><p><img src="/img/dp4.png"></p><blockquote><p>便于理解的</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i][j] 到达i,j坐标处的路径数</span></span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i-1][j] + dp[i][j-1];</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>以上方法时间空间复杂度都为O(MN)<br>用滚动数组代替上面这种方式(效率一样,空间复杂度降低为O(N))</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)  <span class="comment">//将上面的方式累加到一行中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j) </span><br><span class="line">                f[j]+=f[j<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>还有组合数方法, 暂且不提,其时间复杂度可以达到O(M),空间复杂度为O(1)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = n, y = <span class="number">1</span>; y &lt; m; ++x, ++y) &#123;</span><br><span class="line">            ans = ans * x / y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-5-63-不同路径II"><a href="#1-5-63-不同路径II" class="headerlink" title="1.5 63-不同路径II"></a>1.5 63-不同路径II</h2><p><a href="https://leetcode.cn/problems/unique-paths-ii/">63</a></p><p><img src="/img/dp5.png"></p><blockquote><p>时间空间复杂度都为O(MN)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = obstacleGrid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid.<span class="built_in">at</span>(<span class="number">0</span>).<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(obstacleGrid[m<span class="number">-1</span>][n<span class="number">-1</span>] == <span class="number">1</span> || obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="comment">//起终点有障碍</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>)); <span class="comment">//初始化为0,以便忽略障碍物</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>; ++i) <span class="comment">//初始化列</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; obstacleGrid[<span class="number">0</span>][i] == <span class="number">0</span>; ++i) <span class="comment">//初始化行</span></span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][j] != <span class="number">1</span>) <span class="comment">//有障碍直接忽略</span></span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>空间复杂度减少至O(M)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> m = obstacleGrid.<span class="built_in">at</span>(<span class="number">0</span>).<span class="built_in">size</span>();</span><br><span class="line">        vector &lt;<span class="type">int</span>&gt; <span class="built_in">dp</span>(m);</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) </span><br><span class="line">                    dp[j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; obstacleGrid[i][j - <span class="number">1</span>] == <span class="number">0</span>) </span><br><span class="line">                    dp[j] += dp[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-6-343-整数拆分"><a href="#1-6-343-整数拆分" class="headerlink" title="1.6 343-整数拆分"></a>1.6 343-整数拆分</h2><p><a href="https://leetcode.cn/problems/integer-break/">343</a></p><p><img src="/img/dp6.png"></p><blockquote><p>时间复杂度为O(n^2)<br>空间复杂度为O(n)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="comment">//算n前面的数,以推断出n的最大积</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> curmax = <span class="number">0</span>; </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j) <span class="comment">//拆分为两个数和多个数进行大小比较</span></span><br><span class="line">                curmax = <span class="built_in">max</span>(curmax, <span class="built_in">max</span>(j * (i-j) , j * dp[i-j]) );</span><br><span class="line">            dp[i] = curmax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>利用数学知识可以将时间空间复杂度都降低至O(1)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) </span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> quotient = n / <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> remainder = n % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (remainder == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">3</span>, quotient);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remainder == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">return</span> (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">3</span>, quotient - <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">return</span> (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">3</span>, quotient) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-7-96-不同的二叉搜索树"><a href="#1-7-96-不同的二叉搜索树" class="headerlink" title="1.7 96-不同的二叉搜索树"></a>1.7 96-不同的二叉搜索树</h2><p><a href="https://leetcode.cn/problems/unique-binary-search-trees/">96</a></p><p><img src="/img/dp7.png"></p><blockquote><p>最简单的方式仍然需要进行公式的推导<br>并且时间复杂度有O(N^2)<br>空间复杂度O(N)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//空树也可以看作是一个搜索二叉树</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">                dp[i] += dp[j<span class="number">-1</span>] * dp[i-j]; <span class="comment">//需要通过例子算出dp的推导过程</span></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>进行数学运算,涉及到 卡塔兰数 ,可使时间复杂度达到O(N),空间复杂度达到O(1)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTrees</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> C = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            C = C * <span class="number">2</span> * (<span class="number">2</span> * i + <span class="number">1</span>) / (i + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="2-背包问题"><a href="#2-背包问题" class="headerlink" title="2. 背包问题"></a>2. 背包问题</h1><h2 id="2-1-背包问题基础"><a href="#2-1-背包问题基础" class="headerlink" title="2.1 背包问题基础"></a>2.1 背包问题基础</h2><p><img src="/img/dp8.png"></p><blockquote><p>二维dp实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,bagweight; <span class="comment">//bagweight是最大携带重量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(n,<span class="number">0</span>)</span></span>; <span class="comment">//物品所占重量</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(n,<span class="number">0</span>)</span></span>; <span class="comment">//物品价值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        cin &gt;&gt; weight[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        cin&gt;&gt;value[i];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//dp数组</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(weight.<span class="built_in">size</span>(),<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(bagweight+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = weight[<span class="number">0</span>]; i &lt;= bagweight; ++i)</span><br><span class="line">        dp[<span class="number">0</span>][i] = value[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; weight.<span class="built_in">size</span>();++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= bagweight; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; weight[i]) <span class="comment">//装不下就继承上一次的价值</span></span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-weight[i]]+value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;dp[weight.<span class="built_in">size</span>()<span class="number">-1</span>][bagweight] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt;bagweight)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一维dp实现(滚动数组)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维dp数组实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取 M 和 N</span></span><br><span class="line">    <span class="type">int</span> M, N;</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">costs</span><span class="params">(M)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">values</span><span class="params">(M)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        cin &gt;&gt; costs[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">        cin &gt;&gt; values[j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个动态规划数组dp，初始值为0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外层循环遍历每个类型的研究材料</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        <span class="comment">// 内层循环从 N 空间逐渐减少到当前研究材料所占空间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = N; j &gt;= costs[i]; --j)</span><br><span class="line">            <span class="comment">// 考虑当前研究材料选择和不选择的情况，选择最大值</span></span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - costs[i]] + values[i]);</span><br><span class="line">    <span class="comment">// 输出dp[N]，即在给定 N 行李空间可以携带的研究材料最大价值</span></span><br><span class="line">    cout &lt;&lt; dp[N] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-416-分割等和子集"><a href="#2-2-416-分割等和子集" class="headerlink" title="2.2 416-分割等和子集"></a>2.2 416-分割等和子集</h2><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">416</a></p><p><img src="/img/dp9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e: nums)</span><br><span class="line">            sum+=e;</span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">1</span>) <span class="comment">//判断能否分为两部分</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="type">int</span> target = sum/<span class="number">2</span>; <span class="comment">//目标</span></span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">10001</span>,<span class="number">0</span>)</span></span>; <span class="comment">//dp[i]代表着i的空间最多放多少</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = target; j &gt;= nums[i]; --j)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j],dp[j-nums[i]]+nums[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[target] == target)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-1049-最后一块石头的重量II"><a href="#2-3-1049-最后一块石头的重量II" class="headerlink" title="2.3 1049-最后一块石头的重量II"></a>2.3 1049-最后一块石头的重量II</h2><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/">1049</a></p><p><img src="/img/dp10.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">15001</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : stones)</span><br><span class="line">            sum+=e;</span><br><span class="line">        <span class="type">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stones.<span class="built_in">size</span>(); i++)  <span class="comment">// 遍历物品</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = target; j &gt;= stones[i]; j--)  <span class="comment">// 遍历背包</span></span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - stones[i]] + stones[i]);</span><br><span class="line">        <span class="comment">//23 11</span></span><br><span class="line">        <span class="keyword">return</span> sum - dp[target] - dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-494-目标和"><a href="#2-4-494-目标和" class="headerlink" title="2.4 494-目标和"></a>2.4 494-目标和</h2><p><a href="https://leetcode.cn/problems/target-sum/description/">494</a></p><p><img src="/img/dp11.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : nums) </span><br><span class="line">            sum += e;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(target) &gt; sum || (target + sum) % <span class="number">2</span> == <span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 此时没有方案</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> bagSize = (target + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(bagSize + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = bagSize; j &gt;= nums[i]; j--) </span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">        <span class="keyword">return</span> dp[bagSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-5-474-一和零"><a href="#2-5-474-一和零" class="headerlink" title="2.5 474-一和零"></a>2.5 474-一和零</h2><p><a href="https://leetcode.cn/problems/ones-and-zeroes/description/">474</a></p><p><img src="/img/dp12.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n + <span class="number">1</span>, <span class="number">0</span>)); <span class="comment">// 默认初始化0</span></span><br><span class="line">        <span class="keyword">for</span> (string str : strs) </span><br><span class="line">        &#123; <span class="comment">// 遍历物品</span></span><br><span class="line">            <span class="type">int</span> oneNum = <span class="number">0</span>, zeroNum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : str) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>)   </span><br><span class="line">                    zeroNum++;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    oneNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt;= zeroNum; i--)  <span class="comment">// 遍历背包容量且从后向前遍历！</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= oneNum; j--)</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>完全背包问题:</strong></p><h2 id="2-6-518-零钱兑换II"><a href="#2-6-518-零钱兑换II" class="headerlink" title="2.6 518-零钱兑换II"></a>2.6 518-零钱兑换II</h2><p><a href="https://leetcode.cn/problems/coin-change-ii/description/">518</a></p><p><img src="/img/dp13.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; coins.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = coins[i]; j &lt;= amount; ++j)</span><br><span class="line">                dp[j] += dp[j-coins[i]];</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-7-377-组合综合IV"><a href="#2-7-377-组合综合IV" class="headerlink" title="2.7 377-组合综合IV"></a>2.7 377-组合综合IV</h2><p><a href="https://leetcode.cn/problems/combination-sum-iv/description/">377</a></p><p><img src="/img/dp14.png"></p><blockquote><p>和上一题的区别在于这是组合,即(1,3)和(3,1)可看为两组</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= target; i++) <span class="comment">//遍历背包</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) </span><br><span class="line">                <span class="keyword">if</span> (i &gt;= nums[j] &amp;&amp; dp[i] &lt; INT_MAX - dp[i - nums[j]]) </span><br><span class="line">                    dp[i] += dp[i - nums[j]];</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-8-70-爬楼梯"><a href="#2-8-70-爬楼梯" class="headerlink" title="2.8 70-爬楼梯"></a>2.8 70-爬楼梯</h2><p><a href="https://leetcode.cn/problems/climbing-stairs/">70</a></p><p><img src="/img/dp15.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>; ++j)</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=j)</span><br><span class="line">                    dp[i] += dp[i-j];</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-9-322-零钱兑换"><a href="#2-9-322-零钱兑换" class="headerlink" title="2.9 322-零钱兑换"></a>2.9 322-零钱兑换</h2><p><a href="https://leetcode.cn/problems/coin-change/description/">322</a></p><p><img src="/img/dp16.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= amount; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; coins.<span class="built_in">size</span>(); ++j)</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= coins[j] &amp;&amp; dp[i-coins[j]] != INT_MAX)</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i-coins[j]]+<span class="number">1</span>,dp[i]);</span><br><span class="line">        <span class="keyword">if</span>(dp[amount] == INT_MAX)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-10-279-完全平方数"><a href="#2-10-279-完全平方数" class="headerlink" title="2.10 279-完全平方数"></a>2.10 279-完全平方数</h2><p><a href="https://leetcode.cn/problems/perfect-squares/description/">279</a></p><p><img src="/img/dp17.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j*j &lt;= i; ++j)</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i],dp[i-j*j]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-11-239-单词拆分"><a href="#2-11-239-单词拆分" class="headerlink" title="2.11 239-单词拆分"></a>2.11 239-单词拆分</h2><p><a href="https://leetcode.cn/problems/word-break/description/">139</a></p><p><img src="/img/dp18.png"></p><blockquote><p>难</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">wordSet</span><span class="params">(wordDict.begin(),wordDict.end())</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(s.size()+<span class="number">1</span>,<span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j&lt;i ;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                string word = s.<span class="built_in">substr</span>(j,i-j);</span><br><span class="line">                <span class="keyword">if</span>(wordSet.<span class="built_in">find</span>(word) != wordSet.<span class="built_in">end</span>() &amp;&amp; dp[j])</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="3-打家劫舍问题"><a href="#3-打家劫舍问题" class="headerlink" title="3. 打家劫舍问题"></a>3. 打家劫舍问题</h1><h2 id="3-1-198-打家劫舍"><a href="#3-1-198-打家劫舍" class="headerlink" title="3.1 198-打家劫舍"></a>3.1 198-打家劫舍</h2><p><a href="https://leetcode.cn/problems/house-robber/description/">198</a></p><p><img src="/img/dp19.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i],dp[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> dp[nums.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-2-213-打家劫舍II"><a href="#3-2-213-打家劫舍II" class="headerlink" title="3.2 213-打家劫舍II"></a>3.2 213-打家劫舍II</h2><p><a href="https://leetcode.cn/problems/house-robber-ii/description/">213</a></p><p><img src="/img/dp20.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">robrange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> start,<span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(end == start)</span><br><span class="line">            <span class="keyword">return</span> nums[start];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size())</span></span>;</span><br><span class="line"></span><br><span class="line">        dp[start] = nums[start];</span><br><span class="line">        dp[start+<span class="number">1</span>] = <span class="built_in">max</span>(nums[start],nums[start+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = start+<span class="number">2</span>; i &lt;= end; ++i)</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i],dp[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> dp[end];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ans1 = <span class="built_in">robrange</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-2</span>); <span class="comment">//不考虑尾</span></span><br><span class="line">        <span class="type">int</span> ans2 = <span class="built_in">robrange</span>(nums,<span class="number">1</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>); <span class="comment">//不考虑头</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(ans1,ans2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-3-337-打家劫舍III"><a href="#3-3-337-打家劫舍III" class="headerlink" title="3.3 337-打家劫舍III"></a>3.3 337-打家劫舍III</h2><p><a href="https://leetcode.cn/problems/house-robber-iii/description/">337</a></p><p><img src="/img/dp21.png"></p><blockquote><p>…</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">robTree</span><span class="params">(TreeNode* cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur)</span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; left = <span class="built_in">robTree</span>(cur-&gt;left);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; right = <span class="built_in">robTree</span>(cur-&gt;right);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> val_cur = cur-&gt;val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> val_nocur = <span class="built_in">max</span>(left[<span class="number">0</span>],left[<span class="number">1</span>]) + <span class="built_in">max</span>(right[<span class="number">0</span>],right[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> &#123;val_nocur,val_cur&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans = <span class="built_in">robTree</span>(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(ans[<span class="number">0</span>],ans[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-股票系列"><a href="#4-股票系列" class="headerlink" title="4. 股票系列"></a>4. 股票系列</h1><h2 id="4-1-121-买卖股票的最佳时机"><a href="#4-1-121-买卖股票的最佳时机" class="headerlink" title="4.1 121-买卖股票的最佳时机"></a>4.1 121-买卖股票的最佳时机</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/submissions/483696834/">121</a></p><p><img src="/img/dp22.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>)); <span class="comment">//只开辟了2*2的大小</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>]; <span class="comment">//买股票后的钱</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;          <span class="comment">//卖股票后的钱</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//买之前的和买现在的</span></span><br><span class="line">            dp[i%<span class="number">2</span>][<span class="number">0</span>] = <span class="built_in">max</span>(dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>],-prices[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//之前卖出,和现在卖出取赚的最多的</span></span><br><span class="line">            dp[i%<span class="number">2</span>][<span class="number">1</span>] = <span class="built_in">max</span>(dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">1</span>],prices[i] + dp[(i<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(size<span class="number">-1</span>)%<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-2-122-买卖股票的最佳时机II"><a href="#4-2-122-买卖股票的最佳时机II" class="headerlink" title="4.2 122-买卖股票的最佳时机II"></a>4.2 122-买卖股票的最佳时机II</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/">122</a></p><p><img src="/img/dp23.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//昨天不卖继续等和卖再买的价格对比取最大值</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>] - prices[i]);</span><br><span class="line">            <span class="comment">//昨天持有的最多钱对比今天买出去后持有的钱</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">0</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-3-123-买卖股票的最佳时机III"><a href="#4-3-123-买卖股票的最佳时机III" class="headerlink" title="4.3* 123-买卖股票的最佳时机III"></a>4.3* 123-买卖股票的最佳时机III</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/description/">123</a></p><p><img src="/img/dp24.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">5</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">3</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>],dp[<span class="number">0</span>] - prices[i]);</span><br><span class="line">            dp[<span class="number">2</span>] = <span class="built_in">max</span>(dp[<span class="number">2</span>],dp[<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[<span class="number">3</span>] = <span class="built_in">max</span>(dp[<span class="number">3</span>],dp[<span class="number">2</span>] - prices[i]);</span><br><span class="line">            dp[<span class="number">4</span>] = <span class="built_in">max</span>(dp[<span class="number">4</span>],dp[<span class="number">3</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-4-188-买卖股票的最佳时机IV"><a href="#4-4-188-买卖股票的最佳时机IV" class="headerlink" title="4.4* 188-买卖股票的最佳时机IV"></a>4.4* 188-买卖股票的最佳时机IV</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/">188</a></p><p><img src="/img/dp25.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(k*<span class="number">2</span>+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            dp[i*<span class="number">2</span><span class="number">-1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k*<span class="number">2</span><span class="number">-1</span>; j+=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j],dp[j<span class="number">-1</span>] - prices[i]);</span><br><span class="line">                dp[j+<span class="number">1</span>] = <span class="built_in">max</span>(dp[j+<span class="number">1</span>],dp[j] + prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[k*<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-5-309-买卖股票的最佳时机含冷冻期"><a href="#4-5-309-买卖股票的最佳时机含冷冻期" class="headerlink" title="4.5 309-买卖股票的最佳时机含冷冻期"></a>4.5 309-买卖股票的最佳时机含冷冻期</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/">309</a></p><p><img src="/img/dp26.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">4</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//四种状态, 买入股票,卖出股票后度过冷冻期,今天刚卖出股票,冷冻期状态</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] -= prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//一直持有股票 对比 冷冻期后买入与今天买入股票的最大值</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>],<span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">3</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]) - prices[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//前一天卖出股票和前一天是冷冻期</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//正常卖出股票后的钱</span></span><br><span class="line">            dp[i][<span class="number">2</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] + prices[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//冷冻期</span></span><br><span class="line">            dp[i][<span class="number">3</span>] = dp[i<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">            cout &lt;&lt; dp[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; dp[i][<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; dp[i][<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; dp[i][<span class="number">3</span>] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[size<span class="number">-1</span>][<span class="number">3</span>],<span class="built_in">max</span>(dp[size<span class="number">-1</span>][<span class="number">1</span>],dp[size<span class="number">-1</span>][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-6-714-买卖股票的最佳时机含手续费"><a href="#4-6-714-买卖股票的最佳时机含手续费" class="headerlink" title="4.6 714-买卖股票的最佳时机含手续费"></a>4.6 714-买卖股票的最佳时机含手续费</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/">714</a></p><p><img src="/img/dp27.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// vector&lt;vector&lt;int&gt;&gt; dp(size,vector&lt;int&gt;);</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="built_in">max</span>(dp[<span class="number">0</span>],dp[<span class="number">1</span>] - prices[i]);</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="built_in">max</span>(dp[<span class="number">1</span>],dp[<span class="number">0</span>] + prices[i] - fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[<span class="number">0</span>],dp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="5-子序列问题"><a href="#5-子序列问题" class="headerlink" title="5. 子序列问题"></a>5. 子序列问题</h1><h2 id="5-1-300-最长递增子序列"><a href="#5-1-300-最长递增子序列" class="headerlink" title="5.1 300-最长递增子序列"></a>5.1 300-最长递增子序列</h2><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300</a></p><p><img src="/img/dp28.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(size,<span class="number">1</span>)</span></span>; <span class="comment">//最小的递增子序列就是1,初始化为1</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j]) <span class="comment">//符合递增就+</span></span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i],dp[j]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(dp[i] &gt; ans)</span><br><span class="line">                ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-2-674-最长连续递增序列"><a href="#5-2-674-最长连续递增序列" class="headerlink" title="5.2 674-最长连续递增序列"></a>5.2 674-最长连续递增序列</h2><p><a href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence/description/">674</a></p><p><img src="/img/dp29.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLengthOfLCIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(size,<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i<span class="number">-1</span>])</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>]+<span class="number">1</span>,dp[i<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(dp[i] &gt; ans)</span><br><span class="line">                ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-3-718-最长重复子数组"><a href="#5-3-718-最长重复子数组" class="headerlink" title="5.3 718-最长重复子数组"></a>5.3 718-最长重复子数组</h2><p><a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/description/">718</a></p><p><img src="/img/dp30.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size1+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size1 ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= size2; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[i<span class="number">-1</span>] == nums2[j<span class="number">-1</span>])</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &gt; ans)</span><br><span class="line">                    ans = dp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-4-1143-最长公共子序列"><a href="#5-4-1143-最长公共子序列" class="headerlink" title="5.4 1143-最长公共子序列"></a>5.4 1143-最长公共子序列</h2><p><a href="https://leetcode.cn/problems/longest-common-subsequence/description/">1143</a></p><p><img src="/img/dp31.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = text1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = text2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size1+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size1; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= size2; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>])</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size1][size2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-5-1035-不相交的线"><a href="#5-5-1035-不相交的线" class="headerlink" title="5.5 1035-不相交的线"></a>5.5 1035-不相交的线</h2><p><a href="https://leetcode.cn/problems/uncrossed-lines/description/">1035</a></p><p><img src="/img/dp32.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxUncrossedLines</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size1+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size1; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= size2; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[i<span class="number">-1</span>] == nums2[j<span class="number">-1</span>])</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size1][size2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-6-53-最大子数组和"><a href="#5-6-53-最大子数组和" class="headerlink" title="5.6 53-最大子数组和"></a>5.6 53-最大子数组和</h2><p><a href="https://leetcode.cn/problems/maximum-subarray/description/">53</a></p><p><img src="/img/dp33.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(size,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> ans = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>]+nums[i],nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(dp[i] &gt; ans)</span><br><span class="line">                ans = dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-7-392-判断子序列"><a href="#5-7-392-判断子序列" class="headerlink" title="5.7 392-判断子序列"></a>5.7 392-判断子序列</h2><p><a href="https://leetcode.cn/problems/is-subsequence/description/">392</a></p><p><img src="/img/dp34.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = t.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size1+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size1; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= size2; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>])</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[size1][size2] == size1)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-8-115-不同的子序列"><a href="#5-8-115-不同的子序列" class="headerlink" title="5.8* 115-不同的子序列"></a>5.8* 115-不同的子序列</h2><p><a href="https://leetcode.cn/problems/distinct-subsequences/description/">115</a></p><p><img src="/img/dp35.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDistinct</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = t.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">uint64_t</span>&gt;&gt; <span class="built_in">dp</span>(size1+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">uint64_t</span>&gt;(size2+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size1; ++i)</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size1; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= size2; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>])</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size1][size2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-9-583-两个字符串的删除操作"><a href="#5-9-583-两个字符串的删除操作" class="headerlink" title="5.9 583-两个字符串的删除操作"></a>5.9 583-两个字符串的删除操作</h2><p><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/description/">583</a></p><p><img src="/img/dp36.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = word1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size1+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size1; ++i)</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size2; ++i)</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size1; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= size2; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>])</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j] + <span class="number">1</span>, dp[i][j<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size1][size2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-10-72-编辑距离"><a href="#5-10-72-编辑距离" class="headerlink" title="5.10 72-编辑距离"></a>5.10 72-编辑距离</h2><p><a href="https://leetcode.cn/problems/edit-distance/description/">72</a></p><p><img src="/img/dp37.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size1 = word1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size1+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size2+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size1; ++i)</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= size2; ++i)</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= size1; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= size2; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>])</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j],<span class="built_in">min</span>(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j<span class="number">-1</span>])) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size1][size2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-11-647-回文子串"><a href="#5-11-647-回文子串" class="headerlink" title="5.11 647-回文子串"></a>5.11 647-回文子串</h2><p><a href="https://leetcode.cn/problems/palindromic-substrings/description/">647</a></p><p><img src="/img/dp38.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(size,<span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(size,<span class="literal">false</span>));</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = size<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; size; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j-i &lt;= <span class="number">1</span>) <span class="comment">//aa || a</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ans++;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j<span class="number">-1</span>]) <span class="comment">// aba 再通过dp判断</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ans++;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-12-516-最长回文子序列"><a href="#5-12-516-最长回文子序列" class="headerlink" title="5.12 516-最长回文子序列"></a>5.12 516-最长回文子序列</h2><p><a href="https://leetcode.cn/problems/longest-palindromic-subsequence/description/">516</a></p><p><img src="/img/dp39.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(size,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(size,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = size<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; size; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j])</span><br><span class="line">                    dp[i][j] = dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i+<span class="number">1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][size<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基础题目&quot;&gt;&lt;a href=&quot;#1-基础题目&quot; class=&quot;headerlink&quot; title=&quot;1. 基础题目&quot;&gt;&lt;/a&gt;1. 基础题目&lt;/h1&gt;&lt;h2 id=&quot;1-1-509-斐波那契数&quot;&gt;&lt;a href=&quot;#1-1-509-斐波那契数&quot; class=&quot;</summary>
      
    
    
    
    <category term="代码随想录" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 在C/C++中的API</title>
    <link href="http://example.com/2023/11/03/MysqlAPI/"/>
    <id>http://example.com/2023/11/03/MysqlAPI/</id>
    <published>2023-11-03T02:12:53.000Z</published>
    <updated>2023-11-03T02:53:49.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化连接环境"><a href="#初始化连接环境" class="headerlink" title="初始化连接环境"></a>初始化连接环境</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数 mysql -&gt; null</span></span><br><span class="line"><span class="comment">// 返回值: 该函数将分配、初始化、并返回新对象</span></span><br><span class="line"><span class="comment">// 通过返回的这个对象去连接MySQL的服务器</span></span><br><span class="line"><span class="function">MYSQL *<span class="title">mysql_init</span><span class="params">(MYSQL *mysql)</span> </span>;</span><br></pre></td></tr></table></figure><h1 id="连接mysql服务器"><a href="#连接mysql服务器" class="headerlink" title="连接mysql服务器"></a>连接mysql服务器</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回值: </span></span><br><span class="line"><span class="comment">    成功: 返回MYSQL*连接句柄, 对于成功的连接，返回值与第1个参数的值相同。返回值指向的内存和第一个参数指针指向的内存一样</span></span><br><span class="line"><span class="comment">    失败，返回NULL。</span></span><br><span class="line"><span class="comment">    句柄: 是windows中的一个概念, 句柄可以理解为一个实例(或者对象)</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function">MYSQL *<span class="title">mysql_real_connect</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    MYSQL *mysql,           <span class="comment">// mysql_init() 函数的返回值</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span> *host,       <span class="comment">// mysql服务器的主机地址, 写IP地址即可</span></span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="comment">// localhost, null -&gt; 代表本地连接</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span> *user,       <span class="comment">// 连接mysql服务器的用户名, 默认: root </span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span> *passwd,     <span class="comment">// 连接mysql服务器用户对应的密码, root用户的密码</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span> *db,         <span class="comment">// 要使用的数据库的名字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">unsigned</span> <span class="type">int</span> port,      <span class="comment">// 连接的mysql服务器监听的端口</span></span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="comment">// 如果==0, 使用mysql的默认端口3306, !=0, 使用指定的这个端口</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span> *unix_socket,<span class="comment">// 本地套接字, 不使用指定为 NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">unsigned</span> <span class="type">long</span> client_flag)</span></span>; <span class="comment">// 通常指定为0</span></span><br></pre></td></tr></table></figure><h1 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行一个sql语句, 添删查改的sql语句都可以</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysql_query</span><span class="params">(MYSQL *mysql, <span class="type">const</span> <span class="type">char</span> *query)</span></span>;</span><br><span class="line">参数:</span><br><span class="line">    - mysql: <span class="built_in">mysql_real_connect</span>() 的返回值</span><br><span class="line">    - query: 一个可以执行的sql语句, 结尾的位置不需要加 ;</span><br><span class="line">返回值: </span><br><span class="line">    - 如果查询成功，返回<span class="number">0</span>。如果是查询, 结果集在mysql 对象中</span><br><span class="line">    - 如果出现错误，返回非<span class="number">0</span>值。 </span><br></pre></td></tr></table></figure><h1 id="获取结果集"><a href="#获取结果集" class="headerlink" title="获取结果集"></a>获取结果集</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将结果集从 mysql(参数) 对象中取出</span></span><br><span class="line"><span class="comment">// MYSQL_RES 对应一块内存, 里边保存着这个查询之后得到的结果集</span></span><br><span class="line"><span class="comment">// 如何将行和列的数据从结果集中取出, 需要使用其他函数</span></span><br><span class="line"><span class="comment">// 返回值: 具有多个结果的MYSQL_RES结果集合。如果出现错误，返回NULL。 </span></span><br><span class="line"><span class="function">MYSQL_RES *<span class="title">mysql_store_result</span><span class="params">(MYSQL *mysql)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="得到结果集的列数"><a href="#得到结果集的列数" class="headerlink" title="得到结果集的列数"></a>得到结果集的列数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从结果集中列的个数</span></span><br><span class="line"><span class="comment">// 参数: 调用 mysql_store_result() 得到的返回值</span></span><br><span class="line"><span class="comment">// 返回值: 结果集中的列数</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">mysql_num_fields</span><span class="params">(MYSQL_RES *result)</span></span></span><br></pre></td></tr></table></figure><h1 id="获取表头-列名-字段名"><a href="#获取表头-列名-字段名" class="headerlink" title="获取表头 -&gt; 列名(字段名)"></a>获取表头 -&gt; 列名(字段名)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数: 调用 mysql_store_result() 得到的返回值</span></span><br><span class="line"><span class="comment">// 返回值: MYSQL_FIELD* 指向一个结构体</span></span><br><span class="line"><span class="comment">// 通过查询官方文档, 返回是一个结构体的数组</span></span><br><span class="line"><span class="comment">// 通过这个函数得到结果集中所有列的名字</span></span><br><span class="line"><span class="function">MYSQL_FIELD *<span class="title">mysql_fetch_fields</span><span class="params">(MYSQL_RES *result)</span></span>;</span><br></pre></td></tr></table></figure><p>返回值<code>MYSQL_FIELD</code>对应的是一个结构体，在<code>mysql.h</code>中定义如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mysql.h</span></span><br><span class="line"><span class="comment">// 结果集中的每一个列对应一个 MYSQL_FIELD</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">st_mysql_field</span> &#123;</span><br><span class="line">  <span class="type">char</span> *name;                 <span class="comment">/* 列名-&gt; 字段的名字 */</span></span><br><span class="line">  <span class="type">char</span> *org_name;             <span class="comment">/* Original column name, if an alias */</span></span><br><span class="line">  <span class="type">char</span> *table;                <span class="comment">/* Table of column if column was a field */</span></span><br><span class="line">  <span class="type">char</span> *org_table;            <span class="comment">/* Org table name, if table was an alias */</span></span><br><span class="line">  <span class="type">char</span> *db;                   <span class="comment">/* Database for table */</span></span><br><span class="line">  <span class="type">char</span> *catalog;              <span class="comment">/* Catalog for table */</span></span><br><span class="line">  <span class="type">char</span> *def;                  <span class="comment">/* Default value (set by mysql_list_fields) */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> length;       <span class="comment">/* Width of column (create length) */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> max_length;   <span class="comment">/* Max width for selected set */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> name_length;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> org_name_length;                                                                                        </span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> table_length;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> org_table_length;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> db_length;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> catalog_length;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> def_length;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> flags;         <span class="comment">/* Div flags */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> decimals;      <span class="comment">/* Number of decimals in field */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> charsetnr;     <span class="comment">/* Character set */</span></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">enum_field_types</span> type; <span class="comment">/* Type of field. See mysql_com.h for types */</span></span><br><span class="line">  <span class="type">void</span> *extension;</span><br><span class="line">&#125; MYSQL_FIELD;</span><br></pre></td></tr></table></figure><blockquote><p>函数的使用举例：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到存储头信息的数组的地址</span></span><br><span class="line">MYSQL_FIELD* fields = <span class="built_in">mysql_fetch_fields</span>(res);</span><br><span class="line"><span class="comment">// 得到列数</span></span><br><span class="line"><span class="type">int</span> num = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line"><span class="comment">// 遍历得到每一列的列名</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;num; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前列的名字: %s\n&quot;</span>, fields[i].name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="得到结果集中字段的长度"><a href="#得到结果集中字段的长度" class="headerlink" title="得到结果集中字段的长度"></a>得到结果集中字段的长度</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">返回结果集内当前行的列的长度:</span></span><br><span class="line"><span class="comment">    1. 如果打算复制字段值，使用该函数能避免调用strlen()。</span></span><br><span class="line"><span class="comment">    2. 如果结果集包含二进制数据，必须使用该函数来确定数据的大小，原因在于，对于包含Null字符的任何字段，strlen()将返回错误的结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> *<span class="title">mysql_fetch_lengths</span><span class="params">(MYSQL_RES *result)</span></span>;</span><br><span class="line">参数: </span><br><span class="line">    - result: 通过查询得到的结果集</span><br><span class="line">返回值:</span><br><span class="line">    - 无符号长整数的数组表示各列的大小。如果出现错误，返回<span class="literal">NULL</span>。</span><br></pre></td></tr></table></figure><p>示例程序:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_ROW row;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> *lengths;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num_fields;</span><br><span class="line"> </span><br><span class="line">row = <span class="built_in">mysql_fetch_row</span>(result);</span><br><span class="line"><span class="keyword">if</span> (row)</span><br><span class="line">&#123;</span><br><span class="line">    num_fields = <span class="built_in">mysql_num_fields</span>(result);</span><br><span class="line">    lengths = <span class="built_in">mysql_fetch_lengths</span>(result);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;Column %u is %lu bytes in length.\n&quot;</span>, i, lengths[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="遍历结果集"><a href="#遍历结果集" class="headerlink" title="遍历结果集"></a>遍历结果集</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>** MYSQL_ROW;</span><br><span class="line"><span class="comment">// 遍历结果集的下一行 </span></span><br><span class="line"><span class="comment">// 如果想遍历整个结果集, 需要对该函数进行循环调用</span></span><br><span class="line"><span class="comment">// 返回值是二级指针, char** 指向一个什么类型的内存呢?</span></span><br><span class="line"><span class="comment">//    -- 指向一个指针数组, 类型是数组,里边的每个元素都是指针, char* 类型</span></span><br><span class="line"><span class="comment">//    -- char* []; 数组中的字符串对应的一列数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要对 MYSQL_ROW 遍历就可以得到每一列的值</span></span><br><span class="line"><span class="comment">// 如果要遍历整个结果集, 需要循环调用这个函数</span></span><br><span class="line"><span class="function">MYSQL_ROW <span class="title">mysql_fetch_row</span><span class="params">(MYSQL_RES *result)</span></span>;</span><br><span class="line">参数: </span><br><span class="line">    - result: 通过查询得到的结果集</span><br><span class="line">返回值: </span><br><span class="line">    - 成功: 得到了当前记录中每个字段的值</span><br><span class="line">    - 失败: <span class="literal">NULL</span>, 说明数据已经读完了</span><br></pre></td></tr></table></figure><h1 id="资源回收"><a href="#资源回收" class="headerlink" title="资源回收"></a>资源回收</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放结果集</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mysql_free_result</span><span class="params">(MYSQL_RES *result)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭mysql实例</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mysql_close</span><span class="params">(MYSQL *mysql)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取api默认使用的字符编码</span></span><br><span class="line"><span class="comment">// 为当前连接返回默认的字符集。</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">mysql_character_set_name</span><span class="params">(MYSQL *mysql)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 返回值: 默认字符集。 </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置api使用的字符集</span></span></span><br><span class="line"><span class="function"><span class="comment">// 第二个参数 csname 就是要设置的字符集 -&gt; 支持中文: utf8</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mysql_set_character_set</span><span class="params">(MYSQL *mysql, <span class="type">char</span> *csname)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mysql中默认会进行事务的提交</span></span><br><span class="line"><span class="comment">// 因为自动提交事务, 会对我们的操作造成影响</span></span><br><span class="line"><span class="comment">// 如果我们操作的步骤比较多, 集合的开始和结束需要用户自己去设置, 需要改为手动方式提交事务</span></span><br><span class="line"><span class="function">my_bool <span class="title">mysql_autocommit</span><span class="params">(MYSQL *mysql, my_bool mode)</span> </span></span><br><span class="line"><span class="function">参数:</span></span><br><span class="line"><span class="function">    如果模式为“<span class="number">1</span>”，启用autocommit模式；如果模式为“<span class="number">0</span>”，禁止autocommit模式。</span></span><br><span class="line"><span class="function">返回值</span></span><br><span class="line"><span class="function">    如果成功，返回<span class="number">0</span>，如果出现错误，返回非<span class="number">0</span>值。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 事务提交</span></span><br><span class="line"><span class="function">my_bool mysql_commit(MYSQL *mysql);</span></span><br><span class="line">返回值: 成功: <span class="number">0</span>, 失败: 非<span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 数据回滚</span></span><br><span class="line"><span class="function">my_bool <span class="title">mysql_rollback</span><span class="params">(MYSQL *mysql)</span> </span></span><br><span class="line"><span class="function">返回值: 成功: <span class="number">0</span>, 失败: 非<span class="number">0</span></span></span><br></pre></td></tr></table></figure><h1 id="打印错误信息"><a href="#打印错误信息" class="headerlink" title="打印错误信息"></a>打印错误信息</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回错误的描述</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">mysql_error</span><span class="params">(MYSQL *mysql)</span></span>;</span><br><span class="line"><span class="comment">// 返回错误的编号</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">mysql_errno</span><span class="params">(MYSQL *mysql)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h1><ul><li>需要的头文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>以上API对应的MySQL动态库</p><ul><li><p>Windows：<code>libmysql.dll</code></p></li><li><p>Linux：<code>libmysqlclient.so</code></p></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 初始化连接环境</span></span><br><span class="line">    MYSQL* mysql = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(mysql == <span class="literal">NULL</span>)\</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysql_init() error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 连接数据库服务器</span></span><br><span class="line">    mysql = <span class="built_in">mysql_real_connect</span>(mysql, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, </span><br><span class="line">                               <span class="string">&quot;scott&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mysql == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysql_real_connect() error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mysql api使用的默认编码: %s\n&quot;</span>, <span class="built_in">mysql_character_set_name</span>(mysql));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置编码为utf8</span></span><br><span class="line">    <span class="built_in">mysql_set_character_set</span>(mysql, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mysql api使用的修改之后的编码: %s\n&quot;</span>, <span class="built_in">mysql_character_set_name</span>(mysql));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;恭喜, 连接数据库服务器成功了...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 执行一个sql语句</span></span><br><span class="line">    <span class="comment">// 查询scott数据库下的dept部门表</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* sql = <span class="string">&quot;select * from dept&quot;</span>;</span><br><span class="line">    <span class="comment">// 执行这个sql语句</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">mysql_query</span>(mysql, sql);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysql_query() a失败了, 原因: %s\n&quot;</span>, <span class="built_in">mysql_error</span>(mysql));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 取出结果集</span></span><br><span class="line">    MYSQL_RES* res = <span class="built_in">mysql_store_result</span>(mysql);</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysql_store_result() 失败了, 原因: %s\n&quot;</span>, <span class="built_in">mysql_error</span>(mysql));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 得到结果集中的列数</span></span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 得到所有列的名字, 并且输出</span></span><br><span class="line">    MYSQL_FIELD * fields = <span class="built_in">mysql_fetch_fields</span>(res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;num; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\t\t&quot;</span>, fields[i].name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 遍历结果集中所有的行</span></span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    <span class="keyword">while</span>( (row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将当前行中的每一列信息读出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;num; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\t\t&quot;</span>, row[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 释放资源 - 结果集</span></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 写数据库</span></span><br><span class="line">    <span class="comment">// 以下三条是一个完整的操作, 对应的是一个事务</span></span><br><span class="line">    <span class="comment">// 设置事务为手动提交</span></span><br><span class="line">    <span class="built_in">mysql_autocommit</span>(mysql, <span class="number">0</span>); </span><br><span class="line">    <span class="type">int</span> ret1 = <span class="built_in">mysql_query</span>(mysql, <span class="string">&quot;insert into dept values(61, &#x27;海军&#x27;, &#x27;圣地玛丽乔亚&#x27;)&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret2 = <span class="built_in">mysql_query</span>(mysql, <span class="string">&quot;insert into dept values(62, &#x27;七武海&#x27;, &#x27;世界各地&#x27;)&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret3 = <span class="built_in">mysql_query</span>(mysql, <span class="string">&quot;insert into dept values(63, &#x27;四皇&#x27;, &#x27;新世界&#x27;)&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret1 = %d, ret2 = %d, ret3 = %d\n&quot;</span>, ret1, ret2, ret3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret1==<span class="number">0</span> &amp;&amp; ret2==<span class="number">0</span> &amp;&amp; ret3==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        <span class="built_in">mysql_commit</span>(mysql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mysql_rollback</span>(mysql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放数据库资源</span></span><br><span class="line">    <span class="built_in">mysql_close</span>(mysql);</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>附上一个个人使用的记录</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span> <span class="comment">// 添加头文件以使用 setw</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span> <span class="comment">// 添加头文件以使用 std::ostringstream</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">MYSQL* <span class="title">Connect_MySQL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* mysql = <span class="built_in">mysql_init</span>(<span class="literal">nullptr</span>); <span class="comment">//启动MySQL服务,初始化</span></span><br><span class="line">    <span class="keyword">if</span> (mysql == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;mysql_init&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接MySQL</span></span><br><span class="line">    mysql = <span class="built_in">mysql_real_connect</span>(mysql, <span class="string">&quot;192.168.200.131&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;9tse&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9tse&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mysql == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;mysql connect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_set_character_set</span>(mysql, <span class="string">&quot;utf8&quot;</span>); <span class="comment">//设置为utf8编码</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Mysql connect successfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> mysql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Act_Sql</span><span class="params">(MYSQL* mysql, <span class="type">const</span> std::string sql, std::ostringstream&amp; result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* char_sql = sql.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">mysql_query</span>(mysql, char_sql); <span class="comment">// 执行SQL</span></span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;action mysql&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL_RES* res = <span class="built_in">mysql_store_result</span>(mysql); <span class="comment">// 取出结果集</span></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;mysql_store_result&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">mysql_num_fields</span>(res); <span class="comment">// 结果集列数</span></span><br><span class="line">    MYSQL_FIELD* fields = <span class="built_in">mysql_fetch_fields</span>(res); <span class="comment">// 所有列名字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印列名并设置字段宽度和左对齐</span></span><br><span class="line">    result &lt;&lt; std::left;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        result &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; fields[i].name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">NULL</span>) <span class="comment">// 遍历行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印每一列并设置字段宽度和左对齐</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">            result &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; row[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res); <span class="comment">// 释放资源 - 结果集</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始化连接环境&quot;&gt;&lt;a href=&quot;#初始化连接环境&quot; class=&quot;headerlink&quot; title=&quot;初始化连接环境&quot;&gt;&lt;/a&gt;初始化连接环境&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>学生管理系统</title>
    <link href="http://example.com/2023/11/03/stu-msg-manage-system/"/>
    <id>http://example.com/2023/11/03/stu-msg-manage-system/</id>
    <published>2023-11-03T02:12:41.000Z</published>
    <updated>2023-11-03T02:40:36.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL建表-my-sql-h"><a href="#MySQL建表-my-sql-h" class="headerlink" title="MySQL建表(my_sql.h)"></a>MySQL建表(my_sql.h)</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="number">9</span>tse <span class="keyword">default</span> charset utf8mb4;</span><br><span class="line"></span><br><span class="line">use <span class="number">9</span>tse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_msg(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  num <span class="type">varchar</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">unique</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  profession <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;专业&#x27;</span>,</span><br><span class="line">  class <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级&#x27;</span>,</span><br><span class="line">  score <span class="type">float</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;成绩&#x27;</span></span><br><span class="line">)COMMENT <span class="string">&#x27;学生信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_msg(num,name,gender,profession,class,score) <span class="keyword">VALUES</span>(<span class="string">&#x27;xxxxxx&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4.1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_msg(id,num,name,gender,profession,class,score) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;xxxxxxxx&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1</span>,<span class="number">4.4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_msg MODIFY score <span class="type">varchar</span>(<span class="number">10</span>) comment<span class="string">&#x27;成绩&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_msg MODIFY class <span class="type">varchar</span>(<span class="number">10</span>) comment<span class="string">&#x27;成绩&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> stu_msg <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu_msg <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_msg <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_msg;</span><br></pre></td></tr></table></figure><hr><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h3 id="TcpSocket-h"><a href="#TcpSocket-h" class="headerlink" title="TcpSocket.h"></a>TcpSocket.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpSocket</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TcpSocket</span>();</span><br><span class="line"><span class="built_in">TcpSocket</span>(<span class="type">int</span> socket);</span><br><span class="line">~<span class="built_in">TcpSocket</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Connect_Host</span><span class="params">(std::string ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Send_Msg</span><span class="params">(std::string msg)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">Recv_Msg</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">readn</span><span class="params">(<span class="type">char</span>* msg, <span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">written</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, <span class="type">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_fd; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="client-ready-h"><a href="#client-ready-h" class="headerlink" title="client_ready.h"></a>client_ready.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;TcpSocket.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Connect</span><span class="params">(TcpSocket&amp; client)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = client.<span class="built_in">Connect_Host</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;client connect to host&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::string m_name;</span><br><span class="line">    <span class="built_in">Login</span>(<span class="type">const</span> std::string&amp; filename)</span><br><span class="line">        : <span class="built_in">filename_</span>(filename)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">LoadDataFromFile</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Authenticate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::string username;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;please input your name: &quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; username;</span><br><span class="line">        m_name = username;</span><br><span class="line">        std::string password;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;please input your password: &quot;</span>;</span><br><span class="line">        std::cin &gt;&gt; password;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (accounts_.<span class="built_in">find</span>(username) != accounts_.<span class="built_in">end</span>() &amp;&amp; accounts_[username] == password)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Authentication successful for &quot;</span> &lt;&lt; username &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Authentication failed for &quot;</span> &lt;&lt; username &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AddAccount</span><span class="params">(<span class="type">const</span> std::string&amp; username, <span class="type">const</span> std::string&amp; password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        accounts_[username] = password;</span><br><span class="line">        <span class="built_in">SaveDataToFile</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Account added: &quot;</span> &lt;&lt; username &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">DeleteAccount</span><span class="params">(<span class="type">const</span> std::string&amp; username)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = accounts_.<span class="built_in">find</span>(username);</span><br><span class="line">        <span class="keyword">if</span> (it != accounts_.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            accounts_.<span class="built_in">erase</span>(it);</span><br><span class="line">            <span class="built_in">SaveDataToFile</span>();</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Account deleted: &quot;</span> &lt;&lt; username &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Account not found: &quot;</span> &lt;&lt; username &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">ModifyPassword</span><span class="params">(<span class="type">const</span> std::string&amp; username, <span class="type">const</span> std::string&amp; newPassword)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = accounts_.<span class="built_in">find</span>(username);</span><br><span class="line">        <span class="keyword">if</span> (it != accounts_.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            it-&gt;second = newPassword;</span><br><span class="line">            <span class="built_in">SaveDataToFile</span>();</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Password for account &quot;</span> &lt;&lt; username &lt;&lt; <span class="string">&quot; modified.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Account not found: &quot;</span> &lt;&lt; username &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string filename_;</span><br><span class="line">    std::unordered_map&lt;std::string, std::string&gt; accounts_;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">LoadDataFromFile</span><span class="params">()</span>  <span class="comment">//��ȡ�ļ�����</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">std::ifstream <span class="title">file</span><span class="params">(filename_, std::ios::binary)</span></span>; <span class="comment">//�����ƶ�ȡ</span></span><br><span class="line">        <span class="keyword">if</span> (file.<span class="built_in">is_open</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                std::string username, password;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">ReadStringFromBinaryFile</span>(file, username) &amp;&amp; <span class="built_in">ReadStringFromBinaryFile</span>(file, password))</span><br><span class="line">                &#123;</span><br><span class="line">                    accounts_[username] = password;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            file.<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SaveDataToFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::ofstream <span class="title">file</span><span class="params">(filename_, std::ios::binary)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (file.<span class="built_in">is_open</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; entry : accounts_)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">WriteStringToBinaryFile</span>(file, entry.first);</span><br><span class="line">                <span class="built_in">WriteStringToBinaryFile</span>(file, entry.second);</span><br><span class="line">            &#125;</span><br><span class="line">            file.<span class="built_in">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">ReadStringFromBinaryFile</span><span class="params">(std::ifstream&amp; file, std::string&amp; str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">uint32_t</span> strLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;strLength), <span class="built_in">sizeof</span>(<span class="type">uint32_t</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            str.<span class="built_in">resize</span>(strLength);</span><br><span class="line">            <span class="keyword">if</span> (file.<span class="built_in">read</span>(&amp;str[<span class="number">0</span>], strLength))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">WriteStringToBinaryFile</span><span class="params">(std::ofstream&amp; file, <span class="type">const</span> std::string&amp; str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">uint32_t</span> strLength = <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(str.<span class="built_in">size</span>());</span><br><span class="line">        file.<span class="built_in">write</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(&amp;strLength), <span class="built_in">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line">        file.<span class="built_in">write</span>(str.<span class="built_in">c_str</span>(), strLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">chose</span></span><br><span class="line">&#123;</span><br><span class="line">    add,</span><br><span class="line">    del,</span><br><span class="line">    select,</span><br><span class="line">    modify</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Chose_Function</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;******************************************************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;************    input num to use    ******************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*****    0.add    ************    1.delete    ********&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;*****    2.select ************    3.modify    ********&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;******************************************************&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    std::cin &gt;&gt; input;</span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add_Action</span><span class="params">(TcpSocket&amp; client, Login&amp; user)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user.m_name != <span class="string">&quot;542213430101&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Apologize, you do not have the authority&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string sql = <span class="string">&quot;INSERT INTO stu_msg (num, name, gender, profession, class, score) VALUES (&quot;</span>;</span><br><span class="line">    std::string input;</span><br><span class="line">    std::string num;</span><br><span class="line">    std::vector&lt;std::string&gt; inputValues;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Enter the following information in order (num, name, gender, profession, class, score):&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; input;</span><br><span class="line">        inputValues.<span class="built_in">push_back</span>(input);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            num = input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; value : inputValues)</span><br><span class="line">        sql += <span class="string">&quot;&#x27;&quot;</span> + value + <span class="string">&quot;&#x27;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove the trailing &quot;, &quot; </span></span><br><span class="line">    sql = sql.<span class="built_in">substr</span>(<span class="number">0</span>, sql.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">    sql += <span class="string">&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client.<span class="built_in">Send_Msg</span>(sql);</span><br><span class="line"></span><br><span class="line">    user.<span class="built_in">AddAccount</span>(num, num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del_Action</span><span class="params">(TcpSocket&amp; client, Login&amp; user)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (user.m_name != <span class="string">&quot;542213430101&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Apologize, you do not have the authority&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;input the student number to delete: &quot;</span>;</span><br><span class="line">    std::string num;</span><br><span class="line">falg:</span><br><span class="line">    std::cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="string">&quot;542213430101&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;you can&#x27;t delete yourself, try again&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">goto</span> falg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">sql</span><span class="params">(<span class="string">&quot;delete from stu_msg where num = &quot;</span>)</span></span>;</span><br><span class="line">    client.<span class="built_in">Send_Msg</span>(sql + num);</span><br><span class="line"></span><br><span class="line">    user.<span class="built_in">DeleteAccount</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sel_Action</span><span class="params">(TcpSocket&amp; client, Login&amp; user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag:</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;select your find way&quot;</span> &lt;&lt; std::endl</span><br><span class="line">        &lt;&lt; <span class="string">&quot;1. select all&quot;</span> &lt;&lt; std::endl</span><br><span class="line">        &lt;&lt; <span class="string">&quot;2. select by more ways&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    std::cin &gt;&gt; input;</span><br><span class="line">    <span class="keyword">if</span>(input != <span class="number">1</span> &amp;&amp; input != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;input error,try again&quot;</span> &lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">goto</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">sql</span><span class="params">(<span class="string">&quot;select * from stu_msg &quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        client.<span class="built_in">Send_Msg</span>(sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;chose your select way by ** write ** word&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::string selectway;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;num   name  gender  profession  class  score&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cin &gt;&gt; selectway;</span><br><span class="line"></span><br><span class="line">        std::string message;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;input select message&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">        std::cin &gt;&gt; message;</span><br><span class="line"></span><br><span class="line">        std::string sqlsend = sql + <span class="string">&quot;where &quot;</span> + selectway + <span class="string">&quot;= &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; sqlsend&lt;&lt;std::endl;</span><br><span class="line">        client.<span class="built_in">Send_Msg</span>(sqlsend);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sleep(1);</span></span><br><span class="line">    std::cout &lt;&lt; client.<span class="built_in">Recv_Msg</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mod_Action</span><span class="params">(TcpSocket&amp; client, Login&amp; user)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag:</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;which you want to modify :&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;account/table msg (1/0) :&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="type">int</span> chose;</span><br><span class="line">    std::cin &gt;&gt; chose;</span><br><span class="line">    <span class="keyword">if</span>(chose != <span class="number">1</span> &amp;&amp; chose != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;input error,try again&quot;</span> &lt;&lt;std::endl;</span><br><span class="line">        <span class="keyword">goto</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chose) <span class="comment">//�޸��˺���Ϣ</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::string newpassword;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;input your new password&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cin &gt;&gt; newpassword;</span><br><span class="line">        user.<span class="built_in">ModifyPassword</span>(user.m_name, newpassword);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//�޸ı����е���Ϣ</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::string rootchosenum;</span><br><span class="line">        <span class="keyword">if</span> (user.m_name == <span class="string">&quot;542213430101&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;chose num to change&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cin &gt;&gt; rootchosenum;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;input word to change message&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;num  name  gender  profession  class  score&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::string input;</span><br><span class="line">        std::cin &gt;&gt; input;</span><br><span class="line">        <span class="function">std::string <span class="title">sql</span><span class="params">(<span class="string">&quot;update stu_msg set &quot;</span>)</span></span>;</span><br><span class="line">        input += <span class="string">&quot;=&#x27;&quot;</span>;</span><br><span class="line">        sql += input;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;input message to change&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cin &gt;&gt; input;</span><br><span class="line">        input += <span class="string">&quot;&#x27; where num = &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (user.m_name == <span class="string">&quot;542213430101&quot;</span>)</span><br><span class="line">            input += rootchosenum;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            input += user.m_name;</span><br><span class="line">        sql += input;</span><br><span class="line">        client.<span class="built_in">Send_Msg</span>(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><h3 id="TcpSocket-cpp"><a href="#TcpSocket-cpp" class="headerlink" title="TcpSocket.cpp"></a>TcpSocket.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpSocket.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TcpSocket::<span class="built_in">TcpSocket</span>() <span class="comment">//一般用于客户端,并通过这个文件描述符进行和服务器的连接</span></span><br><span class="line">&#123;</span><br><span class="line">m_fd = <span class="built_in">socket</span>(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket::<span class="built_in">TcpSocket</span>(<span class="type">int</span> socket) <span class="comment">//一般用于服务器,直接用这个套接字通信</span></span><br><span class="line">&#123;</span><br><span class="line">m_fd = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket::~<span class="built_in">TcpSocket</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m_fd &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">close</span>(m_fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::Connect_Host</span><span class="params">(std::string ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockaddr_in saddr;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_port = <span class="built_in">htons</span>(port); <span class="comment">//端口转换为网络字节序</span></span><br><span class="line"><span class="built_in">inet_pton</span>(AF_INET, ip.<span class="built_in">data</span>(), &amp;saddr.sin_addr.s_addr); <span class="comment">//ip地址转换为大端(网络字节序)</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(m_fd, (sockaddr*)&amp;saddr, <span class="built_in">sizeof</span>(saddr)); <span class="comment">//连接,m_fd,ip port存放在saddr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect with server sucessfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> ret; <span class="comment">//返回文件描述符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::written</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, <span class="type">int</span> size)</span> <span class="comment">//作为发射端,前四个字节初始化后就不用管了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> readplace = <span class="number">0</span>; <span class="comment">//开始读取的位置</span></span><br><span class="line"><span class="type">int</span> remain = size; <span class="comment">//剩余读取的大小</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* buf = msg; <span class="comment">//临时存放流,以便输出</span></span><br><span class="line"><span class="keyword">while</span>(remain &gt; <span class="number">0</span>) <span class="comment">//只有还有剩余的大小就继续读</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((readplace = <span class="built_in">write</span>(m_fd, buf, remain)) &gt; <span class="number">0</span>) <span class="comment">//将buf中内容输入m_fd,write返回值为写入的字节</span></span><br><span class="line">&#123;</span><br><span class="line">remain -= readplace;</span><br><span class="line">buf += readplace;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(readplace == <span class="number">-1</span>) <span class="comment">//如果write写入错误就会返回-1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::Send_Msg</span><span class="params">(std::string msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* buf = <span class="keyword">new</span> <span class="type">char</span>[msg.<span class="built_in">size</span>() + <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> flagsize = <span class="built_in">htonl</span>(msg.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">memcpy</span>(buf,&amp;flagsize,<span class="number">4</span>); <span class="comment">//前四位设置字符串大小</span></span><br><span class="line"><span class="built_in">memcpy</span>(buf+<span class="number">4</span>,msg.<span class="built_in">data</span>(), msg.<span class="built_in">size</span>()); <span class="comment">//后面照常装字符串 erro没有发完</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">written</span>(buf, msg.<span class="built_in">size</span>() + <span class="number">4</span>); <span class="comment">//ret返回值为一个字符串的大小</span></span><br><span class="line"><span class="keyword">delete</span>[] buf;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">TcpSocket::Recv_Msg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">readn</span>((<span class="type">char</span>*)&amp;len, <span class="number">4</span>); <span class="comment">//读取传来的前四个字节数据,得到数据内容大小</span></span><br><span class="line">len = <span class="built_in">ntohl</span>(len);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;thesize of recive msg is: &quot;</span> &lt;&lt; len &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* buf = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>]; <span class="comment">//+1存放换行</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">readn</span>(buf, len); <span class="comment">//读取数据,放置buf内</span></span><br><span class="line">buf[len] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//手动添加结束符</span></span><br><span class="line"><span class="function">std::string <span class="title">returnstr</span><span class="params">(buf)</span></span>; <span class="comment">//返回值</span></span><br><span class="line"><span class="keyword">delete</span>[] buf;</span><br><span class="line"><span class="keyword">return</span> returnstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::readn</span><span class="params">(<span class="type">char</span>* msg, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> readplace = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> remain = size; </span><br><span class="line"><span class="type">char</span>* buf = msg;</span><br><span class="line"><span class="keyword">while</span> (remain &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((readplace = <span class="built_in">read</span>(m_fd, buf, size)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">remain -= readplace;</span><br><span class="line">buf += readplace;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (readplace == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="main-client-cpp"><a href="#main-client-cpp" class="headerlink" title="main_client.cpp"></a>main_client.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;client_ready.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Login <span class="title">user</span><span class="params">(<span class="string">&quot;account.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//user.AddAccount(&quot;542213430101&quot;, &quot;9tse&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!user.<span class="built_in">Authenticate</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TcpSocket client;</span><br><span class="line"><span class="built_in">Connect</span>(client);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">Chose_Function</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">case</span> (<span class="type">int</span>)chose::add:</span><br><span class="line"><span class="built_in">Add_Action</span>(client, user);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">case</span> (<span class="type">int</span>)chose::del:</span><br><span class="line"><span class="built_in">Del_Action</span>(client, user);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">case</span> (<span class="type">int</span>)chose::select:</span><br><span class="line"><span class="built_in">Sel_Action</span>(client, user);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">case</span> (<span class="type">int</span>)chose::modify:</span><br><span class="line"><span class="built_in">Mod_Action</span>(client, user);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;chose error&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMakeList-txt"><a href="#CMakeList-txt" class="headerlink" title="CMakeList.txt"></a>CMakeList.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>) <span class="comment">#头文件</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>) <span class="comment">#生成路径</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp) <span class="comment">#源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(client_app  <span class="variable">$&#123;SRC_LIST&#125;</span>) <span class="comment">#编译</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(client_app) </span><br></pre></td></tr></table></figure><hr><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h2><h3 id="TcpServer-h"><a href="#TcpServer-h" class="headerlink" title="TcpServer.h"></a>TcpServer.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpSocket.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpServer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TcpServer</span>();</span><br><span class="line">~<span class="built_in">TcpServer</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Set_Listen</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span> port)</span></span>;</span><br><span class="line"><span class="function">TcpSocket* <span class="title">Accept_Connect</span><span class="params">(sockaddr_in* addr = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_fd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="TcpSocket-h-1"><a href="#TcpSocket-h-1" class="headerlink" title="TcpSocket.h"></a>TcpSocket.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TcpSocket</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TcpSocket</span>();</span><br><span class="line"><span class="built_in">TcpSocket</span>(<span class="type">int</span> socket);</span><br><span class="line">~<span class="built_in">TcpSocket</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Connect_Host</span><span class="params">(std::string ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Send_Msg</span><span class="params">(std::string msg)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">Recv_Msg</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">readn</span><span class="params">(<span class="type">char</span>* msg, <span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">written</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, <span class="type">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_fd; <span class="comment">//通信的套接字</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="my-sql-h"><a href="#my-sql-h" class="headerlink" title="my_sql.h"></a>my_sql.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span> <span class="comment">// 添加头文件以使用 setw</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span> <span class="comment">// 添加头文件以使用 std::ostringstream</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">MYSQL* <span class="title">Connect_MySQL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* mysql = <span class="built_in">mysql_init</span>(<span class="literal">nullptr</span>); <span class="comment">//启动MySQL服务,初始化</span></span><br><span class="line">    <span class="keyword">if</span> (mysql == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;mysql_init&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接MySQL</span></span><br><span class="line">    mysql = <span class="built_in">mysql_real_connect</span>(mysql, <span class="string">&quot;192.168.200.131&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;9tse&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9tse&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mysql == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;mysql connect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_set_character_set</span>(mysql, <span class="string">&quot;utf8&quot;</span>); <span class="comment">//设置为utf8编码</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Mysql connect successfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> mysql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Act_Sql</span><span class="params">(MYSQL* mysql, <span class="type">const</span> std::string sql, std::ostringstream&amp; result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* char_sql = sql.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">mysql_query</span>(mysql, char_sql); <span class="comment">// 执行SQL</span></span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;action mysql&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MYSQL_RES* res = <span class="built_in">mysql_store_result</span>(mysql); <span class="comment">// 取出结果集</span></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;mysql_store_result&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">mysql_num_fields</span>(res); <span class="comment">// 结果集列数</span></span><br><span class="line">    MYSQL_FIELD* fields = <span class="built_in">mysql_fetch_fields</span>(res); <span class="comment">// 所有列名字</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印列名并设置字段宽度和左对齐</span></span><br><span class="line">    result &lt;&lt; std::left;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        result &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; fields[i].name &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">NULL</span>) <span class="comment">// 遍历行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印每一列并设置字段宽度和左对齐</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">            result &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">12</span>) &lt;&lt; row[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res); <span class="comment">// 释放资源 - 结果集</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thread-pool-h"><a href="#thread-pool-h" class="headerlink" title="thread_pool.h"></a>thread_pool.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREADPOOL_MAX_NUM 16</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">threadpool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> _initsize; <span class="comment">//初始线程池大小</span></span><br><span class="line"><span class="keyword">using</span> Task = function&lt;<span class="built_in">void</span>()&gt;; <span class="comment">//任务函数</span></span><br><span class="line">vector&lt;thread&gt; _pool; <span class="comment">//线程容器</span></span><br><span class="line">queue&lt;Task&gt; _tasks; <span class="comment">//任务队列</span></span><br><span class="line">mutex _lock; <span class="comment">//增加任务队列的锁</span></span><br><span class="line">mutex _lockGrow; <span class="comment">//增加线程的锁</span></span><br><span class="line">condition_variable _task_cv; <span class="comment">//</span></span><br><span class="line">atomic&lt;<span class="type">bool</span>&gt; _run&#123;<span class="literal">true</span>&#125;; <span class="comment">//程序是否运行</span></span><br><span class="line">atomic&lt;<span class="type">int</span>&gt; _spa_trd_num&#123;<span class="number">0</span>&#125;; <span class="comment">//当前线程数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">threadpool</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span> size = <span class="number">4</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_initsize = size;</span><br><span class="line"><span class="built_in">Add_Thread</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> ~<span class="built_in">threadpool</span>()</span><br><span class="line">&#123;</span><br><span class="line">_run = <span class="literal">false</span>;</span><br><span class="line">_task_cv.<span class="built_in">notify_all</span>();</span><br><span class="line"><span class="keyword">for</span> (thread&amp; thread : _pool)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (thread.<span class="built_in">joinable</span>())</span><br><span class="line">thread.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把任务提交给线程池中的子线程</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... Args&gt; <span class="comment">//F为函数类型,args为参数类型</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">commit</span><span class="params">(F&amp;&amp; f, Args&amp;&amp; ...args)</span> -&gt; future&lt;<span class="title">decltype</span><span class="params">(f(args...))</span>&gt; <span class="comment">//auto 推断为f函数调用后的返回值类型 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//future的作用就是存储任意类型的值</span></span><br><span class="line"><span class="keyword">if</span> (!_run)</span><br><span class="line"><span class="keyword">throw</span> runtime_error&#123;<span class="string">&quot;commit auto stop&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">using</span> RetType = <span class="keyword">decltype</span>(<span class="built_in">f</span>(args...)); <span class="comment">//RetType就是当前函数返回值类型</span></span><br><span class="line"><span class="comment">//创建一个名字为task,指向一个包装任务器类型的,以绑定器作为构造的智能指针</span></span><br><span class="line"><span class="comment">//绑定器用于绑定函数地址和参数(占位符)</span></span><br><span class="line"><span class="keyword">auto</span> task = make_shared&lt;packaged_task&lt;<span class="built_in">RetType</span>()&gt;&gt;(<span class="built_in">bind</span>(forward&lt;F&gt;(f), forward&lt;Args&gt;(args)...));</span><br><span class="line">future&lt;RetType&gt; future = task-&gt;<span class="built_in">get_future</span>(); <span class="comment">//取函数返回值</span></span><br><span class="line">&#123;</span><br><span class="line">lock_guard&lt;mutex&gt; lock&#123;_lock&#125;;</span><br><span class="line"><span class="comment">//任务队列加入一个function&lt;void()&gt;的函数,这个函数是一个lambda表达式,解引用之后,调用包装器(即task函数)</span></span><br><span class="line">_tasks.<span class="built_in">emplace</span>([task]() &#123;(*task)(); &#125;); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_spa_trd_num &lt; <span class="number">1</span> &amp;&amp; _pool.<span class="built_in">size</span>() &lt; THREADPOOL_MAX_NUM) <span class="comment">//将任务加入任务队列后,如果当前没有子线程</span></span><br><span class="line"><span class="built_in">Add_Thread</span>(<span class="number">1</span>); <span class="comment">//加个子线程</span></span><br><span class="line">_task_cv.<span class="built_in">notify_one</span>(); <span class="comment">//唤醒条件变量的堵塞</span></span><br><span class="line"><span class="keyword">return</span> future; <span class="comment">//返回当前函数的返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">commit2</span><span class="params">(F&amp;&amp; f)</span> <span class="comment">//无参数类型函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!_run)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#123;</span><br><span class="line">lock_guard&lt;mutex&gt; lock&#123;_lock&#125;;</span><br><span class="line">_tasks.<span class="built_in">emplace</span>(forward&lt;F&gt;(f)); <span class="comment">//任务队列直接加入函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_spa_trd_num &lt; <span class="number">1</span> &amp;&amp; _pool.<span class="built_in">size</span>() &lt; THREADPOOL_MAX_NUM)</span><br><span class="line"><span class="built_in">Add_Thread</span>(<span class="number">1</span>);</span><br><span class="line">_task_cv.<span class="built_in">notify_one</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">idlCount</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _spa_trd_num; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">thrCount</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _pool.<span class="built_in">size</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add_Thread</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span> size)</span> <span class="comment">//加线程</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!_run)</span><br><span class="line"><span class="keyword">throw</span> runtime_error&#123;<span class="string">&quot;Add_Thread stop&quot;</span>&#125;;</span><br><span class="line">unique_lock&lt;mutex&gt; lockgrow&#123;_lockGrow&#125;; <span class="comment">//锁整个线程创建的函数</span></span><br><span class="line"><span class="keyword">for</span> (; _pool.<span class="built_in">size</span>() &lt; THREADPOOL_MAX_NUM &amp;&amp; size &gt; <span class="number">0</span>; --size) <span class="comment">//如果还可以加入线程</span></span><br><span class="line">&#123;</span><br><span class="line">_pool.<span class="built_in">emplace_back</span>([<span class="keyword">this</span>] <span class="comment">//线程容器里面加入lambda表达式,lambda表达式即子线程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">Task task; <span class="comment">//每个线程不断取任务队列中的任务</span></span><br><span class="line">&#123;</span><br><span class="line">unique_lock&lt;mutex&gt; lock&#123;_lock&#125;;</span><br><span class="line"><span class="comment">//wait 返回false阻塞(不跑了或者任务队列不为空,可以干活了就解除阻塞)</span></span><br><span class="line">_task_cv.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>] &#123;<span class="keyword">return</span> !_run || !_tasks.<span class="built_in">empty</span>(); &#125;);</span><br><span class="line"><span class="comment">//如果任务队列为空并且不跑了,那么这个线程就直接结束</span></span><br><span class="line"><span class="keyword">if</span> (!_run &amp;&amp; _tasks.<span class="built_in">empty</span>()) </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">_spa_trd_num--; <span class="comment">//当前线程数--(因为要执行任务了)</span></span><br><span class="line">task = <span class="built_in">move</span>(_tasks.<span class="built_in">front</span>()); <span class="comment">//移动拷贝获取任务</span></span><br><span class="line">_tasks.<span class="built_in">pop</span>(); <span class="comment">//任务队列删除一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">task</span>(); <span class="comment">//执行任务</span></span><br><span class="line"><span class="comment">//如果当前线程数大于初始构造值,线程也被杀死,即当前线程数不再加了</span></span><br><span class="line"><span class="keyword">if</span> (_spa_trd_num &gt; <span class="number">0</span> &amp;&amp; _pool.<span class="built_in">size</span>() &gt; _initsize) </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#123;</span><br><span class="line">unique_lock&lt;mutex&gt; lock&#123;_lock&#125;;</span><br><span class="line">_spa_trd_num++;<span class="comment">//执行玩任务栏了,当前线程数++</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#123;</span><br><span class="line">unique_lock&lt;mutex&gt; lock&#123;_lock&#125;;</span><br><span class="line">_spa_trd_num++; <span class="comment">//即将创建下一个子线程,提前线程数++</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源文件-1"><a href="#源文件-1" class="headerlink" title="源文件"></a>源文件</h2><h3 id="TcpSocket-cpp-1"><a href="#TcpSocket-cpp-1" class="headerlink" title="TcpSocket.cpp"></a>TcpSocket.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpSocket.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TcpSocket::<span class="built_in">TcpSocket</span>() <span class="comment">//一般用于客户端,并通过这个文件描述符进行和服务器的连接</span></span><br><span class="line">&#123;</span><br><span class="line">m_fd = <span class="built_in">socket</span>(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket::<span class="built_in">TcpSocket</span>(<span class="type">int</span> socket) <span class="comment">//一般用于服务器,直接用这个套接字通信</span></span><br><span class="line">&#123;</span><br><span class="line">m_fd = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket::~<span class="built_in">TcpSocket</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m_fd &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">close</span>(m_fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::Connect_Host</span><span class="params">(std::string ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockaddr_in saddr;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_port = <span class="built_in">htons</span>(port); <span class="comment">//端口转换为网络字节序</span></span><br><span class="line"><span class="built_in">inet_pton</span>(AF_INET, ip.<span class="built_in">data</span>(), &amp;saddr.sin_addr.s_addr); <span class="comment">//ip地址转换为大端(网络字节序)</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(m_fd, (sockaddr*)&amp;saddr, <span class="built_in">sizeof</span>(saddr)); <span class="comment">//连接,m_fd,ip port存放在saddr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect with server sucessfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> ret; <span class="comment">//返回文件描述符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::written</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg, <span class="type">int</span> size)</span> <span class="comment">//作为发射端,前四个字节初始化后就不用管了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> readplace = <span class="number">0</span>; <span class="comment">//开始读取的位置</span></span><br><span class="line"><span class="type">int</span> remain = size; <span class="comment">//剩余读取的大小</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* buf = msg; <span class="comment">//临时存放流,以便输出</span></span><br><span class="line"><span class="keyword">while</span>(remain &gt; <span class="number">0</span>) <span class="comment">//只有还有剩余的大小就继续读</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((readplace = <span class="built_in">write</span>(m_fd, buf, remain)) &gt; <span class="number">0</span>) <span class="comment">//将buf中内容输入m_fd,write返回值为写入的字节</span></span><br><span class="line">&#123;</span><br><span class="line">remain -= readplace;</span><br><span class="line">buf += readplace;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(readplace == <span class="number">-1</span>) <span class="comment">//如果write写入错误就会返回-1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::Send_Msg</span><span class="params">(std::string msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span>* buf = <span class="keyword">new</span> <span class="type">char</span>[msg.<span class="built_in">size</span>() + <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> flagsize = <span class="built_in">htonl</span>(msg.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">memcpy</span>(buf,&amp;flagsize,<span class="number">4</span>); <span class="comment">//前四位设置字符串大小</span></span><br><span class="line"><span class="built_in">memcpy</span>(buf+<span class="number">4</span>,msg.<span class="built_in">data</span>(), msg.<span class="built_in">size</span>()); <span class="comment">//后面照常装字符串 erro没有发完</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">written</span>(buf, msg.<span class="built_in">size</span>() + <span class="number">4</span>); <span class="comment">//ret返回值为一个字符串的大小</span></span><br><span class="line"><span class="keyword">delete</span>[] buf;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">TcpSocket::Recv_Msg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">readn</span>((<span class="type">char</span>*)&amp;len, <span class="number">4</span>); <span class="comment">//读取传来的前四个字节数据,得到数据内容大小</span></span><br><span class="line">len = <span class="built_in">ntohl</span>(len);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;thesize of recive msg is: &quot;</span> &lt;&lt; len &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* buf = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>]; <span class="comment">//+1存放换行</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">readn</span>(buf, len); <span class="comment">//读取数据,放置buf内</span></span><br><span class="line">buf[len] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//手动添加结束符</span></span><br><span class="line"><span class="function">std::string <span class="title">returnstr</span><span class="params">(buf)</span></span>; <span class="comment">//返回值</span></span><br><span class="line"><span class="keyword">delete</span>[] buf;</span><br><span class="line"><span class="keyword">return</span> returnstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpSocket::readn</span><span class="params">(<span class="type">char</span>* msg, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> readplace = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> remain = size; </span><br><span class="line"><span class="type">char</span>* buf = msg;</span><br><span class="line"><span class="keyword">while</span> (remain &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((readplace = <span class="built_in">read</span>(m_fd, buf, size)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">remain -= readplace;</span><br><span class="line">buf += readplace;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (readplace == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TcpServer-cpp"><a href="#TcpServer-cpp" class="headerlink" title="TcpServer.cpp"></a>TcpServer.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpServer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TcpServer::<span class="built_in">TcpServer</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_fd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpServer::~<span class="built_in">TcpServer</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">close</span>(m_fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TcpServer::Set_Listen</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绑定ip 和 port</span></span><br><span class="line">sockaddr_in saddr;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_port = <span class="built_in">htons</span>(port); <span class="comment">//大端</span></span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY; <span class="comment">//大端</span></span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">bind</span>(m_fd, (sockaddr*)&amp;saddr, <span class="built_in">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sucessfully bind to ip: &quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(saddr.sin_addr) &lt;&lt; std::endl</span><br><span class="line">&lt;&lt; <span class="string">&quot;port: &quot;</span> &lt;&lt; port &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置监听</span></span><br><span class="line">ret = <span class="built_in">listen</span>(m_fd, <span class="number">128</span>);</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;set listen sucessfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TcpSocket* <span class="title">TcpServer::Accept_Connect</span><span class="params">(sockaddr_in* addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (addr == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;accept(addr) is nullptr&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">socklen_t</span> addrlen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line"><span class="type">int</span> cfd = <span class="built_in">accept</span>(m_fd, (sockaddr*)addr, &amp;addrlen);</span><br><span class="line"><span class="keyword">if</span> (cfd == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;connect with client sucessfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TcpSocket</span>(cfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-server-cpp"><a href="#main-server-cpp" class="headerlink" title="main_server.cpp"></a>main_server.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_sql.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;TcpServer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread_pool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SocketPag</span> &#123;</span><br><span class="line">TcpSocket* msg_tcp;</span><br><span class="line">TcpServer* listen_tcp;</span><br><span class="line">sockaddr_in addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Working</span><span class="params">(<span class="type">void</span>* args, MYSQL* mysql)</span> <span class="comment">//线程池任务函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SocketPag* pkg = <span class="built_in">static_cast</span>&lt;SocketPag*&gt;(args);</span><br><span class="line"><span class="comment">//打印客户端基本信息</span></span><br><span class="line"><span class="type">char</span> ip[<span class="number">32</span>];</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;client ip: &quot;</span> &lt;&lt; <span class="built_in">inet_ntop</span>(AF_INET, &amp;pkg-&gt;addr.sin_addr.s_addr, ip, <span class="built_in">sizeof</span>(ip)) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;client port: &quot;</span> &lt;&lt; <span class="built_in">ntohs</span>(pkg-&gt;addr.sin_port) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取转换过来的Sql指令</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">std::ostringstream result;</span><br><span class="line">std::string sql = pkg-&gt;msg_tcp-&gt;<span class="built_in">Recv_Msg</span>(); <span class="comment">//先确定是不是一波一波的,不是</span></span><br><span class="line"><span class="keyword">if</span> (!sql.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Act_Sql</span>(mysql, sql, result); <span class="comment">//执行sql语句</span></span><br><span class="line">pkg-&gt;msg_tcp-&gt;<span class="built_in">Send_Msg</span>(result.<span class="built_in">str</span>()); <span class="comment">//将sql执行结果发送给client</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">result.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> pkg-&gt;listen_tcp;</span><br><span class="line"><span class="keyword">delete</span> pkg;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* mysql = <span class="built_in">Connect_MySQL</span>(); <span class="comment">//连接MySQL</span></span><br><span class="line"></span><br><span class="line">TcpServer server;</span><br><span class="line">server.<span class="built_in">Set_Listen</span>(<span class="number">10000</span>); <span class="comment">//绑定并且设置监听</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::threadpool <span class="title">threadpool</span><span class="params">(<span class="number">32</span>)</span></span>; <span class="comment">//实例化线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">SocketPag* pag = <span class="keyword">new</span> <span class="built_in">SocketPag</span>();</span><br><span class="line"><span class="comment">//将建立连接后的信息传递给pag-&gt;addr,在以此参数构造Tcpsocket</span></span><br><span class="line">TcpSocket* Msgret = server.<span class="built_in">Accept_Connect</span>(&amp;pag-&gt;addr);</span><br><span class="line"><span class="keyword">if</span> (Msgret == <span class="literal">nullptr</span>) <span class="comment">//如果为空有两种情况</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;main accept&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">pag-&gt;listen_tcp = &amp;server; <span class="comment">//将即将进入子线程的任务包完整一下</span></span><br><span class="line">pag-&gt;msg_tcp = Msgret; <span class="comment">//而客户端传来的信息就在Msgret中</span></span><br><span class="line"></span><br><span class="line">std::future&lt;<span class="type">void</span>&gt; work = threadpool.<span class="built_in">commit</span>(Working, pag, mysql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMakeList-txt-1"><a href="#CMakeList-txt-1" class="headerlink" title="CMakeList.txt"></a>CMakeList.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>) <span class="comment">#头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(/usr/<span class="keyword">include</span>/mysql)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)  <span class="comment">#源文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(server_app  <span class="variable">$&#123;SRC_LIST&#125;</span>)  <span class="comment">#编译</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(server_app mysqlclient pthread) </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL建表-my-sql-h&quot;&gt;&lt;a href=&quot;#MySQL建表-my-sql-h&quot; class=&quot;headerlink&quot; title=&quot;MySQL建表(my_sql.h)&quot;&gt;&lt;/a&gt;MySQL建表(my_sql.h)&lt;/h1&gt;&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="CMake" scheme="http://example.com/tags/CMake/"/>
    
    <category term="小项目" scheme="http://example.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="C++线程" scheme="http://example.com/tags/C-%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="socket" scheme="http://example.com/tags/socket/"/>
    
    <category term="套接字通信" scheme="http://example.com/tags/%E5%A5%97%E6%8E%A5%E5%AD%97%E9%80%9A%E4%BF%A1/"/>
    
    <category term="线程异步" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>设计模式基础和创建型模型</title>
    <link href="http://example.com/2023/10/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/10/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-10-29T09:41:47.000Z</published>
    <updated>2023-10-29T10:25:48.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-UML类图"><a href="#1-UML类图" class="headerlink" title="1. UML类图"></a>1. UML类图</h1><p>面向对象设计主要就是使用UML的类图，类图用于描述系统中所包含的类以及它们之间的相互关系，帮助人们简化对系统的理解，<strong>它是系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据。</strong>下面基于C++这门语言给大家讲一下UML类图的画法。</p><h2 id="1-1-类的UML画法"><a href="#1-1-类的UML画法" class="headerlink" title="1.1 类的UML画法"></a>1.1 类的UML画法</h2><p><strong>类（class &#x2F; struct）封装了数据和行为，是面向对象的重要组成部分，它是具有相同<code>属性</code>、<code>操作</code>、<code>关系</code>的对象集合的总称。</strong>在系统中，每个类都具有一定的职责，职责指的是类要完成什么样子的功能，要承担什么样子的义务。一个类可以有多种职责，但是设计得好的类一般只有一种职责。</p><p>比如，我现在定义了猎人类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hunter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age = <span class="number">32</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_times;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">goHunting</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">aiming</span>();</span><br><span class="line">        <span class="built_in">shoot</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">saySorry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string count = <span class="built_in">to_string</span>(m_times);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Say sorry to every animal &quot;</span> + count + <span class="string">&quot; times!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string m_name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">aiming</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;使用&quot;</span> + m_gunName + <span class="string">&quot;瞄准猎物...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_gunName = <span class="string">&quot;AK-47&quot;</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shoot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;使用&quot;</span> + m_gunName + <span class="string">&quot;射击猎物...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Hunter::m_times = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/master1.png"></p><p>上面这个类对应的类图应该是这样的：</p><p>可以看到该图分为上中下三部分：上层是类名，中间层是属性（类的成员变量），下层是方法（类的成员函数）。</p><ul><li><p>可见性：<code>+</code> 表示<code>public</code>、<code>#</code> 表示<code>protected</code>、<code>-</code> 表示<code>private</code>、<code>__(下划线)</code>表示<code>static</code></p></li><li><p>属性的表示方式：【可见性】【属性名称】:【类型】&#x3D; { 缺省值，可选 }</p></li><li><p>方法的表示方式：【可见性】【方法名称】(【参数名 : 参数类型，……】）:【返回值类型】</p></li></ul><p>如果我们定义的类是一个<code>抽象类</code>（类中有纯虚函数），在画UML类图的时候，类名需要使用<code>斜体显示</code>。</p><p><img src="/img/master2.png"></p><blockquote><p>在使用UML画类图的时候，<font color = red>虚函数的表示方跟随类名，也就是使用斜体</font>,如果是<code>纯虚函数</code>则需要在最后给函数指定<code>=0</code>。</p></blockquote><h2 id="1-2-类与类之间的关系"><a href="#1-2-类与类之间的关系" class="headerlink" title="1.2 类与类之间的关系"></a>1.2 类与类之间的关系</h2><h3 id="1-2-1-继承关系"><a href="#1-2-1-继承关系" class="headerlink" title="1.2.1 继承关系"></a>1.2.1 继承关系</h3><p>继承也叫作泛化（Generalization），用于描述父子类之间的关系，父类又称为基类或者超类，子类又称作派生类。在UML中，泛化关系用带<code>空心三角形的实线</code>来表示。</p><p>关于继承关系一共有两种：<code>普通继承关系</code>和<code>抽象继承关系</code>，但是不论哪一种表示继承关系的线的样式是不变的。</p><p>假如现在我定义了一个父类（<code>Bird</code>）和两个子类（<code>Cuckoo</code>、<code>Eagle</code>）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string m_sex;</span><br><span class="line">    string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cuckoo</span> : <span class="keyword">public</span> Bird</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fly</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;我拍打翅膀飞行...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;我喜欢吃肉肉的小虫子...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Eagle</span> : <span class="keyword">public</span> Bird</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fly</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;我展翅翱翔...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;我喜欢吃小动物...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用UML表示上述这种关系应当是：</p><p><img src="/img/master3.png"></p><p>父类<code>Bird</code>中的<code>fly()</code>和<code>eat()</code>是虚函数，它有两个子类<code>Cuckoo</code>和<code>Eagle</code>在这两个子类中重写了父类的虚函数，在使用<code>带空心三角</code>的实现表示继承关系的时候，<code>有空心三角的一端指向父类，另一端连接子类。</code></p><h3 id="1-2-2-关联关系"><a href="#1-2-2-关联关系" class="headerlink" title="1.2.2 关联关系"></a>1.2.2 关联关系</h3><p><code>关联（Assocition）</code>关系是类与类之间最常见的一种关系，它是一种结构化的关系，表示一个对象与另一个对象之间有联系，如汽车和轮胎、师傅和徒弟、班级和学生等。在UML类图中，<code>用（带接头或不带箭头的）实线连接有关联关系的类。</code>在C++中这种关联关系在类中是这样体现的，<code>通常将一个类的对象作为另一个类的成员变量。</code></p><p>类之间的关联关系有三种，分别是：<code>单向关联、双向关联、自关联</code>。下面逐一给大家进行介绍。</p><h4 id="单向关联关系"><a href="#单向关联关系" class="headerlink" title="单向关联关系"></a>单向关联关系</h4><p>单向关联指的是关联只有一个方向，比如每个孩子（Child）都拥有一个父亲（Parent），其代码实现为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Parent m_father;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过UML来说描述这两个类之间的关系，如下图：</p><p><img src="/img/master4.png"></p><p>如果是单向关联，使用的连接线是<font color = red>带单向箭头的实线</font>, 哪个类作为了当前类的成员变量，那么箭头就指向哪个类。在这个例子中 <code>Parent</code> 类 作为了<code>Child</code> 类的成员变量，因此箭头端应该指向<code>Parent</code> 类，另一端连接 <code>Child</code> 类。</p><h4 id="双向关联关系"><a href="#双向关联关系" class="headerlink" title="双向关联关系"></a>双向关联关系</h4><p>现实生活中每个孩子都有父母，每个父母同样有自己的孩子，如果想要通过类来描述这样的亲情关系，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Child m_son;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Parent m_father;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过UML来说描述这两个类之间的关系，如下图：</p><p><img src="/img/master5.png"></p><p>在画UML类图的时候，一般使用<code>没有箭头的实线</code>来连接有双向关联关系的两个类，这两个类的对象分别作为了对方类的成员变量。</p><blockquote><p><font color = red>有些UML绘图软件使用的是带双向箭头的实线来表示双向关联关系。</font></p></blockquote><p><img src="/img/master6.png"></p><h4 id="自关联关系"><a href="#自关联关系" class="headerlink" title="自关联关系"></a>自关联关系</h4><p>自关联指的就是<code>当前类中包含一个自身类型的对象成员</code>，这在链表中非常常见，单向链表中都会有一个指向自身节点类型的后继指针成员，而双向链表中会包含一个指向自身节点类型的前驱指针和一个指向自身节点类型的后继指针。就以双向链表节点类为例，它的C++写法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">void</span>* m_data;</span><br><span class="line">    Node* m_prev;</span><br><span class="line">    Node* m_next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图应当是：</p><p><img src="/img/master7.png"></p><p>一般使用<code>带箭头的实线</code>来描述自关联关系，我中有我，独角戏。</p><blockquote><p><font color = red>有些UML绘图软件表示类与类的关联关系，使用的就是一条实线，没有箭头。</font></p></blockquote><h3 id="1-2-3-聚合关系"><a href="#1-2-3-聚合关系" class="headerlink" title="1.2.3 聚合关系"></a>1.2.3 聚合关系</h3><p>聚合（Aggregation）关系表示<strong>整体</strong>与<strong>部分</strong>的关系。在聚合关系中，<strong>成员对象是整体的一部分，但是成员对象可以脱离整体对象独立存在。</strong> 在UML中，<code>聚合关系用带空心菱形的直线表示</code>，下面举两个聚合关系的例子：</p><ul><li>汽车（Car）与 引擎（Engine）、轮胎（Wheel）、车灯（Light）</li><li>森林（Forest）与 植物（Plant）、动物（Animal）、水（Water）、阳光（Sunshine）</li></ul><p>以森林为例，对应的C++类的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Plant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 植物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 动物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Water</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 水</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sunshine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 阳光</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Forest</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Forest</span>(Plant p, Animal a, Water w, Sunshine s) : </span><br><span class="line">        <span class="built_in">m_plant</span>(p),<span class="built_in">m_animal</span>(a),<span class="built_in">m_water</span>(w),<span class="built_in">m_sun</span>(s)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Plant m_plant;</span><br><span class="line">    Animal m_animal;</span><br><span class="line">    Water m_water;</span><br><span class="line">    Sunshine m_sun;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图为：</p><p><img src="/img/master8.png"></p><p>代码实现聚合关系，<font color = red>成员对象通常以构造方法、Setter方法的方式注入到整体对象之中，因为成员对象可以脱离整体对象独立存在。</font></p><p>表示聚合关系的线，有空心菱形的一端指向整体对象，另一端连接局部对象（有些UML绘图软件在这一端还带一个箭头）。</p><h3 id="1-2-4-组合关系"><a href="#1-2-4-组合关系" class="headerlink" title="1.2.4 组合关系"></a>1.2.4 组合关系</h3><p><strong>组合（Composition）关系也表示的是一种整体和部分的关系</strong>，但是在组合关系中整体对象可以控制成员对象的生命周期，一旦整体对象不存在，成员对象也不存在，<strong>整体对象和成员对象之间具有同生共死的关系。</strong></p><p><font color = red>在UML中组合关系用带实心菱形的直线表示</font>，下面举两个组合关系的例子：</p><ul><li>头（Head）和 嘴巴（Mouth）、鼻子（Nose）、耳朵（Ear）、眼睛（Eye）</li><li>树（Tree）和 树根（Root）、树干（Trunk）、树枝（Branch）、树叶（Leaf）</li></ul><p>以树为例，对应的C++类的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Root</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trunk</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Branch</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Tree</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_root = <span class="keyword">new</span> Root;</span><br><span class="line">        m_trunk = <span class="keyword">new</span> Trunk;</span><br><span class="line">        m_branch = <span class="keyword">new</span> Branch;</span><br><span class="line">        m_leaf = <span class="keyword">new</span> Leaf;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Tree</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_root;</span><br><span class="line">        <span class="keyword">delete</span> m_trunk;</span><br><span class="line">        <span class="keyword">delete</span> m_branch;</span><br><span class="line">        <span class="keyword">delete</span> m_leaf;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Root* m_root;</span><br><span class="line">    Trunk* m_trunk;</span><br><span class="line">    Branch* m_branch;</span><br><span class="line">    Leaf* m_leaf;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的表示方法为：</p><p><img src="/img/master9.png"></p><p>代码实现组合关系，通常<strong>在整体类的构造方法中直接实例化成员类</strong>，因为组合关系的整体和部分是共生关系，整体的实例对象被析构的时候它的子对象也会一并被析构。如果通过外部注入，即使整体不存在了，部分还是存在的，这样的话就变成聚合关系了。</p><h3 id="1-2-5-依赖关系"><a href="#1-2-5-依赖关系" class="headerlink" title="1.2.5 依赖关系"></a>1.2.5 依赖关系</h3><p><strong>依赖（Dependency）关系是一种使用关系</strong>，特定事物的改变有可能会影响到使用该事物的其他事物，<font color = red>在需要表示一个事物使用另一个事物时使用依赖关系，大多数情况下依赖关系体现在某个类的方法使用另一个类的对象作为参数。</font></p><p>在UML中，<font color = red>依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方</font>，下面举两个依赖关系的例子：</p><ul><li>驾驶员（Driver）开车，需要将车（Car）对象作为参数传递给 Driver 类的drive（）方法。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drive</span><span class="params">(Car car)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        car.<span class="built_in">move</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>树木（Tree）的生长，需要将空气（Air）、水（Water）、土壤（Soil）对象作为参数传递给 Tree 类的 grow（）方法。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Water</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Air</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Soil</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">grow</span><span class="params">(Water w, Air a, Soil s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;借助 w 中的水分, s 中的养分和 a 中的二氧化碳, 我就可以茁壮成长了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于树木这个类，它对应的UML类图为：</p><p><img src="/img/master10.png"></p><p>依赖关系通常通过三种方式来实现：</p><ol><li><p><strong>将一个类的对象作为另一个类中方法的参数</strong></p></li><li><p><strong>在一个类的方法中将另一个类的对象作为其对象的局部变量</strong></p></li><li><p><strong>在一个类的方法中调用另一个类的静态方法</strong></p></li></ol><blockquote><p><font color = red>类之间的关系强弱顺序是这样的：继承（泛化） &gt;  组合  &gt;  聚合  &gt;  关联  &gt;  依赖。</font></p></blockquote><h3 id="1-2-6-关联关系、聚合关系、组合关系之间的区别"><a href="#1-2-6-关联关系、聚合关系、组合关系之间的区别" class="headerlink" title="1.2.6 关联关系、聚合关系、组合关系之间的区别"></a>1.2.6 关联关系、聚合关系、组合关系之间的区别</h3><p>从上文可以看出，关联关系、聚合关系和组合关系三者之间比较相似，最后就来总结一下这三者之间的区别：</p><ol><li><p>关联和聚合的区别主要在于语义上：<strong>关联的两个对象之间一般是平等的，聚合则一般是不平等的。</strong></p></li><li><p>聚合和组合的区别则在语义和实现上都有差别：</p><ul><li>组合的两个对象之间生命周期有很大的关联，被组合的对象在组合对象创建的同时或者创建之后创建在组合对象销毁之前销毁，聚合则无需考虑这些事情。</li><li>一般来说被组合对象不能脱离组合对象独立存在，而且也只能属于一个组合对象，聚合则不一样，被聚合的对象可以属于多个聚合对象。</li></ul></li></ol><p>最后，再举例子来描述一下这三种关系：</p><ol><li>朋友之间属于关联关系，因为这种关系是平等的，关联关系只是用于表示两个对象之间的一种简单的联系而已。</li><li>图书馆看书的时候，人和书属于聚合关系。书是可以独立存在的，而且书不仅可以属于自己，也可以属于别人。</li><li>人和自己的心脏属于组合关系，因为心脏不能脱离人体而独自存在。</li></ol><p>不过，实际应用中，这三种关系的界限划分其实没有那么清楚，有些时候我们会感觉组合和聚合没什么区别，所以，在设计的时候没必要死抠细节，只要能够利用对象之间的关系设计出可行的解决方案即可。</p><hr><h1 id="2-设计模式三原则"><a href="#2-设计模式三原则" class="headerlink" title="2. 设计模式三原则"></a>2. 设计模式三原则</h1><p>我们在进行程序设计的时候，要尽可能地保证程序的可扩展性、可维护性和可读性，所以需要使用一些设计模式，这些设计模式都遵循了以下三个原则，下面来依次为大家介绍。</p><h2 id="2-1-单一职责原则"><a href="#2-1-单一职责原则" class="headerlink" title="2.1 单一职责原则"></a>2.1 单一职责原则</h2><p>C++面向对象三大特性之一的封装指的就是将单一事物抽象出来组合成一个类，所以我们在设计类的时候每个类中处理的是单一事物而不是某些事物的集合。</p><p>设计模式中所谓的单一职责原则，就是对一个类而言，应该仅有一个引起它变化的原因，其实就是将这个类所承担的职责单一化</p><p>如果一个类承担的职责过多，就等于把这些职责耦合到了一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致设计变得脆弱，当变化发生时，设计会遭受到意想不到的破坏。</p><p>一个单一职责的类，这个类被追加了一些其他的职责，这个类没能完成开始时的预期任务，就此废掉了。<br>让一个类承担太多的职责绝非好事。</p><p>软件设计真正要做的事情就是，发现根据需求发现职责，并把这些职责进行分离，添加新的类，给当前类减负，越是这样项目才越容易维护。</p><h2 id="2-2-开放封闭原则"><a href="#2-2-开放封闭原则" class="headerlink" title="2.2 开放封闭原则"></a>2.2 开放封闭原则</h2><p>开放 – 封闭原则说的是软件实体（类、模块、函数等）可以扩展，但是不可以修改。也就是说<code>对于扩展是开放的，对于修改是封闭的。</code></p><p>该原则是程序设计的一种理想模式，在很多情况下无法做到完全的封闭。但是作为设计人员，应该能够对自己设计的模块在哪些位置产生何种变化了然于胸，因此<code>需要在这些位置创建抽象类来隔离以后发生的这些同类变化（其实就是对多态的应用，创建新的子类并重写父类虚函数，用以更新处理动作）。</code></p><blockquote><p><font color = red>此处的抽象类，其实并不等价与C++中完全意义上是抽象类（需要有纯虚函数），这里所说的抽象类只需要包含虚函数（纯虚函或非纯虚函数）能够实现多态即可。</font></p></blockquote><p>草帽团船长路飞从出海到现在一共召集了9个伙伴，这些伙伴在船上的职责都是不一样的，有音乐家、船工、舵手、航海士、剑士、考古学家、狙击手、厨师、船医，作为船长没有要求自己学习这些船员的技能【<font color = red>对自己来说是封闭的</font>】，而是提出了伙伴的概念【<font color = red>这就是一个可变的抽象</font>】，最终找到了优秀的伙伴加入【<font color = red>对外是开放的，每个伙伴都是这个抽象的具体实现，但他们的技能又有所不同</font>】，事实证明这样做是对的，如果反其道而行之，不仅违背了开放封闭原则，也违背了单一职责原则。</p><p>开放 – 封闭原则是面向对象设计的核心所在，这样可以给我们设计出的程序带来巨大的好处，使其可维护性、可扩展性、可复用性、灵活性更好。</p><h2 id="2-3-依赖倒转原则"><a href="#2-3-依赖倒转原则" class="headerlink" title="2.3 依赖倒转原则"></a>2.3 依赖倒转原则</h2><p>关于依赖倒转原则，对应的是两条非常抽象的描述：</p><p>1.<font color = red> 高层模块不应该依赖低层模块，两个都应该依赖抽象。</font><br>2. <font color = red>抽象不应该依赖细节，细节应该依赖抽象。</font><br>先用人话解释一下这两句话中的一些抽象概念：</p><ul><li>高层模块：可以理解为上层应用，就是业务层的实现</li><li>低层模块：可以理解为底层接口，比如封装好的API、动态库等</li><li>抽象：指的就是抽象类或者接口，在C++中没有接口，只有抽象类</li></ul><p>先举一个高层模块依赖低层模块的例子：</p><blockquote><p>低层使用的是<code>MySql</code>的数据库接口，高层基于这套接口对数据库表进行了添删查改，实现了对业务层数据的处理。而后由于某些原因，要存储到数据库的数据量暴增，所以更换了<code>Oracle</code>数据库，由于低层的数据库接口变了，高层代码的数据库操作部分是直接调用了低层的接口，因此也需要进行对应的修改，无法实现对高层代码的直接复用。</p></blockquote><p>通过上面的例子可以得知，当依赖的低层模块变了就会牵一发而动全身，如果这样设计项目架构，其工作量无疑是很重的。</p><p>如果要搞明白这个案例的解决方案以及抽象和细节之间的依赖关系，需要先了解另一个原则 — <code>里氏代换原</code>则。</p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>所谓的里氏代换原则就是<font color = red>子类类型必须能够替换掉它们的父类类型。</font></p><p>关于这个原理的应用其实也很常见，比如在Qt中，所有窗口类型的类的构造函数都有一个<code>QWidget*</code>类型的参数（<code>QWidget</code> 类是所有窗口的基类），通过这个参数指定当前窗口的父对象。虽然参数是窗口类的基类类型，但是我们在给其指定实参的大多数时候，指定的都是子类的对象，其实也就是相当于使用子类类型替换掉了它们的父类类型。</p><p>这个原则的要满足的第一个条件就是<code>继承</code>，其次还要求<code>子类继承的所有父类的属性和方法对于子类来说都是合理的</code>。关于这个是否合理下面举个栗子：</p><p>比如，对于哺乳动物来说都是胎生，但是有一种特殊的存在就是鸭嘴兽，它虽然是哺乳动物，但是是卵生。</p><p>如果我们设计了两个类：哺乳动物类和鸭嘴兽类，此时能够让鸭嘴兽类继承哺乳动物类吗？答案肯定是否定的，因为如果我们这么做了，鸭嘴兽就继承了胎生属性，这个属性和它自身的情况是不匹配的。如果想要遵循里氏代换原则，我们就不能让着两个类有继承关系。</p><p>如果我们创建了其它 的胎生的哺乳动物类，那么它们是可以继承哺乳动物这个类的，<font color = red>在实际应用中就可以使用子类替换掉父类，同时功能也不会受到影响，父类实现了复用，子类也能在父类的基础上增加新的行为，这就是里氏代换原则。</font></p><p>上面在讲<code>依赖倒转原则</code>的时候说过，<code>抽象不应该依赖细节，细节应该依赖抽象。</code>也就意味着我们应该对细节进行封装，在C++中就是将其放到一个抽象类中（C++中没有接口，不能像Java一样封装成接口），每个细节就相当于上面例子中的哺乳动物的一个特性，这样一来这个抽象的哺乳动物类就成了项目架构中高层和低层的桥梁，将二者整合到一起。</p><ul><li><p><font color = red>抽象类中提供的接口是固定不变的</font></p></li><li><p><font color = red>低层模块是抽象类的子类，继承了抽象类的接口，并且可以重写这些接口的行为</font></p></li><li><p><font color = red>高层模块想要实现某些功能，调用的是抽象类中的函数接口，并且是通过抽象类的父类指针引用其子类的实例对象（用子类类型替换父类类型），这样就实现了多态。</font></p></li></ul><p><img src="/img/master11.png"></p><p>基于依赖倒转原则将项目的结构换成上图的这种模式之后，低层模块发生变化，对应高层模块是没有任何影响的，这样程序猿的工作量降低了，代码也更容易维护（说白了，<font color = red>依赖倒转原则就是对多态的典型应用</font>）。</p><hr><h1 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3. 单例模式"></a>3. 单例模式</h1><h2 id="3-1-巴基的订单"><a href="#3-1-巴基的订单" class="headerlink" title="3.1 巴基的订单"></a>3.1 巴基的订单</h2><p>巴基有一个账本用于记录下单者信息，下单者的需求以及下单的时间，然后根据下单的先后顺序选择合适的人手进行派单。这个账本其实就相当于一个任务队列：</p><ul><li>有一定的容量，可以存储任务</li><li>按照下单的先后顺序存储并处理任务 – 典型的队列特性：<code>先进先出</code></li></ul><p>对于巴基来说把所有的订单全部记录到一个账本上就够了，如果将其平移到项目中，也就意味着应用程序在运行过程中存储任务的任务队列一个足矣，弄太多反而冗余，不太好处理了。</p><p><font color = red>在一个项目中，全局范围内，某个类的实例有且仅有一个，通过这个唯一实例向其他模块提供数据的全局访问，这种模式就叫单例模式。单例模式的典型应用就是任务队列。</font></p><h2 id="3-2-独生子女"><a href="#3-2-独生子女" class="headerlink" title="3.2 独生子女"></a>3.2 独生子女</h2><p>如果使用单例模式，首先要保证这个类的实例有且仅有一个，也就是说这个对象是独生子女，如果我们实施计划生育只生一个孩子，不需要也不能给再他增加兄弟姐妹。因此，就必须采取一系列的防护措施。对于类来说以上描述同样适用。涉及一个类多对象操作的函数有以下几个：</p><ul><li><code>构造函数</code>：创建一个新的对象</li><li><code>拷贝构造函数</code>：根据已有对象拷贝出一个新的对象</li><li><code>拷贝赋值操作符重载函数</code>：两个对象之间的赋值</li></ul><p>为了把一个类可以实例化多个对象的路堵死，可以做如下处理：</p><ol><li><p>构造函数私有化，在类内部只调用一次，这个是可控的。</p><ul><li><font color = red>由于使用者在类外部不能使用构造函数，所以在类内部创建的这个唯一的对象必须是静态的，这样就可以通过类名来访问了，为了不破坏类的封装，我们都会把这个静态对象的访问权限设置为私有的。</font></li><li><font color =red>在类中只有它的静态成员函数才能访问其静态成员变量，所以可以给这个单例类提供一个静态函数用于得到这个静态的单例对象。</font></li></ul></li><li><p>拷贝构造函数私有化或者禁用（使用 <code>= delete</code>）</p></li><li><p>拷贝赋值操作符重载函数私有化或者禁用（<code>从单例的语义上讲这个函数已经毫无意义，所以在类中不再提供这样一个函数，故将它也一并处理一下。</code>）</p></li></ol><p>由于单例模式就是给类创建一个唯一的实例对象，所以它的UML类图是很简单的：</p><p><img src="/img/master12.png"></p><p>因此，定义一个单例模式的类的示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个单例模式的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> Singleton* m_obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在实现一个单例模式的类的时候，有两种处理模式：</p><ul><li><code>饿汉模式</code></li><li><code>懒汉模式</code></li></ul><h2 id="3-3-饿汉模式"><a href="#3-3-饿汉模式" class="headerlink" title="3.3 饿汉模式"></a>3.3 饿汉模式</h2><p><code>饿汉模式就是在类加载的时候立刻进行实例化</code>，这样就得到了一个唯一的可用对象。关于这个饿汉模式的类的定义如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 饿汉模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_taskQ;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> TaskQueue* m_taskQ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 静态成员初始化放到类外部处理</span></span><br><span class="line">TaskQueue* TaskQueue::m_taskQ = <span class="keyword">new</span> TaskQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TaskQueue* obj = TaskQueue::<span class="built_in">getInstance</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第17行，定义这个单例类的时候，就把这个静态的单例对象创建出来了。当使用者通过<code>getInstance()</code>获取这个单例对象的时候，它已经被准备好了。</p><blockquote><p><font color = red>注意事项：类的静态成员变量在使用之前必须在类的外部进行初始化才能使用。</font></p></blockquote><h2 id="3-4-懒汉模式"><a href="#3-4-懒汉模式" class="headerlink" title="3.4 懒汉模式"></a>3.4 懒汉模式</h2><p><font color = red>懒汉模式是在类加载的时候不去创建这个唯一的实例，而是在需要使用的时候再进行实例化。</font></p><h3 id="3-4-1-懒汉模式类的定义"><a href="#3-4-1-懒汉模式类的定义" class="headerlink" title="3.4.1 懒汉模式类的定义"></a>3.4.1 懒汉模式类的定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_taskQ == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_taskQ = <span class="keyword">new</span> TaskQueue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_taskQ;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> TaskQueue* m_taskQ;</span><br><span class="line">&#125;;</span><br><span class="line">TaskQueue* TaskQueue::m_taskQ = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>在调用<code>getInstance()</code>函数获取单例对象的时候，如果在单线程情况下是没有什么问题的，如果是多个线程，调用这个函数去访问单例对象就有问题了。假设有三个线程<code>同时执行了getInstance()</code>函数，在这个函数内部每个线程都会new出一个实例对象。此时，这个任务队列类的实例对象不是一个而是3个，很显然这与单例模式的定义是相悖的。</p><h3 id="3-4-2-线程安全问题"><a href="#3-4-2-线程安全问题" class="headerlink" title="3.4.2 线程安全问题"></a>3.4.2 线程安全问题</h3><h4 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h4><p><font color =red>对于饿汉模式是没有线程安全问题的，在这种模式下访问单例对象的时候，这个对象已经被创建出来了。</font>要解决懒汉模式的线程安全问题，最常用的解决方案就是使用互斥锁。可以将创建单例对象的代码使用互斥锁锁住，处理代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span> (m_taskQ == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_taskQ = <span class="keyword">new</span> TaskQueue;</span><br><span class="line">        &#125;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> m_taskQ;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> TaskQueue* m_taskQ;</span><br><span class="line">    <span class="type">static</span> mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line">TaskQueue* TaskQueue::m_taskQ = <span class="literal">nullptr</span>;</span><br><span class="line">mutex TaskQueue::m_mutex;</span><br></pre></td></tr></table></figure><p>在上面代码的10~13 行这个代码块被互斥锁锁住了，也就意味着不论有多少个线程，同时执行这个代码块的线程只能是一个（相当于是严重限行了，在重负载情况下，可能导致响应缓慢）。我们可以将代码再优化一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_taskQ == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">            <span class="keyword">if</span> (m_taskQ == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_taskQ = <span class="keyword">new</span> TaskQueue;</span><br><span class="line">            &#125;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_taskQ;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> TaskQueue* m_taskQ;</span><br><span class="line">    <span class="type">static</span> mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line">TaskQueue* TaskQueue::m_taskQ = <span class="literal">nullptr</span>;</span><br><span class="line">mutex TaskQueue::m_mutex;</span><br></pre></td></tr></table></figure><p>改进的思路就是在加锁、解锁的代码块外层有添加了一个<code>if判断</code>（第9行），这样当任务队列的实例被创建出来之后，访问这个对象的线程就不会再执行加锁和解锁操作了（只要有了单例类的实例对象，限行就解除了），对于第一次创建单例对象的时候线程之间还是具有竞争关系，被互斥锁阻塞。上面这种通过<code>两个嵌套的 if 来判断单例对象是否为空的操作就叫做双重检查锁定。</code></p><h4 id="双重检查锁定的问题"><a href="#双重检查锁定的问题" class="headerlink" title="双重检查锁定的问题"></a>双重检查锁定的问题</h4><p>假设有两个线程A、B，当线程A 执行到第 8 行时在线程A中 <code>TaskQueue 实例对象</code> 被创建，并赋值给 <code>m_taskQ</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_taskQ == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span> (m_taskQ == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_taskQ = <span class="keyword">new</span> TaskQueue;</span><br><span class="line">        &#125;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_taskQ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是实际上 <code>m_taskQ = new TaskQueue;</code> 在执行过程中<code>对应的机器指令可能会被重新排序</code>。正常过程如下：</p><ul><li><p>第一步：分配内存用于保存 TaskQueue 对象。</p></li><li><p>第二步：在分配的内存中构造一个 TaskQueue 对象（初始化内存）。</p></li><li><p>第三步：使用 m_taskQ 指针指向分配的内存。</p></li></ul><p>但是被重新排序以后执行顺序可能会变成这样：</p><ul><li><p>第一步：分配内存用于保存 TaskQueue 对象。</p></li><li><p>第二步：使用 m_taskQ 指针指向分配的内存。</p></li><li><p>第三步：在分配的内存中构造一个 TaskQueue 对象（初始化内存）。</p></li></ul><p>这样重排序并不影响单线程的执行结果，但是在多线程中就会出问题。如果线程A按照第二种顺序执行机器指令，执行完前两步之后失去CPU时间片被挂起了，此时线程B在第3行处进行指针判断的时候<font color = red>m_taskQ 指针是不为空的，但这个指针指向的内存却没有被初始化，最后线程 B 使用了一个没有被初始化的队列对象就出问题了（出现这种情况是概率问题，需要反复的大量测试问题才可能会出现）。</font></p><p>在C++11中引入了原子变量<code>atomic</code>，通过原子变量可以实现一种更安全的懒汉模式的单例，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        TaskQueue* queue = m_taskQ.<span class="built_in">load</span>();  </span><br><span class="line">        <span class="keyword">if</span> (queue == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// m_mutex.lock();  // 加锁: 方式1</span></span><br><span class="line">            <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;  <span class="comment">// 加锁: 方式2</span></span><br><span class="line">            queue = m_taskQ.<span class="built_in">load</span>();</span><br><span class="line">            <span class="keyword">if</span> (queue == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                queue = <span class="keyword">new</span> TaskQueue;</span><br><span class="line">                m_taskQ.<span class="built_in">store</span>(queue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// m_mutex.unlock();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;hello, world!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> atomic&lt;TaskQueue*&gt; m_taskQ;</span><br><span class="line">    <span class="type">static</span> mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line">atomic&lt;TaskQueue*&gt; TaskQueue::m_taskQ;</span><br><span class="line">mutex TaskQueue::m_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TaskQueue* queue = TaskQueue::<span class="built_in">getInstance</span>();</span><br><span class="line">    queue-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中使用原子变量<code>atomic</code>的<code>store()</code> 方法来存储单例对象，使用<code>load()</code> 方法来加载单例对象。在原子变量中这两个函数在处理指令的时候默认的原子顺序是<code>memory_order_seq_cst（顺序原子操作 - sequentially consistent）</code>，使用顺序约束原子操作库，整个函数执行都将保证顺序执行，并且不会出现数据竞态（data races），不足之处就是使用<code>这种方法实现的懒汉模式的单例执行效率更低一些。</code></p><h4 id="静态局部对象"><a href="#静态局部对象" class="headerlink" title="静态局部对象"></a>静态局部对象</h4><p>在实现懒汉模式的单例的时候，相较于双重检查锁定模式有一种更简单的实现方法并且不会出现线程安全问题，那就是使用静态局部局部对象，对应的代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">static</span> TaskQueue taskQ;</span><br><span class="line">        <span class="keyword">return</span> &amp;taskQ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;hello, world!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TaskQueue* queue = TaskQueue::<span class="built_in">getInstance</span>();</span><br><span class="line">    queue-&gt;<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序的第 9、10 行定义了一个<code>静态局部队列对象，并且将这个对象作为了唯一的单例实例。</code>使用这种方式之所以是线程安全的，是因为在C++11标准中有如下规定，并且这个操作是在编译时由编译器保证的：</p><blockquote><p><font color = red>如果指令逻辑进入一个未被初始化的声明变量，所有并发执行应当等待该变量完成初始化。</font></p></blockquote><p>最后总结一下懒汉模式和饿汉模式的区别：</p><blockquote><p><font color = red>懒汉模式的缺点是在创建实例对象的时候有安全问题，但这样可以减少内存的浪费（如果用不到就不去申请内存了）。饿汉模式则相反，在我们不需要这个实例对象的时候，它已经被创建出来，占用了一块内存。对于现在的计算机而言，内存容量都是足够大的，这个缺陷可以被无视。</font></p></blockquote><h2 id="3-5-写一个任务队列"><a href="#3-5-写一个任务队列" class="headerlink" title="3.5 写一个任务队列"></a>3.5 写一个任务队列</h2><p>如果想给巴基的账本升级成一个应用程序，首要任务就是设计一个单例模式的任务队列，那么就需要赋予这个类一些属性和方法：</p><ol><li>属性：<ul><li>存储任务的容器，这个容器可以选择使用<code>STL中的队列（queue)</code></li><li>互斥锁，多线程访问的时候用于保护任务队列中的数据</li></ul></li><li>方法：主要是对任务队列中的任务进行操作<ul><li>任务队列中任务是否为空</li><li>往任务队列中添加一个任务</li><li>从任务队列中取出一个任务</li><li>从任务队列中删除一个任务</li></ul></li></ol><p>根据分析，就可以把这个饿汉模式的任务队列的单例类定义出来了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// = delete 代表函数禁用, 也可以将其访问权限设置为私有</span></span><br><span class="line">    <span class="built_in">TaskQueue</span>(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    TaskQueue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> TaskQueue&amp; obj) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> TaskQueue* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;m_obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 任务队列是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        <span class="type">bool</span> flag = m_taskQ.<span class="built_in">empty</span>();</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加任务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addTask</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        m_taskQ.<span class="built_in">push</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出一个任务</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">takeTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!m_taskQ.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_taskQ.<span class="built_in">front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除一个任务</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">popTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!m_taskQ.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            m_taskQ.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> TaskQueue m_obj;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; m_taskQ;</span><br><span class="line">    mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line">TaskQueue TaskQueue::m_obj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">([]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        TaskQueue* taskQ = TaskQueue::getInstance();</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span></span></span><br><span class="line"><span class="params"><span class="function">        &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            taskQ-&gt;addTask(i + <span class="number">100</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">            cout &lt;&lt; <span class="string">&quot;+++push task: &quot;</span> &lt;&lt; i + <span class="number">100</span> &lt;&lt; <span class="string">&quot;, threadID: &quot;</span> </span></span></span><br><span class="line"><span class="params"><span class="function">                &lt;&lt; this_thread::get_id() &lt;&lt; endl;</span></span></span><br><span class="line"><span class="params"><span class="function">            this_thread::sleep_for(chrono::milliseconds(<span class="number">500</span>));</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">([]() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        TaskQueue* taskQ = TaskQueue::getInstance();</span></span></span><br><span class="line"><span class="params"><span class="function">        this_thread::sleep_for(chrono::milliseconds(<span class="number">100</span>));</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">while</span> (!taskQ-&gt;isEmpty())</span></span></span><br><span class="line"><span class="params"><span class="function">        &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="type">int</span> data = taskQ-&gt;takeTask();</span></span></span><br><span class="line"><span class="params"><span class="function">            cout &lt;&lt; <span class="string">&quot;---take task: &quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot;, threadID: &quot;</span> </span></span></span><br><span class="line"><span class="params"><span class="function">                &lt;&lt; this_thread::get_id() &lt;&lt; endl;</span></span></span><br><span class="line"><span class="params"><span class="function">            taskQ-&gt;popTask();</span></span></span><br><span class="line"><span class="params"><span class="function">            this_thread::sleep_for(chrono::seconds(<span class="number">1</span>));</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的程序中有以下几点需要说明一下：</p><ul><li><p>正常情况下，任务队列中的任务应该是一个函数指针（这个指针指向的函数中有需要执行的任务动作），此处进行了简化，用一个整形数代替了任务队列中的任务。</p></li><li><pre><code>任务队列中的互斥锁保护的是单例对象的中的数据也就是任务队列中的数据，上面所说的线程安全指的是在创建单例对象的时候要保证这个对象只被创建一次，和此处完全是两码事儿，需要区别看待。</code></pre></li><li><p>在<code>main()</code>函数中创建了两个子线程<br><code>t1线程</code>的处理动作是往任务队列中添加任务，<code>t2线程</code>的处理动作是从任务队列中取任务，为了保证能够取出所有的任务，此处需要让<code>t2线程</code>的执行晚并且慢一些。</p></li></ul><hr><h1 id="4-简单工厂模式"><a href="#4-简单工厂模式" class="headerlink" title="4. 简单工厂模式"></a>4. 简单工厂模式</h1><h2 id="4-1-工厂模式的特点"><a href="#4-1-工厂模式的特点" class="headerlink" title="4.1 工厂模式的特点"></a>4.1 工厂模式的特点</h2><ol><li>实现有成本【<font color = red>构造一个对象有时候需要经历一个非常复杂的操作流程，既然麻烦那索性就不干了。】</font></li><li>有需求下单就行，只需关心结果，无需关心过程【<font color = red>实现了解耦合</font>】。</li><li>出了问题，自己无责任，售后直接找明哥【<font color = red>便于维护</font>】。</li></ol><p>在程序设计中，这种模式就叫做工厂模式，工厂生成出的产品就是某个类的实例，也就是对象。关于工厂模式一共有三种，分别是：<code>简单工厂模式</code>、<code>工厂模式</code>、<code>抽象工厂模式</code>。</p><p>通过上面人造恶魔果实的例子，我们能够了解到，不论使用哪种工厂模式其主要目的都是<font color = red>实现类与类之间的解耦合，这样我们在创建对象的时候就变成了拿来主义，使程序更加便于维护。</font></p><p>基于简单工厂模式去创建对象的时候，需要提供一个工厂类，专门用于生产需要的对象，这样关于对象的创建操作就被剥离出去了。</p><p><strong>简单工厂模式相关类的创建和使用步骤如下：</strong></p><ol><li>创建一个新的类, 可以将这个类称之为工厂类。对于简单工厂模式来说，需要的工厂类只有一个。</li><li>在这个工厂类中添加一个公共的成员函数，通过这个函数来创建我们需要的对象，关于这个函数一般将其称之为工厂函数。</li><li>关于使用，首先创建一个工厂类对象，然后通过这个对象调用工厂函数，这样就可以生产出一个指定类型的实例对象了。</li></ol><h2 id="4-2-生产的产品"><a href="#4-2-生产的产品" class="headerlink" title="4.2 生产的产品"></a>4.2 生产的产品</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人造恶魔果实· 绵羊形态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepSmile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 山羊人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;将手臂变成绵羊角的招式 -- 巨羊角&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人造恶魔果实· 狮子形态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LionSmile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 狮子人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;火遁· 豪火球之术...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人造恶魔果实· 蝙蝠形态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BatSmile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 蝙蝠人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;声纳引箭之万剑归宗...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不论是吃了那种恶魔果实，获得了相应的能力之后，可以做的事情大体是相同的，那就是形态变化<code>transform()</code> 和 使用果实能力<code>alility()</code>。</p><p>另外，生产这些恶魔果实的时候可能需要极其复杂的参数，在此就省略了【<font color = red>也就是说这些类的构造函数的参数在此被省略了</font>】。</p><h2 id="4-3-如何生产"><a href="#4-3-如何生产" class="headerlink" title="4.3 如何生产"></a>4.3 如何生产</h2><p>如果想要生产出这些恶魔果实，可以先创建一个工厂类，然后再给这个工厂类添加一个工厂函数，又因为我们要生成三种不同类型的恶魔果实，所以可以给工厂函数添加一个参数，用以控制当前要生产的是哪一类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">Type</span>:<span class="type">char</span>&#123;SHEEP, LION, BAT&#125;;</span><br><span class="line"><span class="comment">// 恶魔果实工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmileFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum class</span> <span class="title class_">Type</span>:<span class="type">char</span>&#123;SHEEP, LION, BAT&#125;;</span><br><span class="line">    <span class="built_in">SmileFactory</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">SmileFactory</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="title">createSmile</span><span class="params">(Type type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">void</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> Type::SHEEP:</span><br><span class="line">            ptr = <span class="keyword">new</span> SheepSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Type::LION:</span><br><span class="line">            ptr = <span class="keyword">new</span> LionSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Type::BAT:</span><br><span class="line">            ptr = <span class="keyword">new</span> BatSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SmileFactory* factory = <span class="keyword">new</span> SmileFactory;</span><br><span class="line">    BatSmile* batObj = (BatSmile*)factory-&gt;<span class="built_in">createSmile</span>(Type::BAT);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于恶魔果实的类型，上面的类中用到了<code>强类型枚举（C++11新特性）</code>，增强了代码的可读性，并且将枚举元素设置为了<code>char</code>类型，节省了内存。</li><li>函数<code>createSmile(Type type)</code>的返回值是<code>void*</code>类型，这样处理主要是因为每个<code>case 语句</code>创建出的对象类型是不一样的，为了实现兼容，故此这样处理。</li><li>得到函数<code>createSmile(Type type)</code>的返回值之后，还需要将其转换成实际的类型，处理起来还是比较繁琐的。</li></ul><p>关于工厂函数的返回值，在C++中还有一种更好的解决方案，就是使用<code>多态</code>。如果想要实现多态，需要满足三个条件：</p><ol><li><font color = red>类和类之间有继承关系。</font></li><li><font color = red>父类中有虚函数，并且在子类中需要重写这些虚函数。</font></li><li><font color = red>使用父类指针或引用指向子类对象。</font></li></ol><p>所以，我们需要给人造恶魔果实提供一个基类，然后让上边的三个类<code>SheepSmile</code>、<code>LionSmile</code>、<code>BatSmile</code>作为子类继承这个基类。根据分析我们就有画出简单工厂模式的UML类图了：</p><p><img src="/img/master13.png"></p><p>根据UML类图，编写出的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractSmile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">transform</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ability</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AbstractSmile</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 人造恶魔果实· 绵羊形态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepSmile</span> : <span class="keyword">public</span> AbstractSmile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 山羊人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;将手臂变成绵羊角的招式 -- 巨羊角&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人造恶魔果实· 狮子形态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LionSmile</span> : <span class="keyword">public</span> AbstractSmile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 狮子人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;火遁· 豪火球之术...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BatSmile</span> : <span class="keyword">public</span> AbstractSmile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 蝙蝠人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;声纳引箭之万剑归宗...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恶魔果实工厂类</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">Type</span>:<span class="type">char</span>&#123;SHEEP, LION, BAT&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmileFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SmileFactory</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">SmileFactory</span>() &#123;&#125;</span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">(Type type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AbstractSmile* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> Type::SHEEP:</span><br><span class="line">            ptr = <span class="keyword">new</span> SheepSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Type::LION:</span><br><span class="line">            ptr = <span class="keyword">new</span> LionSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Type::BAT:</span><br><span class="line">            ptr = <span class="keyword">new</span> BatSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SmileFactory* factory = <span class="keyword">new</span> SmileFactory;</span><br><span class="line">    AbstractSmile* obj = factory-&gt;<span class="built_in">createSmile</span>(Type::BAT);</span><br><span class="line">    obj-&gt;<span class="built_in">transform</span>();</span><br><span class="line">    obj-&gt;<span class="built_in">ability</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们实现了一个简单工厂模式，关于里边的细节有以下几点需要说明：</p><ol><li><p>由于人造恶魔果实类有继承关系， 并且实现了多态，所以父类的析构函数也应该是虚函数，这样才能够通过父类指针或引用析构子类的对象。</p></li><li><p>工厂函数<code>createSmile(Type type)</code>的返回值修改成了<code>AbstractSmile*</code>类型，这是人造恶魔果实类的基类，通过这个指针保存的是子类对象的地址，这样就实现了多态，所以在<code>main()</code>函数中，通过<code>obj</code>对象调用的实际是子类<code>BatSmile</code>中的函数，因此打印出的信息应该是这样的：</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变成人兽 -- 蝙蝠人形态...</span><br><span class="line">声纳引箭之万剑归宗...</span><br></pre></td></tr></table></figure><hr><h1 id="5-工厂模式"><a href="#5-工厂模式" class="headerlink" title="5. 工厂模式"></a>5. 工厂模式</h1><h2 id="5-1-简单工厂模式的弊端"><a href="#5-1-简单工厂模式的弊端" class="headerlink" title="5.1 简单工厂模式的弊端"></a>5.1 简单工厂模式的弊端</h2><p>简单工厂模式中，有一个弊端，它违反了设计模式中的<code>开放-封闭原则</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 恶魔果实工厂类</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">Type</span>:<span class="type">char</span>&#123;SHEEP, LION, BAT&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmileFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SmileFactory</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">SmileFactory</span>() &#123;&#125;</span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">(Type type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AbstractSmile* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> Type::SHEEP:</span><br><span class="line">            ptr = <span class="keyword">new</span> SheepSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Type::LION:</span><br><span class="line">            ptr = <span class="keyword">new</span> LionSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Type::BAT:</span><br><span class="line">            ptr = <span class="keyword">new</span> BatSmile;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的工厂函数中需要生成三种人造恶魔果实，现在如果想要生成更多，那么就需要在工厂函数的<code>switch</code>语句中添加更多的<code>case</code>，很明显这违背了<code>封闭原则</code>，也就意味着需要基于开放原则来解决这个问题。</p><p>使用工厂模式可以很完美的解决上述的问题，简单工厂模式是只有一个工厂类，而工厂模式是有很多的工厂类：</p><ul><li><font color = red>一个基类，包含一个虚工厂函数，用于实现多态。</font></li><li><pre><code>&lt;font color = red&gt;多个子类，重写父类的工厂函数。每个子工厂类负责生产一种恶魔果实，这相当于再次解耦，将工厂类的职责再次拆分、细化，如果要生产新品种的恶魔果实，那么只需要添加对应的工厂类，无需修改原有的代码。&lt;/font&gt;</code></pre></li></ul><h2 id="5-2-工厂模式"><a href="#5-2-工厂模式" class="headerlink" title="5.2 工厂模式"></a>5.2 工厂模式</h2><p>修改一下简单工厂模式中工厂类相关的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 恶魔果实工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AbstractFactory</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SheepSmile;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SheepFactory</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;释放 SheepFactory 类相关的内存资源&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LionFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LionSmile;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">LionFactory</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;释放 LionFactory 类相关的内存资源&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BatFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BatSmile;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">BatFactory</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;释放 BatFactory 类相关的内存资源&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过示例代码可以看到，每个工厂类其实都不复杂，<font color = red>在每个子工厂类中也只是重写了父类的工厂方法而已，每个子工厂类生产一种恶魔果实，但是工厂函数的返回值确是恶魔果实类的基类类型，相当于是使用父类指针指向了子类对象，此处也是用到了多态。</font>通过这样的处理，工厂函数也就不再需要参数了。</p><p>根据简单工厂模式的代码和上面的修改就可以把工厂模式的UML类图画出来了：</p><p><img src="/img/master14.png"></p><p>完整的代码应该是这样的:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractSmile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">transform</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ability</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AbstractSmile</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 人造恶魔果实· 绵羊形态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepSmile</span> : <span class="keyword">public</span> AbstractSmile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 山羊人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;将手臂变成绵羊角的招式 -- 巨羊角&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人造恶魔果实· 狮子形态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LionSmile</span> : <span class="keyword">public</span> AbstractSmile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 狮子人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;火遁· 豪火球之术...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BatSmile</span> : <span class="keyword">public</span> AbstractSmile</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;变成人兽 -- 蝙蝠人形态...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ability</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;声纳引箭之万剑归宗...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恶魔果实工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AbstractFactory</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SheepSmile;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SheepFactory</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;释放 SheepFactory 类相关的内存资源&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LionFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 工厂函数</span></span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LionSmile;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">LionFactory</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;释放 LionFactory 类相关的内存资源&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BatFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 工厂函数</span></span><br><span class="line">    <span class="function">AbstractSmile* <span class="title">createSmile</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BatSmile;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">BatFactory</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;释放 BatFactory 类相关的内存资源&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractFactory* factory = <span class="keyword">new</span> BatFactory;</span><br><span class="line">    AbstractSmile* obj = factory-&gt;<span class="built_in">createSmile</span>();</span><br><span class="line">    obj-&gt;<span class="built_in">transform</span>();</span><br><span class="line">    obj-&gt;<span class="built_in">ability</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>main()</code>函数中的这句代码是实例化了一个生成蝙蝠恶魔果实的工厂对象:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractFactory* factory = <span class="keyword">new</span> BatFactory;</span><br></pre></td></tr></table></figure><p>在真实的项目场景中，要生成什么类型的恶魔果实其实是通过客户端的操作界面控制的，它对应的可能是一个按钮或者是一个选择列表，用户做出了选择，程序就可以根据该需求去创建对应的工厂对象，最终将选择的恶魔果实生产出来。</p><blockquote><p><font color = red>在上面的例子中，不论是恶魔果实的基类，还是工厂类的基类，它们的虚函数可以是纯虚函数，也可以是非纯虚函数。这样的基类在设计模式中就可以称之为抽象类（此处的抽象类和C++中对抽象类的定义有一点出入）。</font></p></blockquote><hr><h1 id="6-抽象工厂模式"><a href="#6-抽象工厂模式" class="headerlink" title="6. 抽象工厂模式"></a>6. 抽象工厂模式</h1><h2 id="6-1-船支设计"><a href="#6-1-船支设计" class="headerlink" title="6.1 船支设计"></a>6.1 船支设计</h2><p>提供了不同型号的海贼船，一共是三个级别，如下表：</p><table><thead><tr><th></th><th>基础型</th><th>标准型</th><th>旗舰型</th></tr></thead><tbody><tr><td>船体</td><td>木头</td><td>钢铁</td><td>合成金属</td></tr><tr><td>动力</td><td>手动</td><td>内燃机</td><td>核能</td></tr><tr><td>武器</td><td>枪</td><td>速射炮</td><td>激光</td></tr></tbody></table><p>根据这个表，在造船的时候需要根据不同的型号选择相应的零部件，在设计程序的时候还需要保证遵循<code>开放-封闭原则</code>，即添加了新型号之后不需要修改原有代码，而是添加新的代码。</p><h3 id="6-1-1-船体"><a href="#6-1-1-船体" class="headerlink" title="6.1.1 船体"></a>6.1.1 船体</h3><p>因为要建造的这艘船是由多个部件组成的并且每个部件还有不同的品级可供选择，先说船体，<code>关于船体材料的这个属性是可变的，所以还需要给它提供一个抽象类，这样在这个抽象类的子类中就可以更换不同的船体材料了：</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 船体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShipBody</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getShipBody</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ShipBody</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WoodBody</span> : <span class="keyword">public</span> ShipBody</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getShipBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;用&lt;木材&gt;制作轮船船体...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IronBody</span> : <span class="keyword">public</span> ShipBody</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getShipBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;用&lt;钢铁&gt;制作轮船船体...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MetalBody</span> : <span class="keyword">public</span> ShipBody</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getShipBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;用&lt;合金&gt;制作轮船船体...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样，只要添加了新的造船材料，就给它添加一个对应的子类（父类是 <code>ShipBody</code>），在这个子类重写父类的虚函数<code>getShipBody()</code>，用这种材料把船体造出来就行了。</p><h3 id="6-1-2-动力和武器"><a href="#6-1-2-动力和武器" class="headerlink" title="6.1.2 动力和武器"></a>6.1.2 动力和武器</h3><p>知道了如何处理<code>船体</code>部分，那么<code>动力</code>和<code>武器</code>部分的处理思路也是一样的：</p><ul><li>可以给船提供不同的动力系统，因此这个属性是可变的，所以需要提供一个抽象类</li><li>可以给船提供不同的武器系统，因此这个属性也是可变的，所以也需要提供一个抽象类</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动力</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getEngine</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Engine</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;使用&lt;人力驱动&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Diesel</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;使用&lt;内燃机驱动&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nuclear</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;使用&lt;核能驱动&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 武器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getWeapon</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Weapon</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gun</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;配备的武器是&lt;枪&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cannon</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;配备的武器是&lt;自动机关炮&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Laser</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;配备的武器是&lt;激光&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不论是<code>动力</code>还是<code>武器</code>系统都是需要提供一个<code>抽象类</code>，这样它们的子类就可以基于这个<code>抽象基类</code>进行专门定制，如果要对它们进行<code>拓展</code>也只需添加新的类，不需要修改原有代码。</p><h3 id="6-1-3-一艘船"><a href="#6-1-3-一艘船" class="headerlink" title="6.1.3 一艘船"></a>6.1.3 一艘船</h3><p>如果有了以上的零件，只需要在工厂中将它们装配到一起，这样就得到了一艘船，这是一艘什么型号的船取决于使用的是什么零件，所以只需要让这艘船对应一个类就可以了，这个类的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 轮船类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ship</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Ship</span>(ShipBody* body, Weapon* weapon, Engine* engine) :</span><br><span class="line">        <span class="built_in">m_body</span>(body), <span class="built_in">m_weapon</span>(weapon), <span class="built_in">m_engine</span>(engine) </span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getProperty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string info = m_body-&gt;<span class="built_in">getShipBody</span>() + m_weapon-&gt;<span class="built_in">getWeapon</span>() + m_engine-&gt;<span class="built_in">getEngine</span>();</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Ship</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_body;</span><br><span class="line">        <span class="keyword">delete</span> m_engine;</span><br><span class="line">        <span class="keyword">delete</span> m_weapon;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ShipBody* m_body = <span class="literal">nullptr</span>;</span><br><span class="line">    Weapon* m_weapon = <span class="literal">nullptr</span>;</span><br><span class="line">    Engine* m_engine = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这艘船使用的零件是通过构造函数参数传递进来的，并在类的内部对这些零件对象进行了保存，这样在释放船这个对象的时候就可以将相应的零件对象一并析构了。</p><p>另外，在<code>Ship</code>这个类中保存零件对象的时候使用的是它们的父类指针，这样就可以实现多态了。</p><h2 id="6-2-准备生产"><a href="#6-2-准备生产" class="headerlink" title="6.2 准备生产"></a>6.2 准备生产</h2><p>万事俱备，只剩建厂了。造船厂要生产三种型号的船，那么也就是至少需要三条生产线，所以对应的工厂类也就不止一个，处理思路还是一样的，<code>提供一个抽象的基类，然后在它的子类中完成各种型号的船的组装，每个子类对应的就是一条生产线。</code></p><h3 id="6-2-1-设计图纸"><a href="#6-2-1-设计图纸" class="headerlink" title="6.2.1 设计图纸"></a>6.2.1 设计图纸</h3><p>现在，关于抽象工厂模式的逻辑应该是比较清晰了，下面来看一下这个模式对应的UML类图：</p><p><img src="/img/master15.png"></p><p>在这个图中有四个抽象类，分别是：</p><ol><li><code>ShipBody 类</code>：船体的抽象类<br>有三个子类，在子类中通过不同的材料来建造船体</li><li><code>Weapon 类</code>：武器的抽象类<br>有三个子类，在子类中给战船提供不同种类的武器</li><li><code>Engine 类</code>：动力系统抽象类<br>有三个子类，在子类中给战船提供不同动力系统</li><li><code>AbstractFactory 类</code>：抽象工厂类<ul><li>在子工厂类中生产不同型号的战船</li><li>和<code>ShipBody</code> 、<code>Weapon</code>、<code>Engine</code>有依赖关系，在工厂函数中创建了它们的实例对象</li><li>和<code>Ship</code> 类有依赖关系，在工厂函数中创建了它的实例对象</li></ul></li></ol><p>关于<code>Ship</code>类它可以和<code>ShipBody</code> 、<code>Weapon</code>、<code>Engine</code>可以是聚合关系，也可以是组合关系：</p><ul><li>组合关系：析构<code>Ship</code>类对象的时候，也释放了<code>ShipBody</code> 、<code>Weapon</code>、<code>Engine</code>对象</li><li>聚合关系：析构<code>Ship</code>类对象的时候，没有释放<code>ShipBody</code> 、<code>Weapon</code>、<code>Engine</code>对象</li></ul><p>在上面的<code>Ship</code>类的析构函数中做了释放操作，因此在UML中将它们之间描述为了组合关系。</p><blockquote><p><font color = red>在使用抽象工厂模式来处理实际问题的时候，由于实际需求不一样，我们画出的UML类图中有些类和类之间的关系可能也会有所不同，所以上图只适用于当前的业务场景，在处理其他需求的时候还需要具体问题具体分析。</font></p></blockquote><h3 id="6-2-2-生产"><a href="#6-2-2-生产" class="headerlink" title="6.2.2 生产"></a>6.2.2 生产</h3><p>给上面的程序再添加相应的工厂类，就可以生产出我们需要的型号的船只了，示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 船体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShipBody</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getShipBody</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ShipBody</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WoodBody</span> : <span class="keyword">public</span> ShipBody</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getShipBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;用&lt;木材&gt;制作轮船船体...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IronBody</span> : <span class="keyword">public</span> ShipBody</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getShipBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;用&lt;钢铁&gt;制作轮船船体...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MetalBody</span> : <span class="keyword">public</span> ShipBody</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getShipBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;用&lt;合金&gt;制作轮船船体...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 武器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getWeapon</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Weapon</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gun</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;配备的武器是&lt;枪&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cannon</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;配备的武器是&lt;自动机关炮&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Laser</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;配备的武器是&lt;激光&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动力</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engine</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">getEngine</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Engine</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;使用&lt;人力驱动&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Diesel</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;使用&lt;内燃机驱动&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nuclear</span> : <span class="keyword">public</span> Engine</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;使用&lt;核能驱动&gt;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮船类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ship</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Ship</span>(ShipBody* body, Weapon* weapon, Engine* engine) :</span><br><span class="line">        <span class="built_in">m_body</span>(body), <span class="built_in">m_weapon</span>(weapon), <span class="built_in">m_engine</span>(engine) </span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getProperty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        string info = m_body-&gt;<span class="built_in">getShipBody</span>() + m_weapon-&gt;<span class="built_in">getWeapon</span>() + m_engine-&gt;<span class="built_in">getEngine</span>();</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Ship</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_body;</span><br><span class="line">        <span class="keyword">delete</span> m_engine;</span><br><span class="line">        <span class="keyword">delete</span> m_weapon;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ShipBody* m_body = <span class="literal">nullptr</span>;</span><br><span class="line">    Weapon* m_weapon = <span class="literal">nullptr</span>;</span><br><span class="line">    Engine* m_engine = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Ship* <span class="title">createShip</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AbstractFactory</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Ship* <span class="title">createShip</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Ship* ship = <span class="keyword">new</span> <span class="built_in">Ship</span>(<span class="keyword">new</span> WoodBody, <span class="keyword">new</span> Gun, <span class="keyword">new</span> Human);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;基础型&gt;战船生产完毕, 可以下水啦...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ship;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandardFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Ship* <span class="title">createShip</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Ship* ship = <span class="keyword">new</span> <span class="built_in">Ship</span>(<span class="keyword">new</span> IronBody, <span class="keyword">new</span> Cannon, <span class="keyword">new</span> Diesel);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;标准型&gt;战船生产完毕, 可以下水啦...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ship;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UltimateFactory</span> : <span class="keyword">public</span> AbstractFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Ship* <span class="title">createShip</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Ship* ship = <span class="keyword">new</span> <span class="built_in">Ship</span>(<span class="keyword">new</span> MetalBody, <span class="keyword">new</span> Laser, <span class="keyword">new</span> Nuclear);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;旗舰型&gt;战船生产完毕, 可以下水啦...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ship;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AbstractFactory* factroy = <span class="keyword">new</span> StandardFactory;</span><br><span class="line">    Ship* ship = factroy-&gt;<span class="built_in">createShip</span>();</span><br><span class="line">    cout &lt;&lt; ship-&gt;<span class="built_in">getProperty</span>();</span><br><span class="line">    <span class="keyword">delete</span> ship;</span><br><span class="line">    <span class="keyword">delete</span> factroy;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>main()</code>函数中，要通过工厂类的工厂函数生产什么型号的战船，和用户的需求息息相关，所以这个选择也是用户通过客户端的操作界面做出的，在这个例子中，关于客户端的界面操作就直接忽略了。</p><blockquote><p><font color = red>抽象工厂模式适用于比较复杂的多变的业务场景，总体上就是给一系列功能相同但是属性会发生变化的组件（如：船体材料、武器系统、动力系统）添加一个抽象类，这样就可以非常方便地进行后续的拓展，再搭配工厂类就可以创建出我们需要的对象了。</font></p></blockquote><p>关于简单工厂模式、工厂模式和抽象工厂模式的区别可以做如下总结：</p><ol><li>简单工厂模式<code>不能遵守开放-封闭原则</code>，工厂和抽象工厂模式可以</li><li>简单工厂模式只有一个工厂类，工厂和抽象工厂有多个工厂类</li><li>工厂模式创建的产品对象相对简单，抽象工厂模式创建的产品对象相对复杂<ul><li><font color = red>工厂模式创建的对象对应的类不需要提供抽象类【这产品类组件中没有可变因素】</font></li><li><font color = red>抽象工厂模式创建的对象对应的类有抽象的基类【这个产品类组件中有可变因素】</font></li></ul></li></ol><hr><h1 id="7-生成器-建造者模式"><a href="#7-生成器-建造者模式" class="headerlink" title="7. 生成器(建造者模式)"></a>7. 生成器(建造者模式)</h1><p><font color = red>化繁为简，逐个击破。也就是分步骤创建复杂的对象，并且允许使用相同的代码生成不同类型和形式的对象，这种模式叫做生成器模式（也叫建造者模式）</font></p><h2 id="7-1-模式特征"><a href="#7-1-模式特征" class="headerlink" title="7.1 模式特征"></a>7.1 模式特征</h2><h3 id="7-1-1-生成器"><a href="#7-1-1-生成器" class="headerlink" title="7.1.1 生成器"></a>7.1.1 生成器</h3><p>生成器模式建议将造船工序的代码从产品类中抽取出来， 并将其放在一个名为<code>生成器</code>的独立类中。</p><p><img src="/img/master16.png"></p><p>在这个生成器类中有一系列的构建步骤，每次造船的时候，只需从中<code>选择需要的步骤并调用</code>就可以得到满足需求的实例对象。</p><p>假设我们要通过上面的生成器建造很多不同规格、型号的海贼船，那么就需要创建多个生成器，但是有一点是不变的：<code>生成器内部的构建步骤不变。</code></p><table><thead><tr><th></th><th>基础型</th><th>标准型</th><th>旗舰型</th></tr></thead><tbody><tr><td>船体</td><td>有</td><td>有</td><td>有</td></tr><tr><td>动力</td><td>有</td><td>有</td><td>有</td></tr><tr><td>武器</td><td>无</td><td>有</td><td>有</td></tr><tr><td>内室</td><td>毛坯</td><td>毛坯</td><td>精装</td></tr></tbody></table><p>比如，我想建造两种型号的海贼船：<code>桑尼号</code>和<code>梅利号</code>，并且按照上面的三个规格，每种造一艘，此时就需要两个生成器：<code>桑尼号生成器</code>和<code>梅利号生成器</code>，并且这<font color = red>两个生成器还需要对应一个父类，父类生成器中的建造函数应该设置为虚函数。</font></p><h3 id="7-1-2-主管"><a href="#7-1-2-主管" class="headerlink" title="7.1.2 主管"></a>7.1.2 主管</h3><p>可以进一步将用于创建产品的一系列生成器步骤调用抽取成为单独的<code>主管类</code>。<br><font color = red>主管类可定义创建步骤的执行顺序， 而生成器则提供这些步骤的实现。</font></p><p>严格来说， 程序中并不一定需要主管类。 客户端代码可直接以特定顺序调用创建步骤。 不过， 主管类中非常适合放入各种例行构造流程， 以便在程序中反复使用。</p><p>此外， 对于客户端代码来说， 主管类完全隐藏了产品构造细节。 客户端只需要将一个生成器与主管类关联， 然后使用主管类来构造产品， 就能从生成器处获得构造结果了。</p><h2 id="7-2-建造"><a href="#7-2-建造" class="headerlink" title="7.2 建造"></a>7.2 建造</h2><h3 id="7-2-1-船模型"><a href="#7-2-1-船模型" class="headerlink" title="7.2.1 船模型"></a>7.2.1 船模型</h3><p>现在我们开始着手把 <code>桑尼号</code> 和 <code>梅利号</code>使用生成器模式键造出来。</p><ul><li>一共需要三个生成器类，一共父类，两个子类</li><li>父类可以是一个抽象类，提供的建造函数都是虚函数</li><li>在两个生成器子类中，使用建造函数分别将 <code>桑尼号</code> 和 <code>梅利号</code> 各个零部件造出来。</li></ul><p>如果我们仔细分析，发现还需要解决另外一个问题，通过生成器得到了海贼船的各个零部件，这些零部件必须有一个载体，那就是<code>海贼船对象</code>。因此，还需要提供一个或多个海贼船类。</p><p>因为 <code>桑尼号</code> 和 <code>梅利号</code> 这两艘的差别非常大，所以我们定义两个海贼船类，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 桑尼号</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SunnyShip</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 添加零件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addParts</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_parts.<span class="built_in">push_back</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showParts</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; item : m_parts)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; item &lt;&lt; <span class="string">&quot;   &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;string&gt; m_parts;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 梅利号</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MerryShip</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 组装</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">assemble</span><span class="params">(string name, string parts)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_patrs.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(name, parts));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showParts</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; item : m_patrs)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; item.first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; item.second &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    map&lt;string, string&gt; m_patrs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的两个类中，通过一个字符串来代表某个零部件，为了使这两个类有区别<code>SunnyShip 类</code>中使用<code>vector </code>容器存储数据，<code>MerryShip 类</code>中使用<code>map</code> 容器存储数据。</p><h3 id="7-2-2-船生成器"><a href="#7-2-2-船生成器" class="headerlink" title="7.2.2 船生成器"></a>7.2.2 船生成器</h3><p>虽然有海贼船类，但是这两个海贼船类并不造船，每艘船的零部件都是由他们对应的生成器类构建完成的，下面是生成器类的代码：</p><h4 id="抽象生成器"><a href="#抽象生成器" class="headerlink" title="抽象生成器"></a>抽象生成器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShipBuilder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">buildBody</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">buildWeapon</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">buildInterior</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ShipBuilder</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个抽象类中定义了建造海贼船所有零部件的方法，在这个类的子类中需要重写这些虚函数，分别完成<code>桑尼号</code> 和 <code>梅利号</code>零件的建造。</p><h4 id="桑尼号生成器"><a href="#桑尼号生成器" class="headerlink" title="桑尼号生成器"></a>桑尼号生成器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 桑尼号生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SunnyBuilder</span> : <span class="keyword">public</span> ShipBuilder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SunnyBuilder</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SunnyBuilder</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_sunny != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_sunny;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提供重置函数, 目的是能够使用生成器对象生成多个产品</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sunny = <span class="keyword">new</span> SunnyShip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sunny-&gt;<span class="built_in">addParts</span>(<span class="string">&quot;神树亚当的树干&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sunny-&gt;<span class="built_in">addParts</span>(<span class="string">&quot;狮吼炮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sunny-&gt;<span class="built_in">addParts</span>(<span class="string">&quot;可乐驱动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildInterior</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_sunny-&gt;<span class="built_in">addParts</span>(<span class="string">&quot;豪华内室精装&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">SunnyShip* <span class="title">getSunny</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SunnyShip* ship = m_sunny;</span><br><span class="line">        m_sunny = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ship;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SunnyShip* m_sunny = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个生成器类中只要调用<code>build 方法</code>，对应的零件就会被加载到<code>SunnyShip 类的对象 m_sunny 中</code>，当船被造好之后就可以通过<code>SunnyShip* getSunny()</code>方法得到<code>桑尼号的实例对象</code>，当这个对象地址被外部指针接管之后，当前生成器类就不会再维护其内存的释放了。如果想通过生成器对象建造第二艘桑尼号就可以调用这个类的<code>reset()</code>方法，这样就得到了一个新的桑尼号对象，之后再调用相应的建造函数，这个对象就被初始化了。</p><h4 id="梅利号生成器"><a href="#梅利号生成器" class="headerlink" title="梅利号生成器"></a>梅利号生成器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 梅利号生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MerryBuilder</span> : <span class="keyword">public</span> ShipBuilder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MerryBuilder</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MerryBuilder</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_merry != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_merry;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_merry = <span class="keyword">new</span> MerryShip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildBody</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_merry-&gt;<span class="built_in">assemble</span>(<span class="string">&quot;船体&quot;</span>, <span class="string">&quot;优质木材&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildWeapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_merry-&gt;<span class="built_in">assemble</span>(<span class="string">&quot;武器&quot;</span>, <span class="string">&quot;四门大炮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildEngine</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_merry-&gt;<span class="built_in">assemble</span>(<span class="string">&quot;动力&quot;</span>, <span class="string">&quot;蒸汽机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buildInterior</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_merry-&gt;<span class="built_in">assemble</span>(<span class="string">&quot;内室&quot;</span>, <span class="string">&quot;精装&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">MerryShip* <span class="title">getMerry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MerryShip* ship = m_merry;</span><br><span class="line">        m_merry = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ship;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MerryShip* m_merry = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>梅利号的生成器和桑尼号的生成器内部做的事情是一样的，在此就不过多赘述了。</p><h3 id="7-2-3-主管类"><a href="#7-2-3-主管类" class="headerlink" title="7.2.3 主管类"></a>7.2.3 主管类</h3><p>如果想要隐藏造船细节，就可以添加一个主管类，这个主管类就相当于一个包工头，脏活累活他都干了，我们看到的就是一个结果。</p><p>根据需求，桑尼号和梅利号分别有三个规格，<code>简约型</code>、<code>标准型</code>、<code>豪华型</code>，根据不同的规格，有选择的调用生成器中不同的建造函数，就可以得到最终的成品了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主管类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBuilder</span><span class="params">(ShipBuilder* builder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 简约型</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">builderSimpleShip</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_builder-&gt;<span class="built_in">buildBody</span>();</span><br><span class="line">        m_builder-&gt;<span class="built_in">buildEngine</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标准型</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">builderStandardShip</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">builderSimpleShip</span>();</span><br><span class="line">        m_builder-&gt;<span class="built_in">buildWeapon</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 豪华型</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">builderRegalShip</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">builderStandardShip</span>();</span><br><span class="line">        m_builder-&gt;<span class="built_in">buildInterior</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ShipBuilder* m_builder = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在使用主管类的时候，需要通过<code>setBuilder(ShipBuilder* builder)</code>给它的对象传递一个<code>生成器对象</code>，形参是父类指针，实参应该是子类对象，这样做的目的是为了实现多态，并且在这个地方这个函数是一个<code>传入传出参数</code>。</p><h2 id="7-3-验收"><a href="#7-3-验收" class="headerlink" title="7.3 验收"></a>7.3 验收</h2><p>最后测试一个桑尼号和梅利号分别对应的三种规格的船能否被建造出来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建造桑尼号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">builderSunny</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Director* director = <span class="keyword">new</span> Director;</span><br><span class="line">    SunnyBuilder* builder = <span class="keyword">new</span> SunnyBuilder;</span><br><span class="line">    <span class="comment">// 简约型</span></span><br><span class="line">    director-&gt;<span class="built_in">setBuilder</span>(builder);</span><br><span class="line">    director-&gt;<span class="built_in">builderSimpleShip</span>();</span><br><span class="line">    SunnyShip* sunny = builder-&gt;<span class="built_in">getSunny</span>();</span><br><span class="line">    sunny-&gt;<span class="built_in">showParts</span>();</span><br><span class="line">    <span class="keyword">delete</span> sunny;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准型</span></span><br><span class="line">    builder-&gt;<span class="built_in">reset</span>();</span><br><span class="line">    director-&gt;<span class="built_in">setBuilder</span>(builder);</span><br><span class="line">    director-&gt;<span class="built_in">builderStandardShip</span>();</span><br><span class="line">    sunny = builder-&gt;<span class="built_in">getSunny</span>();</span><br><span class="line">    sunny-&gt;<span class="built_in">showParts</span>();</span><br><span class="line">    <span class="keyword">delete</span> sunny;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 豪华型</span></span><br><span class="line">    builder-&gt;<span class="built_in">reset</span>();</span><br><span class="line">    director-&gt;<span class="built_in">setBuilder</span>(builder);</span><br><span class="line">    director-&gt;<span class="built_in">builderRegalShip</span>();</span><br><span class="line">    sunny = builder-&gt;<span class="built_in">getSunny</span>();</span><br><span class="line">    sunny-&gt;<span class="built_in">showParts</span>();</span><br><span class="line">    <span class="keyword">delete</span> sunny;</span><br><span class="line">    <span class="keyword">delete</span> builder;</span><br><span class="line">    <span class="keyword">delete</span> director;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造梅利号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">builderMerry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Director* director = <span class="keyword">new</span> Director;</span><br><span class="line">    MerryBuilder* builder = <span class="keyword">new</span> MerryBuilder;</span><br><span class="line">    <span class="comment">// 简约型</span></span><br><span class="line">    director-&gt;<span class="built_in">setBuilder</span>(builder);</span><br><span class="line">    director-&gt;<span class="built_in">builderSimpleShip</span>();</span><br><span class="line">    MerryShip* merry = builder-&gt;<span class="built_in">getMerry</span>();</span><br><span class="line">    merry-&gt;<span class="built_in">showParts</span>();</span><br><span class="line">    <span class="keyword">delete</span> merry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标准型</span></span><br><span class="line">    builder-&gt;<span class="built_in">reset</span>();</span><br><span class="line">    director-&gt;<span class="built_in">setBuilder</span>(builder);</span><br><span class="line">    director-&gt;<span class="built_in">builderStandardShip</span>();</span><br><span class="line">    merry = builder-&gt;<span class="built_in">getMerry</span>();</span><br><span class="line">    merry-&gt;<span class="built_in">showParts</span>();</span><br><span class="line">    <span class="keyword">delete</span> merry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 豪华型</span></span><br><span class="line">    builder-&gt;<span class="built_in">reset</span>();</span><br><span class="line">    director-&gt;<span class="built_in">setBuilder</span>(builder);</span><br><span class="line">    director-&gt;<span class="built_in">builderRegalShip</span>();</span><br><span class="line">    merry = builder-&gt;<span class="built_in">getMerry</span>();</span><br><span class="line">    merry-&gt;<span class="built_in">showParts</span>();</span><br><span class="line">    <span class="keyword">delete</span> merry;</span><br><span class="line">    <span class="keyword">delete</span> builder;</span><br><span class="line">    <span class="keyword">delete</span> director;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">builderSunny</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=====================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">builderMerry</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">神树亚当的树干   可乐驱动</span><br><span class="line">神树亚当的树干   可乐驱动   狮吼炮</span><br><span class="line">神树亚当的树干   可乐驱动   狮吼炮   豪华内室精装</span><br><span class="line">===================================== </span><br><span class="line">船体: 优质木材  动力: 蒸汽机</span><br><span class="line">船体: 优质木材  动力: 蒸汽机  武器: 四门大炮</span><br><span class="line">船体: 优质木材  动力: 蒸汽机  内室: 精装  武器: 四门大炮</span><br></pre></td></tr></table></figure><p>可以看到，输出结果是没问题的，使用生成器模式造船成功！</p><h2 id="7-4-UML"><a href="#7-4-UML" class="headerlink" title="7.4 UML"></a>7.4 UML</h2><p>最后根据上面的代码把UML类图画一下（在学习设计模式的时候只能最后出图，在做项目的时候应该是先画UML类图，再写程序）。</p><p><img src="/img/master17.png"></p><p>通过编写的代码可得知<code>Director 类</code> 和 <code>ShipBuilder 类</code>之间有两种关系<code>依赖</code>和<code>关联</code>，但在描述这二者的关系的时候只能画一条线，一般会选择最紧密的那个关系，在此处就是<code>关联关系</code>。</p><p>在这个图中，没有把使用这用这些类的客户端画出来，这个客户端对应的是上面程序中的<code>main()</code>函数中调用的测试代码，在真实场景中对应的应该是一个客户端操作界面，由用户做出选择，从而在程序中根据选择建造不同型号，不同规格的船。</p><hr><h1 id="8-原型模式"><a href="#8-原型模式" class="headerlink" title="8. 原型模式"></a>8. 原型模式</h1><blockquote><p><font color = red>克隆是一种最直接、最快捷的创建新对象的方式，它不仅隐藏了创建新对象的诸多细节，还保留了源对象的属性信息，保证了这两个对象能够一模一样。即原型模式<br>原型模式就是能够复制已有的对象，而又无需使代码依赖它们所属的类。换种说法，就是通过已有对象克隆出另一个新的对象，并且克隆这个对象不需要使用构造函数。</font></p></blockquote><p>在C++中只要定义一个类，这个类就默认自带六大函数，其中一个就是<code>拷贝构造函数</code>，这个函数的作用就是通过一个已有对象克隆出一个新的对象。<br>一个拷贝构造函数就能搞定的事情为啥还要搞出一种设计模式呢？<br>因为这里边还隐藏着一个细节。</p><ul><li>我们可能想要通父类指针或引用把指向的子类对象克隆出来</li></ul><p>通过这个描述，就可以从里面挖掘出一个重要的信息：<code>克隆可能会在父类和子类之间进行，并且可能是动态的，很明显通过父类的拷贝构造函数无法实现对子类对象的拷贝</code>，其实这就是一个多态，<code>我们需要给父类提供一个克隆函数并且是一个虚函数。</code></p><p>对应UML类图</p><p><img src="/img/master18.png"></p><p>根据上面的UML类图，我们就可以把对应的代码写出了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GermaSoldier</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> GermaSoldier* <span class="title">clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> string <span class="title">whoAmI</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">GermaSoldier</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Soldier66</span> : <span class="keyword">public</span> GermaSoldier</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">GermaSoldier* <span class="title">clone</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Soldier66</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">whoAmI</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;我是杰尔马66的超级士兵!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Soldier67</span> : <span class="keyword">public</span> GermaSoldier</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">GermaSoldier* <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Soldier67</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">whoAmI</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;我是杰尔马67的超级士兵!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GermaSoldier* obj = <span class="keyword">new</span> Soldier66;</span><br><span class="line">    GermaSoldier* soldier = obj-&gt;<span class="built_in">clone</span>();</span><br><span class="line">    cout &lt;&lt; soldier-&gt;<span class="built_in">whoAmI</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> soldier;</span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line"></span><br><span class="line">    obj = <span class="keyword">new</span> Soldier67;</span><br><span class="line">    soldier = obj-&gt;<span class="built_in">clone</span>();</span><br><span class="line">    cout &lt;&lt; soldier-&gt;<span class="built_in">whoAmI</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> soldier;</span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的<code>main()</code>函数对应的就是UML类图中的客户端角色。</p><ul><li>第41行通过父类指针克隆了子类<code>Soldier66</code>的对象</li><li>第47行通过父类指针克隆了子类<code>Soldier67</code>的对象</li><li>在这两个士兵子类的<code>clone()</code>函数体内部是通过当前子类的拷贝构造函数复制出了一个新的子类对象。</li></ul><p>程序执行的结果如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是杰尔马<span class="number">66</span>的超级士兵!!!</span><br><span class="line">我是杰尔马<span class="number">67</span>的超级士兵!!!</span><br></pre></td></tr></table></figure><p>通过输出的结果可以看到通过父类指针克隆子类的对象成功了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-UML类图&quot;&gt;&lt;a href=&quot;#1-UML类图&quot; class=&quot;headerlink&quot; title=&quot;1. UML类图&quot;&gt;&lt;/a&gt;1. UML类图&lt;/h1&gt;&lt;p&gt;面向对象设计主要就是使用UML的类图，类图用于描述系统中所包含的类以及它们之间的相互关系，帮助人</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2023/10/27/Git/"/>
    <id>http://example.com/2023/10/27/Git/</id>
    <published>2023-10-27T10:46:57.000Z</published>
    <updated>2023-10-28T01:30:56.601Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="1-1-Git-简易指南"><a href="#1-1-Git-简易指南" class="headerlink" title="1.1 Git 简易指南"></a>1.1 Git 简易指南</h1><p><img src="/img/git1.png"></p><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行 <code>git init</code> 以创建新的 git 仓库。</p><blockquote><p>下面每一步中，你都可以通过 <code>git status</code> 来查看你的git仓库状态。</p></blockquote><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由 Git 维护的三棵「树」组成。<br>第一个是你的 <code>工作目录</code>，它持有实际文件；<br>第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；<br>最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p><blockquote><p>事实上，第三个阶段是 commit history 的图。HEAD 一般是指向最新一次 commit 的引用。现在暂时不必究其细节。</p></blockquote><h2 id="添加与提交"><a href="#添加与提交" class="headerlink" title="添加与提交"></a>添加与提交</h2><p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt; filename &gt;</span><br><span class="line">git add *</span><br></pre></td></tr></table></figure><p>这是 Git 基本工作流程的第一步。使用如下命令以实际提交改动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;代码提交信息&quot;</span><br></pre></td></tr></table></figure><p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p><blockquote><p>在开发时，良好的习惯是根据工作进度及时 commit，并务必注意附上有意义的 commit message。创建完项目目录后，第一次提交的 commit message 一般为「Initial commit」。</p></blockquote><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>可以把 master 换成你想要推送的任何分支。</p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p><blockquote><p>这里 origin 是 &lt;server&gt; 的别名，取什么名字都可以，也可以在 push 时将 &lt;jserver&gt; 替换为 origin。但为了以后 push 方便，我们第一次一般都会先 remote add。<br>如果你还没有 Git 仓库，可以在 Github 等代码托管平台上创建一个空（不要自动生成 README.md）的仓库，然后将代码 push 到远端仓库。</p></blockquote><hr><h1 id="1-2-创建代码仓库"><a href="#1-2-创建代码仓库" class="headerlink" title="1.2 创建代码仓库"></a>1.2 创建代码仓库</h1><p>这一章简要地带你了解一些最重要的 Git 命令。在这节中，介绍开始一个新的版本控制项目需要的所有工具，后面的包含了每天都会用到的Git操作。</p><p>在这节之后，你应该能够创建一个新的 Git 仓库，缓存你的项目以免丢失，以及查看你项目的历史。</p><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p><code>git init</code> 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。大多数Git命令在未初始化的仓库中都是无法使用的，所以这就是你运行新项目的第一个命令了。</p><p>运行 <code>git init</code> 命令会在你项目的根目录下创建一个新的 <code>.git</code> 目录，其中包含了你项目必需的所有元数据。除了 <code>.git</code> 目录之外，已经存在的项目不会被改变（就像 SVN 一样，Git 不强制每个子目录中都有一个 <code>.git</code> 目录）。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>将当前的目录转换成一个 Git 仓库。它在当前的目录下增加了一个 <code>.git</code> 目录，于是就可以开始记录项目版本了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init &lt;directory&gt;</span><br></pre></td></tr></table></figure><p>在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 <code>directory</code>，只包含 <code>.git</code> 子目录的空目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare &lt;directory&gt;</span><br></pre></td></tr></table></figure><p>初始化一个裸的 Git 仓库，但是忽略工作目录。共享的仓库应该总是用 <code>--bare</code> 标记创建（见下面的讨论）。一般来说，用 <code>—bare</code> 标记初始化的仓库以 <code>.git</code> 结尾。比如，一个叫<code>my-project</code>的仓库，它的空版本应该保存在 <code>my-project.git</code> 目录下。</p><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>和 SVN 相比，<code>git init</code> 命令是一个创建新的版本控制项目非常简单的途径。Git 不需要你创建仓库，导入文件，检查正在修改的拷贝。你只需要 <code>cd</code> 到你的项目目录下，运行 <code>git init</code>，你就有了一个功能强大的 Git 仓库。</p><p>但是，对大多数项目来说，<code>git init</code> 只需要在创建中央仓库时执行一次——开发者通常不会使用 <code>git init</code> 来创建他们的本地仓库。他们往往使用 <code>git clone</code> 来将已存在的仓库拷贝到他们的机器中去。</p><h4 id="裸仓库"><a href="#裸仓库" class="headerlink" title="裸仓库"></a>裸仓库</h4><p><code>-—bare</code> 标记创建了一个没有工作目录的仓库，这样我们在仓库中更改文件并且提交了。中央仓库应该总是创建成裸仓库，因为向非裸仓库推送分支有可能会覆盖已有的代码变动。将<code>-—bare</code>看成是用来将仓库标记为储存设施，而不是一个开发环境。也就是说，对于所有的 Git 工作流，中央仓库是裸仓库，开发者的本地仓库是非裸仓库。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>因为 <code>git clone</code> 创建项目的本地拷贝更为方便，<code>git init</code> 最常见的使用情景就是用于创建中央仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;user&gt;@&lt;host&gt;</span><br><span class="line"></span><br><span class="line">cd path/above/repo</span><br><span class="line"></span><br><span class="line">git init --bare my-project.git</span><br></pre></td></tr></table></figure><p>首先，你用SSH连入存放中央仓库的服务器。然后，来到任何你想存放项目的地方，最后，使用 <code>-—bare</code> 标记来创建一个中央存储仓库。开发者会将 <code>my-project.git</code> 克隆到本地的开发环境中。</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p><code>git clone</code> 命令拷贝整个 Git 仓库。这个命令就像 <code>svn checkout</code> 一样，除了「工作副本」是一个完备的Git仓库——它包含自己的历史，管理自己的文件，以及环境和原仓库完全隔离。</p><p>为了方便起见，<code>clone</code> 自动创建了一个名为 <code>origin</code> 的远程连接，指向原有仓库。这让和中央仓库之间的交互更加简单。</p><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repo&gt;</span><br></pre></td></tr></table></figure><p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器。原仓库可以在本地文件系统中，或是通过 HTTP 或 SSH 连接的远程机器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure><p>将位于 <code>&lt;repo&gt;</code> 的仓库克隆到本地机器上的 <code>&lt;directory&gt;</code> 目录。</p><h3 id="讨论-1"><a href="#讨论-1" class="headerlink" title="讨论"></a>讨论</h3><p>如果项目在远程仓库已经设置完毕，<code>git clone</code> 是用户获取开发副本最常见的方式。和  <code>git init</code>相似，<code>clone</code> 通常也是一次性的操作——只要开发者获得了一份工作副本，所有版本控制操作和协作管理都是在本地仓库中完成的。</p><h4 id="仓库间协作"><a href="#仓库间协作" class="headerlink" title="仓库间协作"></a>仓库间协作</h4><p>这一点很重要，你要理解 Git 中「工作副本」的概念和 SVN 仓库 check out 下来的「工作副本」是很不一样的。和 SVN 不同的是，Git 不会区分工作副本和中央仓库——它们都是功能完备的 Git 仓库。</p><p>这就使得 Git 的协作和 SVN 截然不同。SVN 依赖于中央仓库和工作副本之间的关系，而 Git 协作模型是基于仓库和仓库之间的交互的。相对于 SVN 的提交流程，你可以在 Git 仓库之间 <code>push</code> 或 <code>pull</code> 提交。</p><p>当然，你也完全可以给予某个特定的仓库一些特殊的含义。比如，指定某个 Git 仓库为中央仓库，你就可以用 Git 进行中央化的工作流。重点是，这是通过约定实现的，而不是写死在版本控制系统本身。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>下面这个例子演示用 SSH 用户名 john 连接到 example.com，获取远程服务器上中央仓库的本地副本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://john@example.com/path/to/my-project.git</span><br><span class="line"></span><br><span class="line">cd my-project</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始工作</span></span><br></pre></td></tr></table></figure><p>第一行命令在本地机器的 <code>my-project</code> 目录下初始化了一个新的 Git 仓库，并且导入了中央仓库中的文件。接下来，你 <code>cd</code> 到项目目录，开始编辑文件、缓存提交、和其它仓库交互。同时注意 <code>.git</code> 拓展名克隆时会被去除。它表明了本地副本的非裸状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config</span><br></pre></td></tr></table></figure><p><code>git config</code> 命令允许你在命令行中配置你的 Git 安装（或是一个独立仓库）。这个命令定义了所有配置，从用户信息到仓库行为等等。一些常见的配置命令如下所列。</p><h3 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &lt;name&gt;</span><br></pre></td></tr></table></figure><p>定义当前仓库所有提交使用的作者姓名。通常来说，你希望使用 <code>--global</code> 标记设置当前用户的配置项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &lt;name&gt;</span><br></pre></td></tr></table></figure><p>定义当前用户所有提交使用的作者姓名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &lt;email&gt;</span><br></pre></td></tr></table></figure><p>定义当前用户所有提交使用的作者邮箱。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.&lt;alias-name&gt; &lt;git-command&gt;</span><br></pre></td></tr></table></figure><p>为Git命令创建一个快捷方式（别名）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system core.editor &lt;editor&gt;</span><br></pre></td></tr></table></figure><p>定义当前机器所有用户使用命令时用到的文本编辑器，如 <code>git commit</code>。<code>&lt;editor&gt;</code> 参数用编辑器的启动命令（如 vi）替代。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --edit</span><br></pre></td></tr></table></figure><p>用文本编辑器打开全局配置文件，手动编辑。</p><h3 id="讨论-2"><a href="#讨论-2" class="headerlink" title="讨论"></a>讨论</h3><p>所有配置项都储存在纯文本文件中，所以 <code>git config</code> 命令其实只是一个提供便捷的命令行接口。通常，你只需要在新机器上配置一次 Git 安装，以及，你通常会想要使用 <code>--global</code> 标记。</p><p>Git 将配置项保存在三个单独的文件中，允许你分别对单个仓库、用户和整个系统设置。</p><ul><li><p><repo>&#x2F;.git&#x2F;config – 特定仓库的设置。</p></li><li><p>~&#x2F;.gitconfig – 特定用户的设置。这也是 <code>--global</code> 标记的设置项存放的位置。</p></li><li><p>$(prefix)&#x2F;etc&#x2F;gitconfig – 系统层面的设置。</p></li></ul><p>当这些文件中的配置项冲突时，本地仓库设置覆盖用户设置，用户设置覆盖系统设置。如果你打开期中一份文件，你会看到下面这些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line"></span><br><span class="line">name = John Smith</span><br><span class="line"></span><br><span class="line">email = john@example.com</span><br><span class="line"></span><br><span class="line">[alias]</span><br><span class="line"></span><br><span class="line">st = status</span><br><span class="line"></span><br><span class="line">co = checkout</span><br><span class="line"></span><br><span class="line">br = branch</span><br><span class="line"></span><br><span class="line">up = rebase</span><br><span class="line"></span><br><span class="line">ci = commit</span><br><span class="line"></span><br><span class="line">[core]</span><br><span class="line"></span><br><span class="line">editor = vim</span><br></pre></td></tr></table></figure><p>你可以用 <code>git config</code> 手动编辑这些值。</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p>你在安装 Git 之后想要做的第一件事是告诉它你的名字和邮箱，个性化一些默认设置。一般初始的设置过程看上去是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">告诉Git你是谁</span></span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;John Smith&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email john@example.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择你喜欢的文本编辑器</span></span><br><span class="line"></span><br><span class="line">git config --global core.editor vim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一些快捷方式(别名)</span></span><br><span class="line"></span><br><span class="line">git config --global alias.st status</span><br><span class="line"></span><br><span class="line">git config --global alias.co checkout</span><br><span class="line"></span><br><span class="line">git config --global alias.br branch</span><br><span class="line"></span><br><span class="line">git config --global alias.up rebase</span><br><span class="line"></span><br><span class="line">git config --global alias.ci commit</span><br></pre></td></tr></table></figure><p>它会生成上一节中所说的 <code>~/.gitconfig</code> 文件。</p><hr><h1 id="1-3-保存你的更改"><a href="#1-3-保存你的更改" class="headerlink" title="1.3 保存你的更改"></a>1.3 保存你的更改</h1><p>“保存”这个概念在 Git 等版本控制系统和 Word 等文本编辑应用中不太一样。传统软件里的“保存”在 Git 里被叫做“提交”（commit）。 我们常说的的保存可以理解成在文件系统中覆盖一个已有的文件或者创建一个新的文件。而在 Git 中，提交这个操作作用于若干个文件和目录。</p><p>在 Git 和 SVN 里保存更改也不一样。SVN 提交或检入（check-in）将会推送到远端的中央服务器。也就是说 SVN 的提交需要联网才能完全“保存”项目更改。Git 提交可以在本地完成，然后再使用<code>git push -u origin master</code>命令推送到远端服务器。这两种方法的区别体现了两种架构设计的本质区别。Git 是一个分布式的应用，而 SVN 是一个中心化的应用。分布式应用一般来说更可靠，因为它们不存在中央服务器这样的单点故障。</p><p><code>git add</code>、<code>git status</code>和<code>git commit</code>这三个命令通常一起使用，将 Git 项目当前的状态保存成一份快照。</p><p>Git 还有另一个保存机制：“储藏”（stash）。储藏是一个临时的储存区域，保存还没准备好提交的更改。储藏操作作用于工作目录，三个文件树中的第一棵。它有很多用法，访问 git stash 页面了解更多。</p><p>Git 仓库可以通过设置忽略一些文件或目录。Git 将不会保存这些文件的任何更改。Git 有多种方式管理忽略文件列表。访问 git ignore 页面了解更多 Git 忽略文件设置。</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p><code>git add</code> 命令将工作目录中的变化添加到暂存区。它告诉 Git 你想要在下一次提交时包含这个文件的更新。但是，<code>git add</code> 不会实质上地影响你的仓库——在你运行 <code>git commit</code> 前更改都还没有真正被记录。</p><p>使用这些命令的同时，你还需要 <code>git status</code> 来查看工作目录和暂存区的状态。</p><h3 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure><p>将 <code>&lt;file&gt;</code> 中的更改加入下次提交的缓存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;directory&gt;</span><br></pre></td></tr></table></figure><p>将 <code>&lt;directory&gt;</code> 下的更改加入下次提交的缓存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -i</span><br></pre></td></tr></table></figure><p>开始交互式的缓存，你可以选择文件的一部分加入到下次提交缓存。它会向你展示一堆更改，等待你输入一个命令。<code>y</code> 将这块更改加入缓存，<code>n</code> 忽略这块更改，<code>s</code> 将它分割成更小的块，<code>e</code> 手动编辑这块更改，以及 <code>q</code> 退出。</p><h3 id="讨论-3"><a href="#讨论-3" class="headerlink" title="讨论"></a>讨论</h3><p><code>git add</code> 和 <code>git commit</code> 这两个命令组成了最基本的 Git 工作流。每一个 Git 用户都需要理解这两个命令，不管他们团队的协作模型是如何的。我有一千种方式可以将项目版本记录在仓库的历史中。</p><p>在一个只有编辑、缓存、提交这样基本流程的项目上开发。首先，你要在工作目录中编辑你的文件。当你准备备份项目的当前状态时，你通过 <code>git add</code> 来缓存更改。当你对缓存的快照满意之后，你通过 <code>git commit</code> 将它提交到你的项目历史中去。</p><p><code>git add</code> 命令不能和 <code>svn add</code> 混在一起理解，后者将文件添加到仓库中。而 <code>git add</code> 发生于更抽象的 <em>更改</em> 层面。也就是说，<code>git add</code> 在每次你修改一个文件时都需要被调用，而 <code>svn add</code> 只需要每个文件调用一次。这听上去很多余，但这样的工作流使得一个项目更容易组织。</p><h4 id="缓存区"><a href="#缓存区" class="headerlink" title="缓存区"></a>缓存区</h4><p>缓存区是 Git 更为独特的地方之一，如果你是从 SVN（甚至是 Mercurial）迁移而来，那你可得花点时间理解了。你可以简单地把它想成是工作目录和项目历史之间的缓冲区。</p><p>缓存允许你在实际提交到项目历史之前，将相关的更改组合成一份高度专注的快照，而不是将你上次提交以后产生的所有更改一并提交。也就是说你可以更改各种不相关的文件，然后回过去将它们按逻辑切分，将相关的更改添加到缓存，一份一份提交。在任何修改控制系统中，很重要的一点是提交必须是原子性的，以便于追踪 bug，并用最小的代价回滚更改。</p><h3 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h3><p>当你开始新项目的时候，<code>git add</code> 和 <code>svn import</code> 类似。为了创建当前目录的初始提交，使用下面两个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>当你项目设置好之后，新的文件可以通过路径传递给 <code>git add</code> 来添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add hello.py</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>上面的命令同样可以用于记录已有文件的更改。重复一次，Git 不会区分缓存的更改来自新文件，还是仓库中已有的文件。</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p><code>git commit</code>命令将缓存的快照提交到项目历史。提交的快照可以认为是项目安全的版本，Git 永远不会改变它们，除非你这么要求。和 <code>git add</code> 一样，这是最重要的 Git 命令之一。</p><p>尽管和它和 <code>svn commit</code> 名字一样，但实际上它们毫无关联。快照被提交到本地仓库，不会和其他 Git 仓库有任何交互。</p><h3 id="用法-4"><a href="#用法-4" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p>提交已经缓存的快照。它会运行文本编辑器，等待你输入提交信息。当你输入信息之后，保存文件，关闭编辑器，创建实际的提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;&lt;message&gt;&quot;</span><br></pre></td></tr></table></figure><p>提交已经缓存的快照。但将 <code>&lt;message&gt;</code> 作为提交信息，而不是运行文本编辑器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure><p>提交一份包含工作目录所有更改的快照。它只包含跟踪过的文件的更改（那些之前已经通过 <code>git add</code> 添加过的文件）。</p><h3 id="讨论-4"><a href="#讨论-4" class="headerlink" title="讨论"></a>讨论</h3><p>快照总是提交到 <em>本地</em> 仓库。这一点和 SVN 截然不同，后者的工作拷贝提交到中央仓库。而 Git 不会强制你和中央仓库进行交互，直到你准备好了。就像缓存区是工作目录和项目历史之间的缓冲地带，每个开发者的本地仓库是他们贡献的代码和中央仓库之间的缓冲地带。</p><p>这一点改变了 Git 用户基本的开发模型。Git 开发者可以在本地仓库中积累一些提交，而不是一发生更改就直接提交到中央仓库。这对于 SVN 风格的协作有着诸多优点：更容易将功能切分成原子性的提交，让相关的提交组合在一起，发布到中央仓库之前整理好本地的历史。开发者得以在一个隔离的环境中工作，直到他们方便的时候再整合代码。</p><h4 id="记录快照，而不是记录差异"><a href="#记录快照，而不是记录差异" class="headerlink" title="记录快照，而不是记录差异"></a>记录快照，而不是记录差异</h4><p>SVN 和 Git 除了使用上存在巨大差异，它们底层的实现同样遵循截然不同的设计哲学。SVN 追踪文件的 <em>变化</em> ，而 Git 的版本控制模型基于 <em>快照</em> 。比如说，一个 SVN 提交由仓库中原文件相比的差异（diff）组成。而 Git 在每次提交中记录文件的 <em>完整内容</em> 。</p><p>这让很多 Git 操作比 SVN 来的快得多，因为文件的某个版本不需要通过版本间的差异组装得到——每个文件完整的修改能立刻从 Git 的内部数据库中得到。</p><p>Git 的快照模型对它版本控制模型的方方面面都有着深远的影响，从分支到合并工具，再到协作工作流，以至于影响了所有特性。</p><h3 id="栗子-2"><a href="#栗子-2" class="headerlink" title="栗子"></a>栗子</h3><p>下面这个栗子假设你编辑了 <code>hello.py</code> 文件的一些内容，并且准备好将它提交到项目历史。首先，你需要用 <code>git add</code> 缓存文件，然后提交缓存的快照。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add hello.py</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>它会打开一个文件编辑器（可以通过 <code>git config</code> 设置) 询问提交信息，同时列出将被提交的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with <span class="string">&#x27;#&#x27;</span> will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Changes to be committed:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#modified: hello.py</span></span></span><br></pre></td></tr></table></figure><p>Git 对提交信息没有特定的格式限制，但约定俗成的格式是：在第一行用 50 个以内的字符总结这个提交，留一空行，然后详细阐述具体的更改。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Change the message displayed by hello.py</span><br><span class="line"></span><br><span class="line">- Update the sayHello() function to output the user&#x27;s name</span><br><span class="line">- Change the sayGoodbye() function to a friendlier message</span><br></pre></td></tr></table></figure><p>注意，很多开发者倾向于在提交信息中使用一般现在时态。这样看起来更像是对仓库进行的操作，让很多改写历史的操作更加符合直觉。</p><hr><h1 id="1-4-检查仓库状态"><a href="#1-4-检查仓库状态" class="headerlink" title="1.4 检查仓库状态"></a>1.4 检查仓库状态</h1><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p><code>git status</code> 命令显示工作目录和缓存区的状态。你可以看到哪些更改被缓存了，哪些还没有，以及哪些还未被 Git 追踪。status 的输出 <em>不会</em> 告诉你任何已提交到项目历史的信息。如果你想看的话，应该使用 <code>git log</code> 命令。</p><h3 id="用法-5"><a href="#用法-5" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>列出已缓存、未缓存、未追踪的文件。</p><h3 id="讨论-5"><a href="#讨论-5" class="headerlink" title="讨论"></a>讨论</h3><p><code>git status</code> 是一个相对简单的命令。 它告诉你 <code>git add</code> 和 <code>git commit</code> 的进展。status 信息还包括了添加缓存和移除缓存的相关指令。样例输出显示了三类主要的 <code>git status</code> 输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Changes to be committed:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#modified: hello.py</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Changes not staged for commit:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#modified: main.py</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Untracked files:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#hello.pyc</span></span></span><br></pre></td></tr></table></figure><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>未追踪的文件通常有两类。它们要么是项目新增但还未提交的文件，要么是像 <code>.pyc</code>、<code>.obj</code>、<code>.exe</code> 等编译后的二进制文件。显然前者应该出现在 <code>git status</code> 的输出中，而后者会让我们困惑究竟发生了什么。</p><p>因此，Git 允许你完全忽略这些文件，只需要将路径放在一个特定的 <code>.gitignore</code> 文件中。所有想要忽略的文件应该分别写在单独一行，<code>*</code> 字符用作通配符。比如，将下面这行加入项目根目录的<code>.gitignore</code>文件可以避免编译后的Python模块出现在<code>git status</code>中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.pyc</span><br></pre></td></tr></table></figure><h3 id="栗子-3"><a href="#栗子-3" class="headerlink" title="栗子"></a>栗子</h3><p>在提交更改前检查仓库状态是一个良好的实践，这样你就不会不小心提交什么奇怪的东西。这个例子显示了缓存和提交快照前后的仓库状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Edit hello.py</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello.py is listed under <span class="string">&quot;Changes not staged for commit&quot;</span></span></span><br><span class="line">git add hello.py</span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello.py is listed under <span class="string">&quot;Changes to be committed&quot;</span></span></span><br><span class="line">git commit</span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nothing to commit (working directory clean)</span></span><br></pre></td></tr></table></figure><p>第一个 status 的输出显示文件还未缓存。<code>git add</code> 操作会影响第二个 <code>git status</code>，最后的 status 输出告诉你已经没有可以提交的东西了——工作目录和最近的提交一致。一些 Git 命令（比如 <code>git merge</code>）需要工作目录整洁，以免意外覆盖更改。</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p><code>git log</code> 命令显示已提交的快照。你可以列出项目历史，筛选，以及搜索特定更改。<code>git status</code> 允许你查看工作目录和缓存区，而 <code>git log</code> 只作用于提交的项目历史。</p><p>log 输出可以有很多种自定义的方式，从简单地筛选提交，到用完全自定义的格式显示。其中一些最常用的 <code>git log</code> 配置如下所示。</p><h3 id="用法-6"><a href="#用法-6" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>使用默认格式显示完整地项目历史。如果输出超过一屏，你可以用 <code>空格键</code> 来滚动，按 <code>q</code> 退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -n &lt;limit&gt;</span><br></pre></td></tr></table></figure><p>用 <code>&lt;limit&gt;</code> 限制提交的数量。比如 <code>git log -n 3</code> 只会显示 3 个提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure><p>将每个提交压缩到一行。当你需要查看项目历史的上层情况时这会很有用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --stat</span><br></pre></td></tr></table></figure><p>除了 <code>git log</code> 信息之外，包含哪些文件被更改了，以及每个文件相对的增删行数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p</span><br></pre></td></tr></table></figure><p>显示代表每个提交的一堆信息。显示每个提交全部的差异（diff），这也是项目历史中最详细的视图。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;&lt;pattern&gt;&quot;</span><br></pre></td></tr></table></figure><p>搜索特定作者的提交。<code>&lt;pattern&gt;</code> 可以是字符串或正则表达式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --grep=&quot;&lt;pattern&gt;&quot;</span><br></pre></td></tr></table></figure><p>搜索提交信息匹配特定 <code>&lt;pattern&gt;</code> 的提交。<code>&lt;pattern&gt;</code> 可以是字符串或正则表达式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log &lt;since&gt;..&lt;until&gt;</span><br></pre></td></tr></table></figure><p>只显示发生在 <code>&lt;since&gt;</code> 和 <code>&lt;until&gt;</code> 之间的提交。两个参数可以是提交 ID、分支名、<code>HEAD</code> 或是任何一种引用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log &lt;file&gt;</span><br></pre></td></tr></table></figure><p>只显示包含特定文件的提交。查找特定文件的历史这样做会很方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --decorate --oneline</span><br></pre></td></tr></table></figure><p>还有一些有用的选项。<code>--graph</code> 标记会绘制一幅字符组成的图形，左边是提交，右边是提交信息。<code>--decorate</code> 标记会加上提交所在的分支名称和标签。<code>--oneline</code> 标记将提交信息显示在同一行，一目了然。</p><h3 id="讨论-6"><a href="#讨论-6" class="headerlink" title="讨论"></a>讨论</h3><p><code>git log</code> 命令是 Git 查看项目历史的基本工具。当你要寻找项目特定的一个版本或者弄明白合并功能分支时引入了哪些变化，你就会用到这个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commit 3157ee3718e180a9476bf2e5cab8e3f1e78a73b7</span><br><span class="line">Author: John Smith</span><br></pre></td></tr></table></figure><p>大多数时候都很简单直接。但是，第一行需要解释下。<code>commit</code> 后面 40 个字的字符串是提交内容的 SHA-1 校验总和（checksum）。它有两个作用。一是保证提交的正确性——如果它被损坏了，提交会生成一个不同的校验总和。第二，它是提交唯一的标识 ID。</p><p>这个 ID 可以用于 <code>git log</code> 这样的命令中来引用具体的提交。比如，<code>git log 3157e..5ab91</code> 会显示所有ID在 <code>3157e</code> 和 <code>5ab91</code> 之间的提交。除了校验总和之外，分支名、HEAD 关键字也是常用的引用提交的方法。<code>HEAD</code> 总是指向当前的提交，无论是分支还是特定提交也好。</p><p><del>字符用于表示提交的父节点的相对引用。比如，&#96;3157e</del>1<code>指向</code>3157e<code> 前一个提交,</code>HEAD~3&#96; 是当前提交的回溯3个节点的提交。</p><p>所有这些标识方法的背后都是为了让你对特定提交进行操作。<code>git log</code> 命令一般是这些交互的起点，因为它让你找到你想要的提交。</p><h3 id="栗子-4"><a href="#栗子-4" class="headerlink" title="栗子"></a>栗子</h3><p><em>用法</em> 一节提供了 <code>git log</code> 很多的栗子，但请记住，你可以将很多选项用在同一个命令中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;John Smith&quot; -p hello.py</span><br></pre></td></tr></table></figure><p>这个命令会显示 <code>John Smith</code> 作者对 <code>hello.py</code> 文件所做的所有更改的差异比较（diff）。</p><p>..句法是比较分支很有用的工具。下面的栗子显示了在 <code>some-feature</code> 分支而不在 <code>master</code> 分支的所有提交的概览。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline master..some-feature</span><br></pre></td></tr></table></figure><hr><h1 id="1-5-检出之前的提交"><a href="#1-5-检出之前的提交" class="headerlink" title="1.5 检出之前的提交"></a>1.5 检出之前的提交</h1><h2 id="检出之前的提交"><a href="#检出之前的提交" class="headerlink" title="检出之前的提交"></a>检出之前的提交</h2><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p><code>git checkout</code> 这个命令有三个不同的作用：检出文件、检出提交和检出分支。在这一章中，我们只关心前两种用法。</p><p>检出提交会使工作目录和这个提交完全匹配。你可以用它来查看项目之前的状态，而不改变当前的状态。检出文件使你能够查看某个特定文件的旧版本，而工作目录中剩下的文件不变。</p><h3 id="用法-7"><a href="#用法-7" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>回到 master 分支。分支会在下一节中讲到，而现在，你只需要将它视为回到项目「当前」状态的一种方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;commit&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure><p>查看文件之前的版本。它将工作目录中的 <code>&lt;file&gt;</code> 文件变成 <code>&lt;commit&gt;</code> 中那个文件的拷贝，并将它加入缓存区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;commit&gt;</span><br></pre></td></tr></table></figure><p>更新工作目录中的所有文件，使得和某个特定提交中的文件一致。你可以将提交的哈希字串，或是标签作为 <code>&lt;commit&gt;</code> 参数。这会使你处在分离 HEAD 的状态。</p><h3 id="讨论-7"><a href="#讨论-7" class="headerlink" title="讨论"></a>讨论</h3><p>版本控制系统背后的思想就是「安全」地储存项目的拷贝，这样你永远不用担心什么时候不可复原地破坏了你的代码库。当你建立了项目历史之后，<code>git checkout</code> 是一种便捷的方式，来将保存的快照「加载」到你的开发机器上去。</p><p>检出之前的提交是一个只读操作。在查看旧版本的时候绝不会损坏你的仓库。你项目「当前」的状态在<code>master</code> 上不会变化。在开发的正常阶段，<code>HEAD</code> 一般指向 master 或是其他的本地分支，但当你检出之前提交的时候，<code>HEAD</code> 就不再指向一个分支了——它直接指向一个提交。这被称为「分离 <code>HEAD</code>」状态</p><p>在另一方面，检出旧文件不影响你仓库的当前状态。你可以在新的快照中像其他文件一样重新提交旧版本。所以，在效果上，<code>git checkout</code> 的这个用法可以用来将单个文件回滚到旧版本 。</p><h3 id="栗子-5"><a href="#栗子-5" class="headerlink" title="栗子"></a>栗子</h3><h4 id="查看之前的版本"><a href="#查看之前的版本" class="headerlink" title="查看之前的版本"></a>查看之前的版本</h4><p>这个栗子假定你开始了一个疯狂的实验，但你不确定你是否想要保留它。为了帮助你决定，你想看一看你开始实验之前的项目状态。首先，你需要找到你想要看的那个版本的 ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure><p>假设你的项目历史看上去和下面一样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b7119f2 继续做些丧心病狂的事</span><br><span class="line">872fa7e 做些丧心病狂的事</span><br><span class="line">a1e8fb5 对 hello.py 做了一些修改</span><br><span class="line">435b61d 创建 hello.py</span><br><span class="line">9773e52 初始导入</span><br></pre></td></tr></table></figure><p>你可以这样使用 <code>git checkout</code> 来查看「对 hello.py 做了一些修改」这个提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout a1e8fb5</span><br></pre></td></tr></table></figure><p>这让你的工作目录和 <code>a1e8fb5</code> 提交所处的状态完全一致。你可以查看文件，编译项目，运行测试，甚至编辑文件而不需要考虑是否会影响项目的当前状态。你所做的一切 <em>都不会</em> 被保存到仓库中。为了继续开发，你需要回到你项目的「当前」状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>这里假定了你默认在 master 分支上开发，我们会在以后的分支模型中详细讨论。</p><p>一旦你回到 master 分支之后，你可以使用 <code>git revert</code> 或 <code>git reset</code> 来回滚任何不想要的更改。</p><h4 id="检出文件"><a href="#检出文件" class="headerlink" title="检出文件"></a>检出文件</h4><p>如果你只对某个文件感兴趣，你也可以用 <code>git checkout</code> 来获取它的一个旧版本。比如说，如果你只想从之前的提交中查看 <code>hello.py</code> 文件，你可以使用下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout a1e8fb5 hello.py</span><br></pre></td></tr></table></figure><p>记住，和检出提交不同，这里 <em>确实</em> 会影响你项目的当前状态。旧的文件版本会显示为「需要提交的更改」，允许你回滚到文件之前的版本。如果你不想保留旧的版本，你可以用下面的命令检出到最近的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD hello.py</span><br></pre></td></tr></table></figure><hr><h1 id="1-6-回滚错误的修改"><a href="#1-6-回滚错误的修改" class="headerlink" title="1.6 回滚错误的修改"></a>1.6 回滚错误的修改</h1><h2 id="回滚错误的修改"><a href="#回滚错误的修改" class="headerlink" title="回滚错误的修改"></a>回滚错误的修改</h2><p>这章教程提供了和项目旧版本打交道所需要的所有技巧。首先，你会知道如何浏览旧的提交，然后了解回滚项目历史中的公有提交和回滚本地机器上的私有更改之间的区别。</p><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p><code>git revert</code> 命令用来撤销一个已经提交的快照。但是，它是通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 <em>新</em> 提交，而不是从项目历史中移除这个提交。这避免了Git丢失项目历史，这一点对于你的版本历史和协作的可靠性来说是很重要的。</p><h3 id="用法-8"><a href="#用法-8" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure><p>生成一个撤消了 <code>&lt;commit&gt;</code> 引入的修改的新提交，然后应用到当前分支。</p><h3 id="讨论-8"><a href="#讨论-8" class="headerlink" title="讨论"></a>讨论</h3><p>撤销（revert）应该用在你想要在项目历史中移除一整个提交的时候。比如说，你在追踪一个 bug，然后你发现它是由一个提交造成的，这时候撤销就很有用。与其说自己去修复它，然后提交一个新的快照，不如用 <code>git revert</code>，它帮你做了所有的事情。</p><h4 id="撤销（revert）和重设（reset）对比"><a href="#撤销（revert）和重设（reset）对比" class="headerlink" title="撤销（revert）和重设（reset）对比"></a>撤销（revert）和重设（reset）对比</h4><p>理解这一点很重要。<code>git revert</code> 回滚了「单独一个提交」，它没有移除后面的提交，然后回到项目之前的状态。在 Git 中，后者实际上被称为 <code>reset</code>，而不是 <code>revert</code>。</p><p>撤销和重设相比有两个重要的优点。首先，它不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。至于为什么改变共享的历史是危险的，请参阅 <code>git reset</code> 一节。</p><p>其次，<code>git revert</code> 可以针对历史中任何一个提交，而 <code>git reset</code> 只能从当前提交向前回溯。比如，你想用 <code>git reset</code> 重设一个旧的提交，你不得不移除那个提交后的所有提交，再移除那个提交，然后重新提交后面的所有提交。不用说，这并不是一个优雅的回滚方案。</p><h3 id="栗子-6"><a href="#栗子-6" class="headerlink" title="栗子"></a>栗子</h3><p>下面的这个栗子是 <code>git revert</code> 一个简单的演示。它提交了一个快照，然后立即撤销这个操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑一些跟踪的文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交一份快照</span></span><br><span class="line">git commit -m &quot;Make some changes that will be undone&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销刚刚的提交</span></span><br><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure><p>注意第四个提交在撤销后依然在项目历史中。<code>git revert</code> 在后面增加了一个提交来撤销修改，而不是删除它。 因此，第三和第五个提交表示同样的代码，而第四个提交依然在历史中，以备以后我们想要回到这个提交。</p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>如果说 <code>git revert</code> 是一个撤销更改安全的方式，你可以将 <code>git reset</code> 看做一个 <em>危险</em> 的方式。当你用 <code>git reset</code> 来重设更改时(提交不再被任何引用或引用日志所引用)，我们无法获得原来的样子——这个撤销是永远的。使用这个工具的时候务必要小心，因为这是少数几个可能会造成工作丢失的命令之一。</p><p>和 <code>git checkout</code> 一样，<code>git reset</code> 有很多种用法。它可以被用来移除提交快照，尽管它通常被用来撤销缓存区和工作目录的修改。不管是哪种情况，它应该只被用于 <em>本地</em> 修改——你永远不应该重设和其他开发者共享的快照。</p><h3 id="用法-9"><a href="#用法-9" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure><p>从缓存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure><p>重设缓冲区，匹配最近的一次提交，但工作目录不变。它会取消 <em>所有</em> 文件的缓存，而不会覆盖任何修改，给你了一个重设缓存快照的机会。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure><p>重设缓冲区和工作目录，匹配最近的一次提交。除了取消缓存之外，<code>--hard</code> 标记告诉 Git 还要重写所有工作目录中的更改。换句话说：它清除了所有未提交的更改，所以在使用前确定你想扔掉你所有本地的开发。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure><p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区重设到这个提交，但不改变工作目录。所有 <code>&lt;commit&gt;</code> 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure><p>将当前分支的末端移到 <code>&lt;commit&gt;</code>，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 <code>&lt;commit&gt;</code> 之后的所有提交。</p><h3 id="讨论-9"><a href="#讨论-9" class="headerlink" title="讨论"></a>讨论</h3><p>上面所有的调用都是用来移除仓库中的修改。没有 <code>--hard</code> 标记时 <code>git reset</code> 通过取消缓存或取消一系列的提交，然后重新构建提交来清理仓库。而加上 <code>--hard</code> 标记对于作了大死之后想要重头再来尤其方便。</p><p>撤销(revert)被设计为撤销 <em>公开</em> 的提交的安全方式，<code>git reset</code>被设计为重设 <em>本地</em> 更改。因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。</p><h4 id="不要重设公共历史"><a href="#不要重设公共历史" class="headerlink" title="不要重设公共历史"></a>不要重设公共历史</h4><p>当有 <code>&lt;commit&gt;</code> 之后的提交被推送到公共仓库后，你绝不应该使用 <code>git reset</code>。发布一个提交之后，你必须假设其他开发者会依赖于它。</p><p>移除一个其他团队成员在上面继续开发的提交在协作时会引发严重的问题。当他们试着和你的仓库同步时，他们会发现项目历史的一部分突然消失了。下面的序列展示了如果你尝试重设公共提交时会发生什么。<code>origin/master</code> 是你本地 <code>master</code> 分支对应的中央仓库中的分支。</p><p>一旦你在重设之后又增加了新的提交，Git 会认为你的本地历史已经和 <code>origin/master</code> 分叉了，同步你的仓库时的合并提交（merge commit）会使你的同事困惑。</p><p>重点是，确保你只对本地的修改使用 <code>git reset</code>，而不是公共更改。如果你需要修复一个公共提交，<code>git revert</code> 命令正是被设计来做这个的。</p><h3 id="栗子-7"><a href="#栗子-7" class="headerlink" title="栗子"></a>栗子</h3><h4 id="取消文件缓存"><a href="#取消文件缓存" class="headerlink" title="取消文件缓存"></a>取消文件缓存</h4><p><code>git reset</code> 命令在准备缓存快照时经常被用到。下面的例子假设你有两个文件，<code>hello.py</code> 和 <code>main.py</code>它们已经被加入了仓库中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑了hello.py和main.py</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存了目录下所有文件</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意识到hello.py和main.py中的修改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应该在不同的快照中提交</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消main.py缓存</span></span><br><span class="line">git reset main.py</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只提交hello.py</span></span><br><span class="line">git commit -m &quot;Make some changes to hello.py&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在另一份快照中提交main.py</span></span><br><span class="line">git add main.py</span><br><span class="line">git commit -m &quot;Edit main.py&quot;</span><br></pre></td></tr></table></figure><p>如你所见，<code>git reset</code> 帮助你取消和这次提交无关的修改，让提交能够专注于某一特定的范围。</p><h4 id="移除本地修改"><a href="#移除本地修改" class="headerlink" title="移除本地修改"></a>移除本地修改</h4><p>下面的这个栗子显示了一个更高端的用法。它展示了你作了大死之后应该如何扔掉那几个更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个叫`foo.py`的新文件，增加代码</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交到项目历史</span></span><br><span class="line">git add foo.py</span><br><span class="line">git commit -m &quot;Start developing a crazy feature&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次编辑`foo.py`，修改其他文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交另一份快照</span></span><br><span class="line">git commit -a -m &quot;Continue my crazy feature&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">决定废弃这个功能，并删除相关的更改</span></span><br><span class="line">git reset --hard HEAD~2</span><br></pre></td></tr></table></figure><p><code>git reset HEAD~2</code> 命令将当前分支向前倒退两个提交，相当于在项目历史中移除刚创建的这两个提交。记住，这种重设只能用在 <em>非公开</em> 的提交中。绝不要在将提交推送到共享仓库之后执行上面的操作。</p><h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><p><code>git clean</code> 命令将未跟踪的文件从你的工作目录中移除。它只是提供了一条捷径，因为用 <code>git status</code> 查看哪些文件还未跟踪然后手动移除它们也很方便。和一般的 <code>rm</code> 命令一样，<code>git clean</code> 是无法撤消的，所以在删除未跟踪的文件之前想清楚，你是否真的要这么做。</p><p><code>git clean</code> 命令经常和 <code>git reset --hard</code> 一起使用。记住，reset 只影响被跟踪的文件，所以还需要一个单独的命令来清理未被跟踪的文件。这个两个命令相结合，你就可以将工作目录回到之前特定提交时的状态。</p><h3 id="用法-10"><a href="#用法-10" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -n</span><br></pre></td></tr></table></figure><p>执行一次git clean的『演习』。它会告诉你那些文件在命令执行后会被移除，而不是真的删除它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -f</span><br></pre></td></tr></table></figure><p>移除当前目录下未被跟踪的文件。<code>-f</code>（强制）标记是必需的，除非 <code>clean.requireForce</code> 配置项被设为了 <code>false</code>（默认为 <code>true</code>）。它 <em>不会</em> 删除 <code>.gitignore</code> 中指定的未跟踪的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -f &lt;path&gt;</span><br></pre></td></tr></table></figure><p>移除未跟踪的文件，但限制在某个路径下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -df</span><br></pre></td></tr></table></figure><p>移除未跟踪的文件，以及目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -xf</span><br></pre></td></tr></table></figure><p>移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件。</p><h3 id="讨论-10"><a href="#讨论-10" class="headerlink" title="讨论"></a>讨论</h3><p>如果你在本地仓库中作死之后想要毁尸灭迹，<code>git reset --hard</code> 和 <code>git clean -f</code> 是你最好的选择。运行这两个命令使工作目录和最近的提交相匹配，让你在干净的状态下继续工作。</p><p><code>git clean</code> 命令对于 build 后清理工作目录十分有用。比如，它可以轻易地删除 C 编译器生成的 <code>.o</code> 和 <code>.exe</code> 二进制文件。这通常是打包发布前需要的一步。<code>-x</code> 命令在这种情况下特别方便。</p><p>请牢记，和 <code>git reset</code> 一样， <code>git clean</code> 是仅有的几个可以永久删除提交的命令之一，所以要小心使用。事实上，它太容易丢掉重要的修改了，以至于 Git 厂商 <em>强制</em> 你用 <code>-f</code> 标志来进行最基本的操作。这可以避免你用一个 <code>git clean</code> 就不小心删除了所有东西。</p><h3 id="栗子-8"><a href="#栗子-8" class="headerlink" title="栗子"></a>栗子</h3><p>下面的栗子清除了工作目录中的所有更改，包括新建还没加入缓存的文件。它假设你已经提交了一些快照，准备开始一些新的实验。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑了一些文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增了一些文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">『糟糕』</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将跟踪的文件回滚回去</span></span><br><span class="line">git reset --hard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除未跟踪的文件</span></span><br><span class="line">git clean -df</span><br></pre></td></tr></table></figure><p>在执行了 reset&#x2F;clean 的流程之后，工作目录和缓存区和最近一次提交看上去一模一样，而  <code>git status</code>会认为这是一个干净的工作目录。你可以重新来过了。</p><p>注意，不像 <code>git reset</code> 的第二个栗子，新的文件没有被加入到仓库中。因此，它们不会受到 <code>git reset --hard</code> 的影响，需要 <code>git clean</code> 来删除它们。</p><hr><h1 id="1-7-重写项目历史"><a href="#1-7-重写项目历史" class="headerlink" title="1.7 重写项目历史"></a>1.7 重写项目历史</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Git 的主要职责是保证你不会丢失提交的修改。但是，它同样被设计成让你完全掌控开发工作流。这包括了让你自定义你的项目历史，而这也创造了丢失提交的可能性。Git 提供了可以重写项目历史的命令，但也警告你这些命令可能会让你丢失内容。</p><p>这份教程讨论了重写提交快照的一些常见原因，并告诉你如何避免不好的影响。</p><h2 id="git-commit-–amend"><a href="#git-commit-–amend" class="headerlink" title="git commit –amend"></a>git commit –amend</h2><p><code>git commit --amend</code> 命令是修复最新提交的便捷方式。它允许你将缓存的修改和之前的提交合并到一起，而不是提交一个全新的快照。它还可以用来简单地编辑上一次提交的信息而不改变快照。</p><p>但是，amend 不只是修改了最新的提交——它进行了一次替换。对于 Git 来说，这看上去像一个全新的提交</p><h3 id="用法-11"><a href="#用法-11" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>合并缓存的修改和上一次的提交，用新的快照替换上一个提交。缓存区没有文件时运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。</p><h3 id="讨论-11"><a href="#讨论-11" class="headerlink" title="讨论"></a>讨论</h3><p>仓促的提交在你日常开发过程中时常会发生。很容易就忘记了缓存一个文件或者弄错了提交信息的格式。<code>--amend</code> 标记是修复这些小意外的便捷方式。</p><h4 id="不要修复公共提交"><a href="#不要修复公共提交" class="headerlink" title="不要修复公共提交"></a>不要修复公共提交</h4><p>在<code>git reset</code>这节中，我们说过永远不要重设和其他开发者共享的提交。对于修复也是一样：永远不要修复一个已经推送到公共仓库中的提交。</p><p>修复过的提交事实上是全新的提交，之前的提交会被移除出项目历史。这和重设公共快照的后果是一样的。如果你修复了其他开发者在之后继续开发的一个提交，看上去他们的工作基础从项目历史中消失了一样。对于在这上面的开发者来说这是很困惑的，而且很难恢复。</p><h3 id="栗子-9"><a href="#栗子-9" class="headerlink" title="栗子"></a>栗子</h3><p>下面这个🌰展示了 Git 开发工作流中的一个常见情形。我们编辑了一些希望在同一个快照中提交的文件，但我们忘记添加了其中的一个。修复错误只需要缓存那个文件并且用 <code>--amend</code> 标记提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑 hello.py 和 main.py</span></span><br><span class="line">git add hello.py</span><br><span class="line">git commit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意识到你忘记添加 main.py 的更改</span></span><br><span class="line">git add main.py</span><br><span class="line">git commit --amend --no-edit</span><br></pre></td></tr></table></figure><p>编辑器会弹出上一次提交的信息，加入 <code>--no-edit</code> 标记会修复提交但不修改提交信息。需要的话你可以修改，不然的话就像往常一样保存并关闭文件。完整的提交会替换之前不完整的提交，看上去就像我们在同一个快照中提交了 <code>hello.py</code> 和 <code>main.py</code>。</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>变基（rebase, 事实上这个名字十分诡异, 所以在大多数时候直接用英文术语）是将分支移到一个新的基提交的过程。过程一般如下所示：</p><p>从内容的角度来看，rebase 只不过是将分支从一个提交移到了另一个。但从内部机制来看，Git 是通过在选定的基上创建新提交来完成这件事的——它事实上重写了你的项目历史。理解这一点很重要，尽管分支看上去是一样的，但它包含了全新的提交。</p><h3 id="用法-12"><a href="#用法-12" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;base&gt;</span><br></pre></td></tr></table></figure><p>将当前分支 rebase 到 <code>&lt;base&gt;</code>，这里可以是任何类型的提交引用（ID、分支名、标签，或是 <code>HEAD</code> 的相对引用）。</p><h3 id="讨论-12"><a href="#讨论-12" class="headerlink" title="讨论"></a>讨论</h3><p>rebase 的主要目的是为了保持一个线性的项目历史。比如说，当你在 feature 分支工作时 master 分支取得了一些进展：</p><p>要将你的 feature 分支整合进 <code>master</code> 分支，你有两个选择：直接 merge，或者先 rebase 后 merge。前者会产生一个三路合并（3-way merge）和一个合并提交，而后者产生的是一个快速向前的合并以及完美的线性历史。</p><p>rebase 是将上游更改合并进本地仓库的通常方法。你每次想查看上游进展时，用 <code>git merge</code> 拉取上游更新会导致一个多余的合并提交。在另一方面，rebase 就好像是说「我想将我的更改建立在其他人的进展之上」。</p><h4 id="不要-rebase-公共历史"><a href="#不要-rebase-公共历史" class="headerlink" title="不要 rebase 公共历史"></a>不要 rebase 公共历史</h4><p>和我们讨论过的 <code>git commit --amend</code> 和 <code>git reset</code> 一样，你永远不应该 rebase 那些已经推送到公共仓库的提交。rebase 会用新的提交替换旧的提交，你的项目历史会像突然消失了一样。</p><h3 id="栗子-10"><a href="#栗子-10" class="headerlink" title="栗子"></a>栗子</h3><p>下面这个例子同时使用 git rebase 和 git merge 来保持线性的项目历史。这是一个确认你的合并都是快速向前的方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始新的功能分支</span></span><br><span class="line">git checkout -b new-feature master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git commit -a -m &quot;Start developing a feature&quot;</span><br></pre></td></tr></table></figure><p>在 feature 分支开发了一半的时候，我们意识到项目中有一个安全漏洞:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基于master分支创建一个快速修复分支</span></span><br><span class="line">git checkout -b hotfix master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git commit -a -m &quot;Fix security hole&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并回master</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge hotfix</span><br><span class="line">git branch -d hotfix</span><br></pre></td></tr></table></figure><p>将 hotfix 分支并回之后 master，我们有了一个分叉的项目历史。我们用 rebase 整合 feature 分支以获得线性的历史，而不是使用普通的 git merge。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout new-feature</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure><p>它将 new-feature 分支移到了 master 分支的末端，现在我们可以在 master 上进行标准的快速向前合并了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge new-feature</span><br></pre></td></tr></table></figure><h2 id="git-rebase-i"><a href="#git-rebase-i" class="headerlink" title="git rebase -i"></a>git rebase -i</h2><p>用 <code>-i</code> 标记运行 <code>git rebase</code> 开始交互式 rebase。交互式 rebase 给你在过程中修改单个提交的机会，而不是盲目地将所有提交都移到新的基上。你可以移除、分割提交，更改提交的顺序。它就像是打了鸡血的 <code>git commit --amend</code> 一样。</p><h3 id="用法-13"><a href="#用法-13" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i &lt;base&gt;</span><br></pre></td></tr></table></figure><p>将当前分支 rebase 到 <code>base</code>，但使用可交互的形式。它会打开一个编辑器，你可以为每个将要 rebase 的提交输入命令（见后文）。这些命令决定了每个提交将会怎样被转移到新的基上去。你还可以对这些提交进行排序。</p><h3 id="讨论-13"><a href="#讨论-13" class="headerlink" title="讨论"></a>讨论</h3><p>交互式 rebase 给你了控制项目历史的完全掌控。它给了开发人员很大的自由，因为他们可以提交一个「混乱」的历史而只需专注于写代码，然后回去恢复干净。</p><p>大多数开发者喜欢在并入主代码库之前用交互式 rebase 来完善他们的 feature 分支。他们可以将不重要的提交合在一起，删除不需要的，确保所有东西在提交到「正式」的项目历史前都是整齐的。对其他人来说，这个功能的开发看上去是由一系列精心安排的提交组成的。</p><h3 id="栗子-11"><a href="#栗子-11" class="headerlink" title="栗子"></a>栗子</h3><p>下面这个🌰是 <code>非交互式rebase</code> 一节中🌰的可交互升级版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始新的功能分支</span></span><br><span class="line">git checkout -b new-feature master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git commit -a -m &quot;Start developing a feature&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑更多文件</span></span><br><span class="line">git commit -a -m &quot;Fix something from the previous commit&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接在 master 上添加文件</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git commit -a -m &quot;Fix security hole&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始交互式 rebase</span></span><br><span class="line">git checkout new-feature</span><br><span class="line">git rebase -i master</span><br></pre></td></tr></table></figure><p>最后的那个命令会打开一个编辑器，包含 new-feature 的两个提交，和一些指示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick 32618c4 Start developing a feature</span><br><span class="line">pick 62eed47 Fix something from the previous commit</span><br></pre></td></tr></table></figure><p>你可以更改每个提交前的 pick 命令来决定在 rebase 时提交移动的方式。在我们的例子中，我们只需要用 squash 命令把两个提交并在一起就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick 32618c4 Start developing a feature</span><br><span class="line">squash 62eed47 Fix something from the previous commit</span><br></pre></td></tr></table></figure><p>保存并关闭编辑器以开始 rebase。另一个编辑器会打开，询问你合并后的快照的提交信息。在定义了提交信息之后，rebase 就完成了，你可以在 <code>git log</code> 输出中看到那个提交。</p><p>注意缩并的提交和原来的两个提交的 ID 都不一样，告诉我们这确实是个新的提交。</p><p>最后，你可以执行一个快速向前的合并，来将完善的 feature 分支整合进主代码库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge new-feature</span><br></pre></td></tr></table></figure><p>交互式 rebase 强大的能力可以从整合后的 master 分支看出——额外的 <code>62eed47</code> 提交找不到了。对其他人来说，你就像是一个天才，用完美数量的提交完成了 <code>new-feature</code>。这就是交互式提交如何保持项目历史干净和合意。</p><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><p>Git 用引用日志这种机制来记录分支顶端的更新。它允许你回到那些不被任何分支或标签引用的更改。在重写历史后，引用日志包含了分支旧状态的信息，有需要的话你可以回到这个状态。</p><h3 id="用法-14"><a href="#用法-14" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>显示本地仓库的引用日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog --relative-date</span><br></pre></td></tr></table></figure><p>用相对的日期显示引用日志。(如 2 周前）。</p><h3 id="讨论-14"><a href="#讨论-14" class="headerlink" title="讨论"></a>讨论</h3><p>每次当前的 HEAD 更新时（如切换分支、拉取新更改、重写历史或只是添加新的提交），引用日志都会添加一个新条目。</p><h3 id="栗子-12"><a href="#栗子-12" class="headerlink" title="栗子"></a>栗子</h3><p>为了理解 <code>git reflog</code>，我们来看一个🌰。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class="line">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to master</span><br><span class="line">c10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2</span><br></pre></td></tr></table></figure><p>上面的引用日志显示了 master 和 2.2 的 branch 之间的相互切换。还有对一个更老的提交的强制重设。最近的活动用 <code>HEAD@&#123;0&#125;</code> 标记在上方显示。</p><p>如果事实上你是不小心切换回去的，引用日志包含了你意外地丢掉两个提交之前 master 指向的提交 0254ea7。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 0254ea7</span><br></pre></td></tr></table></figure><p>使用 <code>git reset</code>，就有可能能将master变回之前的那个提交。它提供了一张安全网，以防历史发生意外更改。</p><p>务必记住，引用日志提供的安全网只对提交到本地仓库的更改有效，而且只有移动操作会被记录。</p><hr><h1 id="2-1-保持代码同步"><a href="#2-1-保持代码同步" class="headerlink" title="2.1 保持代码同步"></a>2.1 保持代码同步</h1><p>SVN 使用唯一的中央仓库作为开发者之间沟通的桥梁，在开发者的工作拷贝和中央仓库之间传递变更集合（changeset），协作得以发生。这和Git的协作模型有所不同，Git 给予每个开发者一份自己的仓库拷贝，拥有自己完整的本地历史和分支结构。用户通常共享一系列的提交而不是单个变更集合。Git 允许你在仓库间共享整个分支，而不是从工作副本提交一个差异集合到中央仓库。</p><p>下面的命令让你管理仓库之间的连接，将分支「推送」到其他仓库来发布本地历史，或是将分支「拉取」到本地仓库来查看其它开发者的贡献。</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p><code>git remote</code> 命令允许你创建、查看和删除和其它仓库之间的连接。远程连接更像是书签，而不是直接跳转到其他仓库的链接。它用方便记住的别名引用不那么方便记住的 URL，而不是提供其他仓库的实时连接。</p><p>你可以向 Git 命令传递 origin 和 john 的别名来引用这些仓库，替代完整的 URL。</p><h3 id="用法-15"><a href="#用法-15" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>列出你和其他仓库之间的远程连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>和上个命令相同，但同时显示每个连接的 URL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p>创建一个新的远程仓库连接。在添加之后，你可以将 <code>&lt;name&gt;</code> 作为 <code>&lt;url&gt;</code> 便捷的别名在其他 Git 命令中使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm &lt;name&gt;</span><br></pre></td></tr></table></figure><p>移除名为<name>的远程仓库的连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename &lt;old-name&gt; &lt;new-name&gt;</span><br></pre></td></tr></table></figure><p>将远程连接从 <code>&lt;old-name&gt;</code> 重命名为 <code>&lt;new-name&gt;</code>。</p><h3 id="讨论-15"><a href="#讨论-15" class="headerlink" title="讨论"></a>讨论</h3><p>Git 被设计为给每个开发者提供完全隔离的开发环境。也就是说信息并不是自动地在仓库之间传递。开发者需要手动将上游提交拉取到本地，或手动将本地提交推送到中央仓库中去。<code>git remote</code> 命令正是将 URL 传递给这些「共享」命令的快捷方式。</p><h4 id="名为-origin-的远程连接"><a href="#名为-origin-的远程连接" class="headerlink" title="名为 origin 的远程连接"></a>名为 origin 的远程连接</h4><p>当你用 <code>git clone</code> 克隆仓库时，它自动创建了一个名为 origin 的远程连接，指向被克隆的仓库。当开发者创建中央仓库的本地副本时非常有用，因为它提供了拉取上游更改和发布本地提交的快捷方式。这也是为什么大多数基于 Git 的项目将它们的中央仓库取名为 origin。</p><h4 id="仓库的-URL"><a href="#仓库的-URL" class="headerlink" title="仓库的 URL"></a>仓库的 URL</h4><p>Git 支持多种方式来引用一个远程仓库。其中两种最简单的方式便是 HTTP 和 SSH 协议。HTTP 是允许匿名、只读访问仓库的简易方式。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://host/path/to/repo.git</span><br></pre></td></tr></table></figure><p>但是，直接将提交推送到一个 HTTP 地址一般是不可行的（你不太可能希望匿名用户也能随意推送）。如果希望对仓库进行读写，你需要使用 SSH 协议：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh://user@host/path/to/repo.git</span><br></pre></td></tr></table></figure><p>你需要在托管的服务器上有一个有效的 SSH 账户，但不用麻烦了，Git 支持开箱即用的 SSH 认证连接。</p><h3 id="栗子-13"><a href="#栗子-13" class="headerlink" title="栗子"></a>栗子</h3><p>除了 origin 之外，添加你同事的仓库连接通常会带来一些便利。比如，如果你的同事 John 在 <code>dev.example.com/john.git</code> 上维护了一个公开的仓库，你可以这样添加连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add john http://dev.example.com/john.git</span><br></pre></td></tr></table></figure><p>通过这种方式访问每个开发者的仓库，中央仓库之外的协作变得可能。这给维护大项目的小团队带来了极大的便利。</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p><code>git fetch</code> 命令将提交从远程仓库导入到你的本地仓库。拉取下来的提交储存为远程分支，而不是我们一直使用的普通的本地分支。你因此可以在整合进你的项目副本之前查看更改。</p><h3 id="用法-16"><a href="#用法-16" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure><p>拉取仓库中所有的分支。同时会从另一个仓库中下载所有需要的提交和文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>和上一个命令相同，但只拉取指定的分支。</p><h3 id="讨论-16"><a href="#讨论-16" class="headerlink" title="讨论"></a>讨论</h3><p>当你希望查看其他人的工作进展时，你需要 fetch。fetch 下来的内容表示为一个远程分支，因此不会影响你的本地开发。这是一个安全的方式，在整合进你的本地仓库之前，检查那些提交。类似于 svn update，你可以看到中央仓库的历史进展如何，但它不会强制你将这些进展合并入你的仓库。</p><h4 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h4><p>远程分支和本地分支一样，只不过它们代表这些提交来自于其他人的仓库。你可以像查看本地分支一样查看远程分支，但你会处于分离 HEAD 状态（就像查看旧的提交时一样）。你可以把它们视作只读的分支。如果想要查看远程分支，只需要向 <code>git branch</code> 命令传入 <code>-r</code> 参数。远程分支拥有 remote 的前缀，所以你不会将它们和本地分支混起来。比如，下面的代码片段显示了从 origin 拉取之后，你可能想要查看的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">origin/master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">origin/develop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">origin/some-feature</span></span><br></pre></td></tr></table></figure><p>同样，你可以用寻常的 <code>git checkout</code> 和 <code>git log</code> 命令来查看这些分支。如果你接受远程分支包含的更改，你可以使用 <code>git merge</code> 将它并入本地分支。所以，不像 SVN，同步你的本地仓库和远程仓库事实上是一个分两步的操作：先 fetch，然后 merge。<code>git pull</code> 命令是这个过程的快捷方式。</p><h3 id="栗子-14"><a href="#栗子-14" class="headerlink" title="栗子"></a>栗子</h3><p>这个例子回顾了同步本地和远程仓库 <code>master</code> 分支的常见工作流：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><p>它会显示会被下载的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a1e8fb5..45e66a4 master -&gt; origin/master</span><br><span class="line">a1e8fb5..9e8ab1c develop -&gt; origin/develop</span><br><span class="line">* [new branch] some-feature -&gt; origin/some-feature</span><br></pre></td></tr></table></figure><p>远程分支中的提交显示为方块，而不是圆圈。正如你所见，<code>git fetch</code> 让你看到了另一个仓库完整的分支结构。</p><p>若想查看添加到上游 master 上的提交，你可以运行 <code>git log</code>，用 <code>origin/master</code> 过滤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline master..origin/master</span><br></pre></td></tr></table></figure><p>用下面这些命令接受更改并并入你的本地 <code>master</code> 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git log origin/master</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>git merge origin/master</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p>origin&#x2F;master 和 master 分支现在指向了同一个提交，你已经和上游的更新保持了同步。</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>在基于 Git 的协作工作流中，将上游更改合并到你的本地仓库是一个常见的工作。我们已经知道应该使用 <code>git fetch</code>，然后是 <code>git merge</code>，但是 <code>git pull</code> 将这两个命令合二为一。</p><h3 id="用法-17"><a href="#用法-17" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;remote&gt;</span><br></pre></td></tr></table></figure><p>拉取当前分支对应的远程副本中的更改，并立即并入本地副本。效果和 <code>git fetch</code> 后接 <code>git merge origin/.</code> 一致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase &lt;remote&gt;</span><br></pre></td></tr></table></figure><p>和上一个命令相同，但使用 <code>git rebase</code> 合并远程分支和本地分支，而不是使用 <code>git merge</code>。</p><h3 id="讨论-17"><a href="#讨论-17" class="headerlink" title="讨论"></a>讨论</h3><p>你可以将 <code>git pull</code> 当做 Git 中对应 <code>svn update</code> 的命令。这是同步你本地仓库和上游更改的简单方式。</p><p>你认为你的仓库已经同步了，但 <code>git fetch</code> 发现 origin 中 <code>master</code> 的版本在上次检查后已经有了新进展。 接着 <code>git merge</code> 立即将 <code>remote master</code> 并入本地的分支。</p><h4 id="基于-Rebase-的-Pull"><a href="#基于-Rebase-的-Pull" class="headerlink" title="基于 Rebase 的 Pull"></a>基于 Rebase 的 Pull</h4><p><code>--rebase</code> 标记可以用来保证线性的项目历史，防止合并提交（merge commits）的产生。很多开发者倾向于使用 rebase 而不是 merge，因为「我想要把我的更改放在其他人完成的工作之后」。在这种情况下，与普通的 <code>git pull</code> 相比而言，使用带有 <code>--rebase</code> 标记的 <code>git pull</code> 甚至更像 svn update。</p><p>事实上，使用 <code>--rebase</code> 的 pull 的工作流是如此普遍，以致于你可以直接在配置项中设置它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global branch.autosetuprebase always # In git &lt; 1.7.9</span><br><span class="line">git config --global pull.rebase true              # In git &gt;= 1.7.9</span><br></pre></td></tr></table></figure><p>在运行这个命令之后，所有的 <code>git pull</code> 命令将使用 <code>git rebase</code> 而不是 <code>git merge</code>。</p><h3 id="栗子-15"><a href="#栗子-15" class="headerlink" title="栗子"></a>栗子</h3><p>下面的栗子演示了如何和一个中央仓库的 <code>master branch</code> 同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull --rebase origin</span><br></pre></td></tr></table></figure><p>简单地将你本地的更改放到其他人已经提交的更改之后。</p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>Push 是你将本地仓库中的提交转移到远程仓库中时要做的事。它和 <code>git fetch</code> 正好相反，fetch 将提交导入到本地分支，而 push 将提交导出到远程分支。它可以覆盖已有的更改，所以你需要小心使用。这些情况请见下面的讨论。</p><h3 id="用法-18"><a href="#用法-18" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>将指定的分支推送到 <code>&lt;remote&gt;</code> 上，包括所有需要的提交和提交对象。它会在目标仓库中创建一个本地分支。为了防止你覆盖已有的提交，如果会导致目标仓库非快速向前合并时，Git 不允许你 push。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; --force</span><br></pre></td></tr></table></figure><p>和上一个命令相同，但即使会导致非快速向前合并也强制推送。除非你确定你所做的事，否则不要使用 <code>--force</code> 标记。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; --all</span><br></pre></td></tr></table></figure><p>将所有本地分支推送到指定的远程仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; --tags</span><br></pre></td></tr></table></figure><p>当你推送一个分支或是使用 <code>--all</code> 选项时，标签不会被自动推送上去。<code>--tags</code> 将你所有的本地标签推送到远程仓库中去。</p><h3 id="讨论-18"><a href="#讨论-18" class="headerlink" title="讨论"></a>讨论</h3><p><code>git push</code> 最常见的用法是将你的本地更改发布到中央仓库。在你积累了一些本地提交，准备和同事们共享时，你（可以）用交互式 rebase 来清理你的提交，然后推送到中央仓库去。</p><p>当你本地的 master 分支进展超过了中央仓库的 <code>master</code> 分支，当你运行 <code>git push origin master</code> 发布更改时发生的事情。注意，<code>git push</code> 和在远程仓库内部运行 <code>git merge master</code> 事实上是一样的。</p><h4 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h4><p>Git 为了防止你覆盖中央仓库的历史，会拒绝你会导致非快速向前合并的推送请求。所以，如果远程历史和你本地历史已经分叉，你需要将远程分支 pull 下来，在本地合并后再尝试推送。这和 SVN 让你在提交更改集合之前要和中央仓库同步是类似的。</p><p><code>--force</code> 这个标记覆盖了这个行为，让远程仓库的分支符合你的本地分支，删除你上次 pull 之后可能的上游更改。只有当你意识到你刚刚共享的提交不正确，并用 <code>git commit --amend</code> 或者交互式 rebase 修复之后，你才需要用到强制推送。但是，你必须绝对确定在你使用 <code>--force</code> 标记前你的同事们都没有 pull 这些提交。</p><h4 id="只推送到裸仓库"><a href="#只推送到裸仓库" class="headerlink" title="只推送到裸仓库"></a>只推送到裸仓库</h4><p>此外，你只应该推送到那些用 <code>--bare</code> 标记初始化的仓库。因为推送会弄乱远程分支结构，很重要的一点是，永远不要推送到其他开发者的仓库。但因为裸仓库没有工作目录，不会发生打断别人的开发之类的事情。</p><h3 id="栗子-16"><a href="#栗子-16" class="headerlink" title="栗子"></a>栗子</h3><p>下面的栗子描述了将本地提交推送到中央仓库的一些标准做法。首先，确保你本地的 <code>master</code> 和中央仓库的副本是一致的，提前 fetch 中央仓库的副本并在上面 rebase。交互式 rebase 同样是共享之前清理提交的好机会。接下来，<code>git push</code> 命令将你本地 <code>master</code> 分支上的所有提交发送给中央仓库.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git fetch origin master</span><br><span class="line">git rebase -i origin/master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Squash commits, fix up commit messages etc.</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>因为我们已经确信本地的 <code>master</code> 分支是最新的，它应该导致快速向前的合并，<code>git push</code> 不应该抛出非快速向前之类的问题。</p><hr><h1 id="2-2-创建Pull-Request"><a href="#2-2-创建Pull-Request" class="headerlink" title="2.2 创建Pull Request"></a>2.2 创建Pull Request</h1><p>Pull Request 是开发者使用 GitHub 进行协作的利器。这个功能为用户提供了友好的页面，让提议的更改在并入官方项目之前，可以得到充分的讨论。</p><p>最简单地来说，Pull Request 是一种机制，让开发者告诉项目成员一个功能已经完成。一旦 feature 分支开发完毕，开发者使用 GitHub 账号提交一个 Pull Request。它告诉所有参与者，他们需要审查代码，并将代码并入 <code>master</code> 分支。</p><p>但是，Pull Request 不只是一个通知，还是一个专注于某个提议功能的讨论版。 如果更改导致了任何问题，团队成员可以在 Pull Request 下发布反馈，甚至推送后续提交来修改这个 Pull Request。所有的活动都在这个 Pull Request里之间追踪。</p><p>和其他协作模型相比，这种共享提交的解决方案形成了更加线性的工作流。SVN 和 Git 都能通过一个简单的脚本发送通知邮件；但是，如果要讨论更改，开发者不得不在邮件里回复。这会变得愈发杂乱无章，尤其是后续提交出现时。Pull Request 将所有这些功能放入了一个友好的网页，在每个 GitHub 仓库上方都能找到。</p><h3 id="剖析一个-Pull-Request"><a href="#剖析一个-Pull-Request" class="headerlink" title="剖析一个 Pull Request"></a>剖析一个 Pull Request</h3><p>当你提交一个 Pull Request 的时候，你做的事情是 <em>请求（request）</em> 另一个开发者（比如项目维护者）来 <em>拉取（pull）</em> 你仓库中的一个分支到他们的仓库。也就是说你需要提供 4 个信息来完成一个 Pull Request：源仓库、源分支、目标仓库、目标分支。</p><p>GitHub 会机智地帮你将一些值设为默认值。但是，取决于你的协作工作流，你的团队可能需要设置不同的值。一个请求从 feature 分支合并到官方  master分支的一个 Pull Request，但除此之外还有好多种使用 Pull Request 的方式。</p><h3 id="Pull-Request是如何工作的"><a href="#Pull-Request是如何工作的" class="headerlink" title="Pull Request是如何工作的"></a>Pull Request是如何工作的</h3><p>Pull Request 可以和 feature 分支工作流、GitFlow 工作流或者 Fork 工作流一起使用。但 Pull Request 需要两个不同的分支或是两个不同的仓库，因此它们不能和中心化的工作流一起使用。在不同的工作流中使用 Pull Request 有些不同，但大致的流程如下：</p><ol><li>开发者在他们的本地仓库中为某个功能创建一个专门的分支。</li><li>开发者将分支推送到公共的 GitHub 仓库。</li><li>开发者用 GitHub 发起一个 Pull Request。</li><li>其余的团队成员审查代码，讨论并且做出修改。</li><li>项目维护者将这个功能并入官方的仓库，然后关闭这个 Pull Request。</li></ol><p>下面的章节讨论 Pull Request 在不同的协作工作流中有哪些不同。</p><h3 id="Feature-分支工作流中的-Pull-Request"><a href="#Feature-分支工作流中的-Pull-Request" class="headerlink" title="Feature 分支工作流中的 Pull Request"></a>Feature 分支工作流中的 Pull Request</h3><p>Feature 分支工作流使用共享的 GitHub 仓库来管理协作，开发者在单独的 feature 分支中添加功能。开发者在将代码并入主代码库之前，应该发起一个 Pull Request 来启动这个功能的讨论，而不是直接将它们合并到 <code>master</code>。</p><p>在 Feature 分支工作流中只有一个公共的仓库，因此 Pull Request 的目标和源仓库永远是同一个。一般来说，开发者会将他们的  feature分支作为源分支，<code>master</code> 作为目标分支。</p><p>在收到 Pull Request 之后，项目维护者将会做出决定。如果这个功能可以立即发布，他们只需要将代码合并进 <code>master</code>，然后关闭 Pull Request 即可。但是，如果提议的更改有一些问题，他们可以在 Pull Request 下发布反馈。后续提交将会显示在相关评论的下方。</p><p>你也可以发布一个未完成功能的 Pull Request。例如，如果开发者在实现一个特殊的需求时遇到了问题，同样可以发布一个包含工作进展的 Pull Request。其他开发者可以在这个 Pull Request 后面提供建议，甚至自己发布后续的提交来解决这个问题。</p><h3 id="GitFlow-工作流中的-Pull-Request"><a href="#GitFlow-工作流中的-Pull-Request" class="headerlink" title="GitFlow 工作流中的 Pull Request"></a>GitFlow 工作流中的 Pull Request</h3><p>GitFlow 工作流和 Feature 分支工作流类似，但定义了围绕项目发布的一个严格的分支模型。在 GitFlow 工作流之上添加 Pull Request 使得开发者方便地讨论发布分支或是所在的维护分支。</p><p>在 GitFlow 工作流中的 Pull Request 和上一节中的完全一致：开发者只需在功能、发布或是快速修复分支需要审查时发布一个 Pull Request，GitHub 会通知到其余的团队成员。</p><p>功能一般都会合并到 <code>develop</code> 分支，而发布和快速修复分支会被同时合并到 <code>develop</code> 和 <code>master</code> 当中。 Pull Request 可以用来妥善管理这些合并。</p><h3 id="Fork-工作流中的-Pull-Request"><a href="#Fork-工作流中的-Pull-Request" class="headerlink" title="Fork 工作流中的 Pull Request"></a>Fork 工作流中的 Pull Request</h3><p>在 Fork 工作流中，开发者将一个完成的功能推送到 <em>他们自己的</em> 仓库，而不是公共的仓库。在这之后，他们发布一个 Pull Request，告诉项目维护者代码需要审查了。</p><p>在这个工作流中，Pull Request 的通知作用显得非常有用，因为项目维护者无法获知其他开发者什么时候向他们自己的 GitHub 仓库中添加了提交。</p><p>因为每个开发者都有他们自己的公共仓库，Pull Request 的源仓库和目标仓库不是同一个。源仓库是开发者的公开仓库，源分支是包含提议更改的那一个。如果开发者想要将功能合并到主代码库，目标仓库便是官方的项目仓库，目标分支为 <code>master</code>。</p><p>Pull Request 还可以用来和官方项目之外的开发者进行协作。比如说，一个开发者正在和同事一起开发一个功能，他们可以向 <em>同事的</em> GitHub 仓库发起一个 Pull Request，而不是官方仓库。他们将 feature 分支同时作为源分支和目标分支。</p><p>两个开发者可以在 Pull Request 中讨论和开发分支。当功能完成时，其中一位可以发起另一个 Pull Request，请求将功能合并到官方的 master 分支中去。这种灵活性使得 Pull Request 成为了 Fork 工作流中尤为强大的协作工具。</p><h3 id="栗子-17"><a href="#栗子-17" class="headerlink" title="栗子"></a>栗子</h3><p>下面的🌰演示了如何将 Pull Request 用在 Fork 工作流中。小团队中的开发和向一个开源项目贡献代码都可以这样做。</p><p>在这个栗子中，Mary 是一位开发者，John 是项目的维护者。他们都有自己公开的 GitHub 仓库，John 的仓库之一便是下面的官方项目。</p><h4 id="Mary-fork了官方项目"><a href="#Mary-fork了官方项目" class="headerlink" title="Mary fork了官方项目"></a>Mary fork了官方项目</h4><p>为了参与这个项目，Mary 首先要做的是 fork 属于 John 的 GitHub 仓库。她需要注册登录 GitHub，找到 John 的仓库，点击 Fork 按钮。</p><p>选好 fork 的目标位置之后，她在服务端就有了一个项目的副本。</p><h4 id="Mary-克隆了她的-GitHub-仓库"><a href="#Mary-克隆了她的-GitHub-仓库" class="headerlink" title="Mary 克隆了她的 GitHub 仓库"></a>Mary 克隆了她的 GitHub 仓库</h4><p>接下来，Mary 需要将她刚刚 fork 的 GitHub 仓库克隆下来。她在本地会有一份项目的副本。她需要运行下面这个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><p>请记住，<code>git clone</code> 自动创建了一个名为 <code>origin</code> 的远端连接，指向 Mary 所 fork 的仓库。</p><h4 id="Mary-开发了一个新功能"><a href="#Mary-开发了一个新功能" class="headerlink" title="Mary 开发了一个新功能"></a>Mary 开发了一个新功能</h4><p>在她写任何代码之前，Mary 需要为这个功能创建一个新的分支。这个分支将是她随后发起 Pull Request 时要用到的源分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b some-feature</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑一些代码</span></span><br><span class="line">git commit -a -m &quot;新功能的一些草稿&quot;</span><br></pre></td></tr></table></figure><p>为了完成这个新功能，Mary 想创建多少个提交都可以。如果 feature 分支的历史有些乱，她可以使用交互式的 rebase 来移除或者拼接不必要的提交。对于大项目来说，清理 feature 的项目历史使得项目维护者更容易看清楚 Pull Request 的所处的进展。</p><h4 id="Mary-将-feature-分支推送到了她的-GitHub-仓库"><a href="#Mary-将-feature-分支推送到了她的-GitHub-仓库" class="headerlink" title="Mary 将 feature 分支推送到了她的 GitHub 仓库"></a>Mary 将 feature 分支推送到了她的 GitHub 仓库</h4><p>在功能完成后，Mary 使用简单的 <code>git push</code> 将 feature 分支推送到了她自己的 GitHub 仓库上（不是官方的仓库）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin some-branch</span><br></pre></td></tr></table></figure><p>这样她的更改就可以被项目维护者看到了（或者任何有权限的协作者）。</p><h4 id="Mary-创建了一个-Pull-Request"><a href="#Mary-创建了一个-Pull-Request" class="headerlink" title="Mary 创建了一个 Pull Request"></a>Mary 创建了一个 Pull Request</h4><p>GitHub 上已经有了她的 feature 分支之后，Mary 可以找到被她 fork 的仓库，点击项目简介下的 <em>New Pull Request</em> 按钮，用她的 GitHub 账号创建一个 Pull Request。Mary 的仓库会被默认设置为源仓库（head fork），询问她指定源分支（compare）、目标仓库（base fork）和目标分支（base）。</p><p>Mary 想要将她的功能并入主代码库，所以源分支就是她的 feature 分支，目标仓库就是 John 的公开仓库，目标分支为 <code>master</code>。她还需要提供一个 Pull Request 的标题和简介。</p><p>在她创建了 Pull Request 之后，GitHub 会给 John 发送一条通知。</p><h4 id="John-审查了这个-Pull-Request"><a href="#John-审查了这个-Pull-Request" class="headerlink" title="John 审查了这个 Pull Request"></a>John 审查了这个 Pull Request</h4><p>John 可以在他自己的 GitHub 仓库下的 <em>Pull Request</em> 选项卡中看到所有的 Pull Request。点击 Mary 的 Pull Request 会显示这个 Pull Request 的简介、feature 分支的提交历史，以及包含的更改。</p><p>如果他认为 feature 分支已经可以合并了，他只需点击 <em>Merge Pull Request</em> 按钮来通过这个 Pull Request，将 Mary 的  feature分支并入他的 <code>master</code> 分支。</p><p>但是，在这里栗子中，假设 John 发现了 Mary 代码中的一个小 bug，需要她在合并前修复。他可以评论整个 Pull Request，也可以评论 feature 分支中某个特定的提交。</p><h4 id="Mary-添加了一个后续提交"><a href="#Mary-添加了一个后续提交" class="headerlink" title="Mary 添加了一个后续提交"></a>Mary 添加了一个后续提交</h4><p>如果 Mary 对这个反馈感到困惑，她可以在 Pull Request 后回复，把这里当做是她的功能的讨论版。</p><p>为了修复错误，Mary 在她的 feature 分支后面添加了另一个提交，并将它推送到了她的 GitHub 仓库，就像她之前做的一样。这个提交被自动添加到原来的 Pull Request 后面，John 可以在他的评论下方再次审查这些修改。</p><h4 id="John-接受了-Pull-Request"><a href="#John-接受了-Pull-Request" class="headerlink" title="John 接受了 Pull Request"></a>John 接受了 Pull Request</h4><p>最后，John 接受了这些修改，将 feature 分支并入了 master 分支，关闭了这个 Pull Request。功能现在已经整合到了项目中，其他在 master 分支上工作的开发者可以使用标准的 <code>git pull</code> 命令将这些修改拉取到自己的本地仓库。</p><h3 id="接下来怎么做？"><a href="#接下来怎么做？" class="headerlink" title="接下来怎么做？"></a>接下来怎么做？</h3><p>你现在应该已经掌握了如何将你的 Pull Request 整合到你的工作流。记住，Pull Request 不是替代任何 Git 工作流的万金油，而是一种让队员间协作锦上添花的工具。</p><hr><h1 id="2-3-使用分支"><a href="#2-3-使用分支" class="headerlink" title="2.3 使用分支"></a>2.3 使用分支</h1><p>这份教程是 Git 分支的综合介绍。首先，我们简单讲解如何创建分支，就像请求一份新的项目历史一样。然后，我们会看到 git checkout 是如何切换分支的。最后，学习一下 git merge 是如何整合独立分支的历史。</p><p>我们已经知道，Git 分支和 SVN 分支不同。SVN 分支只被用来记录偶尔大规模的开发效果，而 Git 分支是你日常工作流中不可缺失的一部分。</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>分支代表了一条独立的开发流水线。分支是我们在第二篇中讨论过的「编辑&#x2F;缓存&#x2F;提交」流程的抽象。你可以把它看作请求全新「工作目录、缓存区、项目历史」的一种方式。新的提交被存放在当前分支的历史中，导致了项目历史被 fork 了一份。</p><p><code>git branch</code> 命令允许你创建、列出、重命名和删除分支。它不允许你切换分支或是将被 fork 的历史放回去。因此，<code>git branch</code> 和 <code>git checkout</code>、<code>git merge</code> 这两个命令通常紧密地结合在一起使用。</p><h3 id="用法-19"><a href="#用法-19" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>列出仓库中所有分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>创建一个名为 <code>&lt;branch&gt;</code> 的分支。<em>不会</em> 自动切换到那个分支去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>删除指定分支。这是一个安全的操作，Git 会阻止你删除包含未合并更改的分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>强制删除指定分支，即使包含未合并更改。如果你希望永远删除某条开发线的所有提交，你应该用这个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>将当前分支命名为 <code>&lt;branch&gt;</code>。</p><h3 id="讨论-19"><a href="#讨论-19" class="headerlink" title="讨论"></a>讨论</h3><p>在 Git 中，分支是你日常开发流程中的一部分。当你想要添加一个新的功能或是修复一个 bug 时——不管 bug 是大是小——你都应该新建一个分支来封装你的修改。这确保了不稳定的代码永远不会被提交到主代码库中，它同时给了你机会，在并入主分支前清理你 feature 分支的历史。</p><p>比如，将一个拥有两条独立开发线的仓库可视化，其中一条是一个不起眼的功能，另一条是长期运行的功能。使用分支开发时，不仅可以同时在两条线上工作，还可以保持主要的 <code>master branch</code> 不混入奇怪的代码。</p><h4 id="分支的顶端"><a href="#分支的顶端" class="headerlink" title="分支的顶端"></a>分支的顶端</h4><p>Git 分支背后的实现远比 SVN 的模型要轻量。与其在目录之间复制文件，Git 将分支存为指向提交的引用。换句话说，分支代表了一系列提交的 <em>顶端</em> ——而不是提交的 <em>容器</em> 。分支历史通过提交之间的关系来推断。</p><p>这使得 Git 的合并模型变成了动态的。SVN 中的合并是基于文件的，而Git 让你在更抽象的提交层面操作。事实上，你可以看到项目历史中的合并其实是将两个独立的提交历史连接起来。</p><h3 id="栗子-18"><a href="#栗子-18" class="headerlink" title="栗子"></a>栗子</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>分支只是指向提交的 <em>指针</em> ，理解这一点很重要。当你创建一个分支是，Git 只需要创建一个新的指针——仓库不会受到任何影响。因此，如果你最开始有这样一个仓库：</p><p>接下来你用下面的命令创建了一个分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch crazy-experiment</span><br></pre></td></tr></table></figure><p>仓库历史保持不变。你得到的是一个指向当前提交的新的指针：</p><p>注意，这只会 <em>创建</em> 一个新的分支。要开始在上面添加提交，你需要用 <code>git checkout</code> 来选中这个分支，然后使用标准的 <code>git add</code> 和 <code>git commit</code> 命令。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>一旦你完成了分支上的工作，准备将它并入主代码库，你可以自由地删除这个分支，而不丢失项目历史：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d crazy-experiment</span><br></pre></td></tr></table></figure><p>然后，如果分支还没有合并，下面的命令会产生一个错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: The branch &#x27;crazy-experiment&#x27; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &#x27;git branch -D crazy-experiment&#x27;.</span><br></pre></td></tr></table></figure><p>Git 保护你不会丢失这些提交的引用，或者说丢失访问整条开发线的入口。如果你 <em>真的</em> 想要删除这个分支（比如说这是一个失败的实验），你可以用大写的 <code>-D</code> 标记：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D crazy-experiment</span><br></pre></td></tr></table></figure><p>它会删除这个分支，无视它的状态和警告，因此需谨慎使用。</p><h2 id="git-checkout-1"><a href="#git-checkout-1" class="headerlink" title="git checkout"></a>git checkout</h2><p><code>git checkout</code> 命令允许你切换用 <code>git branch</code> 创建的分支。查看一个分支会更新工作目录中的文件，以符合分支中的版本，它还告诉 Git 记录那个分支上的新提交。将它看作一个选中你正在进行的开发的一种方式。</p><p>在上一篇中，我们看到了如何用 <code>git checkout</code> 来查看旧的提交。「查看分支」和「将工作目录更新到选中的版本&#x2F;修改」很类似；但是，新的更改 <em>会</em> 保存在项目历史中——这不是一个只读的操作。</p><h3 id="用法-20"><a href="#用法-20" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;existing-branch&gt;</span><br></pre></td></tr></table></figure><p>查看特定分支，分支应该已经通过 <code>git branch</code> 创建。这使得 <code>&lt;existing-branch&gt;</code> 成为当前的分支，并更新工作目录的版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch&gt;</span><br></pre></td></tr></table></figure><p>创建并查看 <code>&lt;new-branch&gt;</code>，<code>-b</code> 选项是一个方便的标记，告诉Git在运行 <code>git checkout &lt;new-branch&gt;</code> 之前运行 <code>git branch &lt;new-branch&gt;</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new-branch&gt; &lt;existing-branch&gt;</span><br></pre></td></tr></table></figure><p>和上一条相同，但将 <code>&lt;existing-branch&gt;</code> 作为新分支的基，而不是当前分支。</p><h3 id="讨论-20"><a href="#讨论-20" class="headerlink" title="讨论"></a>讨论</h3><p><code>git checkout</code> 和 <code>git branch</code> 是一对好基友。当你想要创建一个新功能时，你用 <code>git branch</code> 创建分支，然后用 <code>git checkout</code> 查看。你可以在一个仓库中用 <code>git checkout</code> 切换分支，同时开发几个功能。</p><p>每个功能专门一个分支对于传统 SVN 工作流来说是一个巨大的转变。这使得尝试新的实验超乎想象的简单，不用担心毁坏已有的功能，并且可以同时开发几个不相关的功能。另外，分支可以促进了不同的协作工作流。</p><h4 id="分离的-HEAD"><a href="#分离的-HEAD" class="headerlink" title="分离的 HEAD"></a>分离的 <code>HEAD</code></h4><p>现在我们已经看到了 <code>git checkout</code> 最主要的三种用法，我们可以讨论上一篇中提到的「分离 <code>HEAD</code>」状态了。</p><p>记住，<code>HEAD</code> 是 Git 指向当前快照的引用。<code>git checkout</code> 命令内部只是更新 <code>HEAD</code>，指向特定分支或提交。当它指向分支时，Git 不会报错，但当你 check out 提交时，它会进入「分离 <code>HEAD</code>」状态。</p><p>有个警告会告诉你所做的更改和项目的其余历史处于「分离」的状态。如果你在分离 <code>HEAD</code> 状态开始开发新功能，没有分支可以让你回到之前的状态。当你不可避免地 checkout 到了另一个分支（比如你的更改并入了这个分支），你将不再能够引用你的 feature 分支：</p><p>重点是，你应该永远在分支上开发——而绝不在分离的 <code>HEAD</code> 上。这样确保你一直可以引用到你的新提交。不过，如果你只是想查看旧的提交，那么是否处于分离 <code>HEAD</code> 状态并不重要。</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>下面的例子演示了基本的 Git 分支流程。当你想要开发新功能时，你创建一个专门的分支，切换过去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch new-feature</span><br><span class="line">git checkout new-feature</span><br></pre></td></tr></table></figure><p>接下来，你可以和以往一样提交新的快照：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m &quot;Started work on a new feature&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">周而复始…</span></span><br></pre></td></tr></table></figure><p>这些操作都被记录在 <code>new-feature</code> 上，和 <code>master</code> 完全独立。你想添加多少提交就可以添加多少，不用关心你其它分支的修改。当你想要回到「主」代码库时，只要 check out 到 <code>master</code> 分支即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>这个命令在你开始新的分支之前，告诉你仓库的状态。在这里，你可以选择并入完成的新功能，或者在你项目稳定的版本上继续工作。</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>合并是 Git 将被 fork 的历史放回到一起的方式。<code>git merge</code> 命令允许你将 <code>git branch</code> 创建的多条分支合并成一个。</p><p>注意，下面所有命令将更改 <em>并入</em> 当前分支。当前分支会被更新，以响应合并操作，但目标分支完全不受影响。也就是说 <code>git merge</code> 经常和 <code>git checkout</code> 一起使用，选择当前分支，然后用 <code>git branch -d</code> 删除废弃的目标分支。</p><h3 id="用法-21"><a href="#用法-21" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>将指定分支并入当前分支。Git 会决定使用哪种合并算法（下文讨论）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>将指定分支并入当前分支，但 <em>总是</em> 生成一个合并提交（即使是快速向前合并）。这可以用来记录仓库中发生的所有合并。</p><h3 id="讨论-21"><a href="#讨论-21" class="headerlink" title="讨论"></a>讨论</h3><p>一旦你在单独的分支上完成了功能的开发，重要的是将它放回主代码库。取决于你的仓库结构，Git 有几种不同的算法来完成合并：快速向前合并或者三路合并。</p><p>当当前分支顶端到目标分支路径是线性之时，我们可以采取 <strong>快速向前合并</strong> 。Git 只需要将当前分支顶端（快速向前地）移动到目标分支顶端，即可整合两个分支的历史，而不需要“真正”合并分支。它在效果上合并了历史，因为目标分支上的提交现在在当前分支可以访问到。比如，<code>some-feature</code> 到 <code>master</code> 分支的快速向前合并会是这样的：</p><p>但是，如果分支已经分叉了，那么就无法进行快速向前合并。当和目标分支之间的路径不是线性之时，Git 只能执行 <strong>三路合并</strong> 。三路合并使用一个专门的提交来合并两个分支的历史。这个术语取自这样一个事实，Git 使用 <em>三个</em> 提交来生成合并提交：两个分支顶端和它们共同的祖先。</p><p>但你可以选择使用哪一种合并策略时，很多开发者喜欢使用快速向前合并（搭配 rebase 使用）来合并微小的功能或者修复 bug，使用三路合并来整合长期运行的功能。后者导致的合并提交作为两个分支的连接标志。</p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>如果你尝试合并的两个分支同一个文件的同一个部分，Git 将无法决定使用哪个版本。当这种情况发生时，它会停在合并提交，让你手动解决这些冲突。</p><p>Git 的合并流程令人称赞的一点是，它使用我们熟悉的「编辑&#x2F;缓存&#x2F;提交」工作流来解决冲突。当你遇到合并冲突时，运行 <code>git status</code> 命令来查看哪些文件存在需要解决的冲突。比如，如果两个分支都修改了 <code>hello.py</code> 的同一处，你会看到下面的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">On branch master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Unmerged paths:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git add/rm ...&quot;</span> as appropriate to mark resolution)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># both modified: hello.py</span></span></span><br><span class="line"><span class="meta prompt_">#</span></span><br></pre></td></tr></table></figure><p>接下来，你可以自己修复这个合并。当你准备结束合并时，你只需对冲突的文件运行 <code>git add</code> 告诉 Git 冲突已解决。然后，运行 <code>git commit</code> 生成一个合并提交。这和提交一个普通的快照有着完全相同的流程，也就是说，开发者能够轻而易举地管理他们的合并。</p><p>注意，提交冲突只会出现在三路合并中。在快速向前合并中，我们不可能出现冲突的更改。</p><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><h4 id="快速向前合并"><a href="#快速向前合并" class="headerlink" title="快速向前合并"></a>快速向前合并</h4><p>我们第一个例子演示了快速向前合并。下面的代码创建了一个分支，在后面添加了两个提交，然后使用快速向前合并将它并入主分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始新功能</span></span><br><span class="line">git checkout -b new-feature master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m &quot;开始新功能&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m &quot;完成功能&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并new-feature分支</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge new-feature</span><br><span class="line">git branch -d new-feature</span><br></pre></td></tr></table></figure><p>对于临时存在、用作独立开发环境而不是组织长期运行功能的工具的分支来说，这是一种常见的工作流。</p><p>同时注意，运行 <code>git branch -d</code> 时 Git 不应该产生错误提示，因为 <code>new-feature</code> 现在可以在主分支上访问了。</p><h4 id="三路合并"><a href="#三路合并" class="headerlink" title="三路合并"></a>三路合并</h4><p>下一个例子很相似，但需要进行三路合并，因为 <code>master</code> 在这个功能开发时取得了新进展。这是复杂功能和多个开发者同时工作时常见的情形。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始新功能</span></span><br><span class="line">git checkout -b new-feature master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m &quot;开始新功能&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m &quot;完成功能&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在master分支上开发</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m &quot;在master上添加了一些极其稳定的功能&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并new-feature分支</span></span><br><span class="line">git merge new-feature</span><br><span class="line">git branch -d new-feature</span><br></pre></td></tr></table></figure><p>注意，Git 现在无法进行快速向前合并，因为无法将 <code>master</code> 直接移动到 <code>new-feature</code>。</p><p>对大多数工作流来说，<code>new-feature</code> 会是一个需要一段时间来开发的复杂功能，这也是为什么同时 <code>master</code> 会有新的提交出现。如果你的分支上的功能像上面的一样简单，你会更想将它 rebase 到 <code>master</code>，使用快速向前合并。它会通过整理项目历史来避免多余的合并提交。</p><hr><h1 id="2-4-常见工作流比较"><a href="#2-4-常见工作流比较" class="headerlink" title="2.4 常见工作流比较"></a>2.4 常见工作流比较</h1><p>多种多样的工作流使得在项目中实施 Git 时变得难以选择。这份教程提供了一个出发点，调查企业团队最常见的 Git 工作流。</p><p>阅读的时候，请记住工作流应该是一种规范而不是金科玉律。我们希望向你展示所有工作流，让你融会贯通，因地制宜。</p><p>这份教程讨论了下面四种工作流：</p><ul><li>中心化的工作流</li><li>基于功能分支的工作流</li><li>Gitflow工作流</li><li>Fork工作流</li></ul><h2 id="中心化的工作流"><a href="#中心化的工作流" class="headerlink" title="中心化的工作流"></a>中心化的工作流</h2><p>过渡到分布式分版本控制系统看起来是个令人恐惧的任务，但你不必为了利用 Git 的优点而改变你现有的工作流。你的团队仍然可以用以前SVN的方式开发项目。</p><p>然而，使用 Git 来驱动你的开发工作流显示出了一些SVN没有的优点。首先，它让每个开发者都有了自己 <em>本地</em> 的完整项目副本。隔离的环境使得每个开发者的工作独立于项目的其它修改——他们可以在自己的本地仓库中添加提交，完全无视上游的开发，直到需要的时候。</p><p>第二，它让你接触到了 Git 鲁棒的分支和合并模型。和 SVN 不同，Git 分支被设计为一种故障安全的机制，用来在仓库之间整合代码和共享更改。</p><h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h2><p>和 Subversion 一样，中心化的工作流将中央仓库作为项目中所有修改的唯一入口。和 <code>trunk</code>  不同，默认的开发分支叫做<code>master</code>，所有更改都被提交到这个分支。这种工作流不需要 <code>master</code> 之外的其它分支。</p><p>开发者将中央仓库克隆到本地后开始工作。在他们的本地项目副本中，他们可以像SVN一样修改文件和提交更改；不过，这些新的提交被保存在 <em>本地</em> ——它们和中央仓库完全隔离。这使得开发者可以将和上游的同步推迟到他们方便的时候。</p><p>为了向官方项目发布修改，开发者将他们的本地 <code>master</code> 分支「推送」到中央仓库。这一步等同于 <code>svn commit</code>，除了Git添加的是所有不在中央 <code>master</code> 分支上的本地提交。</p><h3 id="管理冲突"><a href="#管理冲突" class="headerlink" title="管理冲突"></a>管理冲突</h3><p>中央仓库代表官方项目，因此它的提交历史应该被视作神圣不可更改的。如果开发者的本地提交和中央仓库分叉了，Git 会拒绝将他们的修改推送上去，因为这会覆盖官方提交。</p><p>在开发者发布他们的功能之前，他们需要 fetch 更新的中央提交，在它们之上 rebase 自己的更改。这就像是「我想要在其他人的工作进展之上添加我的修改」，它会产生完美的线性历史，就像和传统的 SVN 工作流一样。</p><p>如果本地修改和上游提交冲突时，Git 会暂停 rebase 流程，给你机会手动解决这些冲突。Git 很赞的一点是，它将 <code>git status</code> 和 <code>git add</code>命令同时用来生成提交和解决合并冲突。这使得开发者能够轻而易举地管理他们的合并。另外，如果他们改错了什么，Git 让他们轻易地退出 rebase 过程，然后重试（或者找人帮忙）。</p><h2 id="栗子-19"><a href="#栗子-19" class="headerlink" title="栗子"></a>栗子</h2><p>让我们一步步观察一个普通的小团队是如何使用这种工作流协作的。我们有两位开发者，John 和 Mary，分别在开发两个功能，他们通过中心化的仓库共享代码。</p><h3 id="一人初始化了中央仓库"><a href="#一人初始化了中央仓库" class="headerlink" title="一人初始化了中央仓库"></a>一人初始化了中央仓库</h3><p>首先，需要有人在服务器上创建中央仓库。如果这是一个新项目，你可以初始化一个空的仓库。不然，你需要导入一个已经存在的 Git 或 SVN 项目。</p><p>中央仓库应该永远是裸仓库（没有工作目录），可以这样创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host git init --bare /path/to/repo.git</span><br></pre></td></tr></table></figure><p>但确保你使用的 SSH 用户名 <code>user</code>、服务器 <code>host</code> 的域名或 IP 地址、储存仓库的地址 <code>/path/to/repo.git</code> 是有效的。注意 <code>.git</code> 约定俗成地出现在仓库名的后面，表明这是一个裸仓库。</p><h3 id="所有人将仓库克隆到本地"><a href="#所有人将仓库克隆到本地" class="headerlink" title="所有人将仓库克隆到本地"></a>所有人将仓库克隆到本地</h3><p>接下来，每个开发者在本地创建一份完整项目的副本。使用 <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/2.2-%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93#git-clone"><code>git clone</code></a> 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://user@host/path/to/repo.git</span><br></pre></td></tr></table></figure><p>当你克隆仓库时，Git 自动添加了一个名为 <code>origin</code> 的远程连接，指向「父」仓库，以便你以后和这个仓库交换数据。</p><h3 id="John-在开发他的功能"><a href="#John-在开发他的功能" class="headerlink" title="John 在开发他的功能"></a>John 在开发他的功能</h3><p>在他的本地仓库中，John 可以用标准的 Git 提交流程开发功能：编辑、缓存、提交。如果你对缓存区还不熟悉，你也可以不用记录工作目录中每次的变化。于是你创建了一个高度集中的提交，即使你已经在本地做了很多修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status # 查看仓库状态</span><br><span class="line">git add &lt;some-file&gt; # 缓存一个文件</span><br><span class="line">git commit # 提交一个文件&lt;/some-file&gt;</span><br></pre></td></tr></table></figure><p>记住，这些命令创建的是本地提交，John 可以周而复始地重复这个过程，而不用考虑中央仓库。对于庞大的功能，需要切成更简单、原子化的片段时，这个特性就很有用。</p><h3 id="Mary-在开发她的功能"><a href="#Mary-在开发她的功能" class="headerlink" title="Mary 在开发她的功能"></a>Mary 在开发她的功能</h3><p>同时，Mary 在她自己的本地仓库用相同的编辑&#x2F;缓存&#x2F;提交流程开发她的功能。和 John 一样，她不需要关心中央仓库的进展，她也 <em>完全</em> 不关心 John 在他自己仓库中做的事，因为所有本地仓库都是私有的。</p><h3 id="John-发布了他的功能"><a href="#John-发布了他的功能" class="headerlink" title="John 发布了他的功能"></a>John 发布了他的功能</h3><p>一旦 John 完成了他的功能，他应该将本地提交发布到中央仓库，这样其他项目成员就可以访问了。他可以使用<a href="https://github.com/geeeeeeeeek/git-recipes/wiki/3.2-%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5#git-push"><code>git push</code></a>命令，就像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>记住，<code>origin</code> 是 John 克隆中央仓库时指向它的远程连接。<code>master</code> 参数告诉 Git 试着将 <code>origin</code> 的 <code>master</code> 分支变得和他本地的 <code>master</code> 分支一样。中央仓库在 John 克隆之后还没有进展，因此这个推送如他所愿，没有产生冲突。</p><h3 id="Mary-as试图发布她的功能"><a href="#Mary-as试图发布她的功能" class="headerlink" title="Mary as试图发布她的功能"></a>Mary as试图发布她的功能</h3><p>John 已经成功地将他的更改发布到了中央仓库上，看看当 Mary 试着将她的功能推送到上面时会发生什么。她可以使用同一个推送命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>但是，她的本地历史和中央仓库已经分叉了，Git 会拒绝这个请求，并显示一段冗长的错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to &#x27;/path/to/repo.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Merge the remote changes (e.g. &#x27;git pull&#x27;)</span><br><span class="line">hint: before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure><p>Git 防止 Mary 覆盖官方的修改。她需要将 John 的更新拉取到她的仓库，和她的本地修改整合后，然后重试。</p><h3 id="Mary在John的提交之上rebase"><a href="#Mary在John的提交之上rebase" class="headerlink" title="Mary在John的提交之上rebase"></a>Mary在John的提交之上rebase</h3><p>Mary 可以使用 <code>git pull</code> 来将上游修改并入她的仓库。这个命令和 <code>svn update</code> 很像——它拉取整个上游提交历史到Mary的本地仓库，并和她的本地提交一起整合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p><code>--rebase</code> 选项告诉 Git，在同步了中央仓库的修改之后，将 Mary 所有的提交移到 <code>master</code> 分支的顶端</p><p>如果你忽略这个选项拉取同样会成功，只不过你每次和中央仓库同步时都会多出一个「合并提交」。在这种工作流中，rebase 和生成一个合并提交相比，总是一个更好的选择。</p><h3 id="Mary-解决了合并冲突"><a href="#Mary-解决了合并冲突" class="headerlink" title="Mary 解决了合并冲突"></a>Mary 解决了合并冲突</h3><p>Rebase 的工作是将每个本地提交一个个转移到更新后的 <code>master</code> 分支。也就是说，你可以一个个提交分别解决合并冲突，而不是在一个庞大的合并提交中解决。它会让你的每个提交保持专注，并获得一个干净的项目历史。另一方面，你更容易发现bug是在哪引入的，如果有必要的话，用最小的代价回滚这些修改。</p><p>如果 Mary 和 John 开发的功能没有关联，rebase的过程不太可能出现冲突。但如果出现冲突时，Git 在当前提交会暂停 rebase，输出下面的信息，和一些相关的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFLICT (content): Merge conflict in &lt;some-file&gt;</span><br></pre></td></tr></table></figure><p>Git 的优点在于 <em>每个人</em> 都能解决他们自己的合并冲突。在这个例子中，Mary 只需运行一下 <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/2.4-%E6%A3%80%E6%9F%A5%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%81#git-status"><code>git status</code></a> 就可以发现问题是什么。冲突的文件会出现在未合并路径中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Unmerged paths:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git reset HEAD &lt;some-file&gt;...&quot;</span> to unstage)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(use <span class="string">&quot;git add/rm &lt;some-file&gt;...&quot;</span> as appropriate to mark resolution)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># both modified: &lt;some-file&gt;</span></span></span><br></pre></td></tr></table></figure><p>接下来，修改这些文件。如果她对结果满意了，和往常一样缓存这些文件，然后让 <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/2.7-%E9%87%8D%E5%86%99%E9%A1%B9%E7%9B%AE%E5%8E%86%E5%8F%B2#git-rebase"><code>git rebase</code></a> 完成接下来的工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><p>就是这样。Git 会继续检查下个提交，对冲突的提交重复这个流程。</p><p>如果你这时候发现不知道自己做了什么，不要惊慌。只要运行下面的命令，你就会回到开始之前的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><h3 id="Mary-成功发布了她的分支"><a href="#Mary-成功发布了她的分支" class="headerlink" title="Mary 成功发布了她的分支"></a>Mary 成功发布了她的分支</h3><p>在她和中央仓库同步之后，Mary 可以成功地发布她的修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="接下来该怎么做"><a href="#接下来该怎么做" class="headerlink" title="接下来该怎么做"></a>接下来该怎么做</h2><p>正如你所见，使用一丢丢 Git 命令来复制一套传统的 Subversion 开发环境也是可行的。这对于从 SVN 转变而来的团队来说很棒，但这样没有利用到 Git 分布式的本质。</p><p>如果你的团队已经习惯了中心化的工作流，但希望提高协作效率，那么探索 <code>Feature 分支工作流</code> 的好处是完全值当的。每个功能在专门的独立分支上进行，在代码并入官方项目之前就可以启动围绕新修改的深度讨论。</p><h2 id="Feature-分支的工作流"><a href="#Feature-分支的工作流" class="headerlink" title="Feature 分支的工作流"></a>Feature 分支的工作流</h2><p>一旦你掌握了 <code>中心化工作流的使用方法</code>，在你的开发流程中添加功能分支是一个简单的方式，来促进协作和开发者之间的交流。这种封装使得多个开发者专注自己的功能而不会打扰主代码库。它还保证 <code>master</code> 分支永远不会包含损坏的代码，给持续集成环境带来了是很大的好处。</p><p>封装功能的开发使得 <code>Pull Request</code> 的使用成为可能，用来启动围绕一个分支的讨论。它给了其他开发者在功能并入主项目之前参与决策的机会。或者，如果你开发功能时卡在一半，你可以发起一个 Pull Request，向同事寻求建议。重点是，Pull Request 使得你的团队在评论其他人的工作时变得非常简单。</p><h2 id="如何工作-1"><a href="#如何工作-1" class="headerlink" title="如何工作"></a>如何工作</h2><p>Feature 分支工作流同样使用中央仓库，<code>master</code> 同样代表官方的项目历史。但是，与其直接提交在本地的 <code>master</code> 分支，开发者每次进行新的工作时创建一个新的分支。Feature 分支应该包含描述性的名称，比如 <code>animated-menu-items</code>（菜单项动画）或 <code>issue-#1061</code>。每个分支都应该有一个清晰、高度集中的目的。</p><p>Git 在技术上无法区别 <code>master</code> 和功能分支，所以开发者可以在 feature 分支上编辑、缓存、提交，就和中心化工作流中一样。</p><p>此外，feature 分支可以（也应该）被推送到中央仓库。这使得你和其他开发者共享这个功能，而又不改变官方代码。既然 <code>master</code> 只是一个“特殊”的分支，在中央仓库中储存多个 feature 分支不会引出什么问题。当然了，这也是备份每个开发者本地提交的好办法。</p><h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h3><p>除了隔离功能开发之外，分支使得通过 <code>Pull Request</code> 讨论修改成为可能。一旦有人完成了一个功能，他们不会立即将它并入<code>master</code>。他们将 feature 分支推送到中央服务器上，发布一个 Pull Request，请求将他们的修改并入 <code>master</code>。这给了其他开发者在修改并入主代码库之前审查的机会。</p><p>代码审查是 Pull Request 的主要好处，但他们事实上被设计为成为讨论代码的一般场所。你可以把 Pull Request 看作是专注某个分支的讨论版。也就是说他们可以用于开发流程之前。比如，一个开发者在某个功能上需要帮助，他只需发起一个 Pull Request。感兴趣的小伙伴会自动收到通知，看到相关提交中的问题。</p><p>一旦 Pull Request 被接受了，发布功能的行为和中心化的工作流是一样的。首先，确定你本地的 <code>master</code> 和上游的 <code>master</code> 已经同步。然后，将  feature分支并入 <code>master</code>，将更新的 <code>master</code> 推送回中央仓库。</p><h2 id="栗子-20"><a href="#栗子-20" class="headerlink" title="栗子"></a>栗子</h2><p>下面这🌰演示了代码审查使用到的 Pull Request，但记住 Pull Request 有多种用途。</p><h3 id="Mary-开始了一个新功能"><a href="#Mary-开始了一个新功能" class="headerlink" title="Mary 开始了一个新功能"></a>Mary 开始了一个新功能</h3><p>在她开始开发一个功能之前，Mary 需要一个独立的分支。她可以用下面的命令<code>创建新分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b marys-feature master</span><br></pre></td></tr></table></figure><p>一个基于 <code>master</code>、名为 <code>marys-feature</code> 的分支将会被checkout，<code>-b</code> 标记告诉Git在分支不存在时创建它。在这个分支上，Mary和往常一样编辑、缓存、提交更改，用足够多的提交来构建这个功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h3 id="Mary-去吃饭了"><a href="#Mary-去吃饭了" class="headerlink" title="Mary 去吃饭了"></a>Mary 去吃饭了</h3><p>Mary 在早上给她的功能添加了一些提交。在她去吃午饭前，<code>将她的分支推送到中央仓库</code>是个不错的想法。这是一种方便的备份，但如果Mary和其他开发者一起协作，他们也可以看到她的初始提交了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin marys-feature</span><br></pre></td></tr></table></figure><p>这个命令将 <code>marys-feature</code> 推送到中央仓库（<code>origin</code>），<code>-u</code> 标记将它添加为远程跟踪的分支。在设置完跟踪的分支之后，Mary 调用不带任何参数的 <code>git push</code> 来推送她的功能。</p><h3 id="Mary-完成了她的工作"><a href="#Mary-完成了她的工作" class="headerlink" title="Mary 完成了她的工作"></a>Mary 完成了她的工作</h3><p>当 Mary 吃完午饭回来，她完成了她的功能。在 并入 <code>master</code> 之前，她需要发布一个 Pull Request，让其他的团队成员知道她所做的工作。但首先，她应该保证中央仓库包含了她最新的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>然后，她在她的 Git 界面上发起了一个 Pull Request，请求将 <code>marys-feature</code> 合并进 <code>master</code>，团队成员会收到自动的通知。Pull Request 的好处是，评论显示在相关的提交正下方，方便讨论特定的修改。</p><h3 id="Bill-收到了-Pull-Request"><a href="#Bill-收到了-Pull-Request" class="headerlink" title="Bill 收到了 Pull Request"></a>Bill 收到了 Pull Request</h3><p>Bill 收到了 Pull Request，并且查看了 <code>marys-feature</code>。他决定在并入官方项目之前做一些小修改，通过 Pull Request 和 Mary 进行了沟通。</p><h3 id="Mary-作了修改"><a href="#Mary-作了修改" class="headerlink" title="Mary 作了修改"></a>Mary 作了修改</h3><p>为了做这些更改，Mary 重复了之前创建功能时相同的流程，她编辑、缓存、提交、将更新推送到中央仓库。她所有的活动显示在 Pull Request 中，Bill 可以一直评论。</p><p>如果 Bill 想要的话，也可以将 <code>marys-feature</code> 分支 pull 到他自己的本地仓库，继续工作。后续的任何提交都会显示在 Pull Request 上。</p><h3 id="Mary-发布了她的功能"><a href="#Mary-发布了她的功能" class="headerlink" title="Mary 发布了她的功能"></a>Mary 发布了她的功能</h3><p>一旦 Bill 准备接受这个 Pull Request，某个人（Bill 或者 Mary 都可）需要将功能并入稳定的项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git pull origin marys-feature</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>首先，不管是谁在执行合并，都要保证他们的 <code>master</code> 分支是最新的。然后，运行 <code>git pull origin marys-feature</code> 合并中央仓库的 <code>marys-feature</code> 副本。你也可以使用简单的 <code>git merge marys-feature</code>，但之前的命令保证你拉取下来的一定是功能分支最新的版本。最后，更新的 <code>master</code> 需要被推送回 <code>origin</code>。</p><p>这个过程导致了一个合并提交。一些开发者喜欢它，因为它是功能和其余代码合并的标志。但，如果你希望得到线性的历史，你可以在执行 merge 之前将功能 rebase 到 <code>master</code> 分支的顶端，产生一个快速向前的合并。</p><p>一些界面会自动化接受 Pull Request 的流程，只需点击一下「Merge Pull Request」。如果你的没有的话，它至少在合并之后应该可以自动地关闭 Pull Request。</p><h3 id="同时，John-以同样的方式工作着"><a href="#同时，John-以同样的方式工作着" class="headerlink" title="同时，John 以同样的方式工作着"></a>同时，John 以同样的方式工作着</h3><p>Mary 和 Bill 一起开发 <code>marys-feature</code>，在 Pull Request 上讨论的同时，John 还在开发他自己的  feature分支。通过将功能用不同分支隔离开来，每个人可以独立地工作，但很容易和其他开发者共享修改。</p><h2 id="接下来该怎么做-1"><a href="#接下来该怎么做-1" class="headerlink" title="接下来该怎么做"></a>接下来该怎么做</h2><p>为了彻底了解 GitHub 上的功能分支，你应该查看<code>使用分支一章</code>。现在，你应该已经看到了功能分支极大地增强了<code>中心化工作流</code>中单一 <code>master</code> 分支的作用。除此之外，功能分支还便利了 Pull Request 的使用，在版本控制界面上直接讨论特定的提交。GitFlow 工作流是管理功能开发、发布准备、维护的常见模式。</p><h2 id="GitFlow-工作流"><a href="#GitFlow-工作流" class="headerlink" title="GitFlow 工作流"></a>GitFlow 工作流</h2><p>下面的 [GitFlow 工作流]源于 <a href="http://nvie.com/">nvie</a> 网站上的作者 Vincent Driessen。</p><p>GitFlow 工作流围绕项目发布定义了一个严格的分支模型。有些地方比[功能分支工作流]更复杂，为管理大型项目提供了鲁棒的框架。</p><p>和功能分支工作流相比，这种工作流没有增加任何新的概念或命令。它给不同的分支指定了特定的角色，定义它们应该如何、什么时候交流。除了功能分支之外，它还为准备发布、维护发布、记录发布分别使用了单独的分支。当然，你还能享受到功能分支工作流带来的所有好处：Pull Request、隔离实验和更高效的协作。</p><h2 id="如何工作-2"><a href="#如何工作-2" class="headerlink" title="如何工作"></a>如何工作</h2><p>GitFlow 工作流仍然使用中央仓库作为开发者沟通的中心。和[其他工作流]一样，开发者在本地工作，将分支推送到中央仓库。唯一的区别在于项目的分支结构。</p><h3 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h3><p>和单独的 <code>master</code> 分支不同，这种工作流使用两个分支来记录项目历史。<code>master</code> 分支储存官方发布历史，<code>develop</code> 分支用来整合功能分支。同时，这还方便了在 <code>master</code> 分支上给所有提交打上版本号标签。</p><p>工作流剩下的部分围绕这两个分支的差别展开。</p><h3 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h3><p>每个新功能都放置在自己的分支中，可以[在备份&#x2F;协作时推送到中央仓库]。但是，与其合并到 <code>master</code>，功能分支将开发分支作为父分支。当一个功能完成时，它将被[合并回 <code>develop</code>。功能永远不应该直接在 <code>master</code> 上交互。</p><p>注意，功能分支加上 <code>develop</code> 分支就是我们之前所说的功能分支工作流。但是，GitFlow 工作流不止于此。</p><h3 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h3><p>一旦  <code>develop</code>分支的新功能足够发布（或者预先确定的发布日期即将到来），你可以从 <code>develop</code> 分支 fork 一个发布分支。这个分支的创建开始了下个发布周期，只有和发布相关的任务应该在这个分支进行，如修复 bug、生成文档等。一旦准备好了发布，发布分支将合并进 <code>master</code>，打上版本号的标签。另外，它也应该合并回 <code>develop</code>，后者可能在发布启动之后有了新的进展。</p><p>使用一个专门的分支来准备发布确保一个团队完善当前的发布，其他团队可以继续开发下一个发布的功能。它还建立了清晰的开发阶段（比如说，「这周我们准备 4.0 版本的发布」，而我们在仓库的结构中也能看到这个阶段）。</p><p>通常我们约定：</p><ul><li>从 <code>develop</code> 创建分支</li><li>合并进 <code>master</code> 分支</li><li>命名规范 <code>release-* or release/*</code></li></ul><h3 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h3><p>维护或者「紧急修复」分支用来快速给产品的发布打上补丁。这是唯一可以从 <code>master</code> 上 fork 的分支。一旦修复完成了，它应该被并入 <code>master</code> 和 <code>develop</code> 分支（或者当前的发布分支），<code>master</code> 应该打上更新的版本号的标签。</p><p>有一个专门的 bug 修复开发线使得你的团队能够处理 issues，而不打断其他工作流或是要等到下一个发布周期。你可以将维护分支看作在 <code>master</code> 分支上工作的临时发布分支。</p><h2 id="栗子-21"><a href="#栗子-21" class="headerlink" title="栗子"></a>栗子</h2><p>下面的栗子演示了这种工作流如何用来管理发布周期。假设你已经创建了中央仓库。</p><h3 id="创建一个开发分支"><a href="#创建一个开发分支" class="headerlink" title="创建一个开发分支"></a>创建一个开发分支</h3><p>你要做的第一步是为默认的 <code>master</code> 分支创建一个互补的 <code>develop</code> 分支。最简单的办法是[在本地创建一个空的 develop 分支]，将它推送到服务器上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure><p>这个分支将会包含项目中所有的历史，而 <code>master</code> 将包含不完全的版本。其他开发者应该[将中央仓库克隆到本地]，创建一个分支来追踪 develop 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://user@host/path/to/repo.git</span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure><p>现在所有人都有了一份历史分支的本地副本。</p><h3 id="Mary-和-John-开始了新功能"><a href="#Mary-和-John-开始了新功能" class="headerlink" title="Mary 和 John 开始了新功能"></a>Mary 和 John 开始了新功能</h3><p>我们的栗子从 John 和 Mary 在不同分支上工作开始。他们都要为自己的功能创建单独的分支。[他们的功能分支都应该基于<code>develop</code>]，而不是 <code>master</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b some-feature develop</span><br></pre></td></tr></table></figure><p>他们都使用「编辑、缓存、提交」的一般约定来向功能分支添加提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h3 id="Mary-完成了她的功能"><a href="#Mary-完成了她的功能" class="headerlink" title="Mary 完成了她的功能"></a>Mary 完成了她的功能</h3><p>在添加了一些提交之后，Mary 确信她的功能以及准备好了。如果她的团队使用 Pull Request，现在正是发起 Pull Request 的好时候，请求将她的功能并入 <code>develop</code> 分支。否则，她可以向下面一样，将它并入本地的 <code>develop</code> 分支，推送到中央仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge some-feature</span><br><span class="line">git push</span><br><span class="line">git branch -d some-feature</span><br></pre></td></tr></table></figure><p>第一个命令在尝试并入功能分支之前确保 <code>develop</code> 分支已是最新。注意，功能绝不该被直接并入 <code>master</code>。冲突的处理方式和[中心化工作流]相同。</p><h3 id="Mary-开始准备发布"><a href="#Mary-开始准备发布" class="headerlink" title="Mary 开始准备发布"></a>Mary 开始准备发布</h3><p>当 John 仍然在他的功能分支上工作时，Mary s开始准备项目的第一个官方发布。和开发功能一样，她新建了一个分支来封装发布的准备工作。这也正是发布的版本号创建的一步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-0.1 develop</span><br></pre></td></tr></table></figure><p>这个分支用来整理提交，充分测试，更新文档，为即将到来的发布做各种准备。它就像是一个专门用来完善发布的功能分支。</p><p>一旦 Mary 创建了这个分支，推送到中央仓库，这次发布的功能便被锁定了。不在 <code>develop</code> 分支中的功能将被推迟到下个发布周期。</p><h3 id="Mary完成了她的发布"><a href="#Mary完成了她的发布" class="headerlink" title="Mary完成了她的发布"></a>Mary完成了她的发布</h3><p>一旦发布准备稳妥，Mary 将它并入 <code>master</code> 和 <code>develop</code>，然后删除发布分支。合并回 <code>develop</code> 很重要，因为可能已经有关键的更新添加到了发布分支上，而开发新功能需要用到它们。同样的，如果 Mary 的团队重视代码审查，现在将是发起 Pull Request 的完美时机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git checkout develop</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git branch -d release-0.1</span><br></pre></td></tr></table></figure><p>发布分支是功能开发（<code>develop</code>）和公开发布（<code>master</code>）之间的过渡阶段。不论什么时候将提交并入 <code>master</code> 时，你应该为提交打上方便引用的标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -a 0.1 -m &quot;Initial public release&quot; master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>Git 提供了许多钩子，即仓库中特定事件发生时被执行的脚本。当你向中央仓库推送 <code>master</code> 分支或者标签时，你可以配置一个钩子来自动化构建公开发布。</p><h3 id="终端用户发现了一个-bug"><a href="#终端用户发现了一个-bug" class="headerlink" title="终端用户发现了一个 bug"></a>终端用户发现了一个 bug</h3><p>正式发布之后，Mary 回过头来和 John 一起为下一个发布开发功能。这时，一个终端用户开了一个 issue 抱怨说当前发布中存在一个 bug。为了解决这个 bug，Mary（或 John）从 <code>master</code> 创建了一个维护分支，用几个提交修复这个 issue，然后直接合并回 <code>master</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b issue-#001 master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Fix the bug</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge issue-#001</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>和发布分支一样，维护分支包含了 <code>develop</code> 中需要的重要更新，因此 Mary 同样需要执行这个合并。接下来，她可以[删除这个分支]了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge issue-#001</span><br><span class="line">git push</span><br><span class="line">git branch -d issue-#001</span><br></pre></td></tr></table></figure><h2 id="接下来该怎么做-2"><a href="#接下来该怎么做-2" class="headerlink" title="接下来该怎么做"></a>接下来该怎么做</h2><p>现在，希望你已经很熟悉[中心化的工作流]、[功能分支工作流]和 GitFlow 工作流。你应该已经可以抓住本地仓库、推送&#x2F;拉取模式，和 Git 鲁棒的分支和合并模型的无限潜力。</p><p>请记住，教程中呈现的工作流只是可行的实践——而非工作中使用 Git 的金科玉律。因此，尽情地取其精华，去其糟粕吧。不变的是要让 Git 为你所用，而不是相反。</p><h2 id="Fork-工作流"><a href="#Fork-工作流" class="headerlink" title="Fork 工作流"></a>Fork 工作流</h2><p>Fork 工作流和教程中讨论的其它工作流截然不同。与其使用唯一的服务端仓库作为「中央」代码库，它给予 <em>每个</em> 开发者一个服务端仓库。也就是说每个贡献者都有两个 Git 仓库，而不是一个：一个私有的本地仓库和一个公开的服务端仓库。</p><p>Fork 工作流的主要优点在于贡献可以轻易地整合进项目，而不需要每个人都推送到单一的中央仓库。开发者推送到他们 <em>自己的</em> 服务端仓库，只有项目管理者可以推送到官方仓库。这使得管理者可以接受任何开发者的提交，却不需要给他们中央仓库的权限。</p><p>结论是，这种分布式的工作流为大型、组织性强的团队（包括不可信的第三方）提供了安全的协作方式。它同时也是开源项目理想的工作流。</p><h2 id="如何工作-3"><a href="#如何工作-3" class="headerlink" title="如何工作"></a>如何工作</h2><p>和其它 Git 工作流一样，Fork 工作流以一个储存在服务端的官方公开项目开场。但新的开发者想参与项目时，他们不直接克隆官方项目。</p><p>取而代之地，他们 fork 一份官方项目，在服务端创建一份副本。这份新建的副本作为他们私有的公开仓库——没有其他开发者可以在上面推送，但他们可以从上面拉取修改（在后面我们会讨论为什么这一点很重要）。在他们创建了服务端副本之后，开发者执行 <code>git clone</code> 操作，在他们的本地机器上复制一份。这是他们私有的开发环境，正如其他工作流中一样。</p><p>当他们准备好发布本地提交时，他们将提交推送到自己的公开仓库——而非官方仓库。然后，他们向主仓库发起一个 Pull Request，让项目维护者知道一个更新做好了合并的准备。如果贡献的代码有什么问题的话，Pull Request 可以作为一个方便的讨论版。</p><p>我为了将功能并入官方代码库，维护者将贡献者的修改拉取到他们的本地仓库，确保修改不会破坏项目，将它[合并到本地的 master 分支，然后将 <code>master</code> 分支[推送]到服务端的官方仓库。贡献现在已是项目的一部分，其他开发者应该从官方仓库拉取并同步他们的本地仓库。</p><h3 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h3><p>「官方」仓库这个概念在 Fork 工作流中只是一个约定，理解这一点很重要。从技术的角度，Git 并看不出每个开发者和官方的公开仓库有什么区别。事实上，官方仓库唯一官方的原因是，它是项目维护者的仓库。</p><h3 id="Fork-工作流中的分支"><a href="#Fork-工作流中的分支" class="headerlink" title="Fork 工作流中的分支"></a>Fork 工作流中的分支</h3><p>所有这些个人的公开仓库只是一个在开发者之间共享分支的约定。每个人仍然可以使用分支来隔离功能，就像在[功能分支工作流] 和 [GitFlow 工作流中]一样。唯一的区别在于这些分支是如何开始的。在 Fork 工作流中，它们从另一个开发者的本地仓库拉取而来，而在功能分支和 GitFlow 分支它们被推送到官方仓库。</p><h2 id="栗子-22"><a href="#栗子-22" class="headerlink" title="栗子"></a>栗子</h2><h3 id="项目维护者初始化了中央仓库"><a href="#项目维护者初始化了中央仓库" class="headerlink" title="项目维护者初始化了中央仓库"></a>项目维护者初始化了中央仓库</h3><p>和任何基于 Git 的项目一样，第一步是在服务端创建一个可以被所有项目成员访问到的官方仓库。一般来说，这个仓库同时还是项目维护者的公开仓库。</p><p>[公开的仓库应该永远是裸的]，不管它们是否代表官方代码库。所以项目维护者应该运行下面这样的命令来设置官方仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host</span><br><span class="line">git init --bare /path/to/repo.git</span><br></pre></td></tr></table></figure><p>GitHub 同时提供了一个图形化界面来替代上面的操作。这和教程中其它工作流设置中央仓库的流程完全一致。如果有必要的话，项目维护者应该将已有的代码库推送到这个仓库中。</p><h3 id="开发者-fork-仓库"><a href="#开发者-fork-仓库" class="headerlink" title="开发者 fork 仓库"></a>开发者 fork 仓库</h3><p>接下来，所有开发者需要 fork 官方仓库。你可以用 SSH 到服务器，运行 <code>git clone</code> 将它复制到服务器的另一个地址—— fork 其实只是服务端的 clone。但同样地，GitHub上开发者只需点一点按钮就可以 fork 仓库。</p><p>在这步之后，每个开发者应该都有了自己的服务端仓库。像官方仓库一样，所有这些仓库都应该是裸仓库。</p><h3 id="开发者将-fork-的仓库克隆到本地"><a href="#开发者将-fork-的仓库克隆到本地" class="headerlink" title="开发者将 fork 的仓库克隆到本地"></a>开发者将 fork 的仓库克隆到本地</h3><p>接下来开发者需要克隆他们自己的公开仓库。他们可以用熟悉的 <code>git clone</code> 命令来完成这一步。</p><p>我们的栗子假设使用他们使用 GitHub 来托管仓库。记住，在这种情况下，每个开发者应该有他们自己的 GitHub 账号，应该用下面的命令克隆服务端仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://user@github.com/user/repo.git</span><br></pre></td></tr></table></figure><p>而教程中的其他工作流使用单一的 <code>origin</code> 远程连接，指向中央仓库，Fork 工作流需要两个远程连接，一个是中央仓库，另一个是开发者个人的服务端仓库。你可以给这些远端取任何名字，约定的做法是将 <code>origin</code> 作为你 fork 后的仓库的远端（运行 <code>git clone</code> 是会自动创建）和 <code>upstream</code> 作为官方项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/maintainer/repo</span><br></pre></td></tr></table></figure><p>你需要使用上面的命令来创建上游仓库的远程连接。它使得你轻易地保持本地仓库和官方仓库的进展同步。注意如果你的上游仓库开启了认证（比如它没有开源），你需要提供一个用户名，就像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://user@bitbucket.org/maintainer/repo.git</span><br></pre></td></tr></table></figure><p>它需要用户从官方代码库克隆或拉取之前提供有效的密码。</p><h3 id="开发者进行自己的开发"><a href="#开发者进行自己的开发" class="headerlink" title="开发者进行自己的开发"></a>开发者进行自己的开发</h3><p>在他们刚克隆的本地仓库中，开发者可以编辑代码、[提交更改]，和其它分支中一样[创建分支]：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b some-feature</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑代码</span></span><br><span class="line">git commit -a -m &quot;Add first draft of some feature&quot;</span><br></pre></td></tr></table></figure><p>他们所有的更改在推送到公开仓库之前都是完全私有的。而且，如果官方项目已经向前进展了，他们可以用 <code>git pull</code> 获取新的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream master</span><br></pre></td></tr></table></figure><p>因为开发者应该在专门的功能分支开发，这一般会[产生一个快速向前的合并]</p><h3 id="开发者发布他们的功能"><a href="#开发者发布他们的功能" class="headerlink" title="开发者发布他们的功能"></a>开发者发布他们的功能</h3><p>一旦开发者准备好共享他们的新功能，他们需要做两件事情。第一，他们必须将贡献的代码推送到自己的公开仓库，让其他开发者能够访问到。他们的 <code>origin</code> 远端应该已经设置好了，所以他们只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-branch</span><br></pre></td></tr></table></figure><p>这和其他工作流不同之处在于，<code>origin</code> 远端指向开发者个人的服务端仓库，而不是主代码库。</p><p>第二，他们需要通知项目维护者，他们想要将功能并入官方代码库。GitHub 提供了一个「New Pull Request」按钮，跳转到一个网页，让你指明想要并入主仓库的分支。一般来说，你希望将功能分支并入上游远端的 <code>master</code> 分支。</p><h3 id="项目维护者整合他们的功能"><a href="#项目维护者整合他们的功能" class="headerlink" title="项目维护者整合他们的功能"></a>项目维护者整合他们的功能</h3><p>当项目维护者收到 Pull Request 时，他们的工作是决定是否将它并入官方的代码库。他们可以使用下面两种方式之一：</p><ol><li>直接检查 Pull Request 中检查代码</li><li>将代码拉取到本地仓库然后手动合并</li></ol><p>第一个选项更简单，让维护者查看修改前后的差异，在上面评论，然后通过图形界面执行合并。然而，如果 Pull Request 会导致合并冲突，第二个选项就有了必要。在这个情况中，维护者需要从开发者的服务端仓库 fetch 功能分支，合并到他们本地的 <code>master</code> 分支，然后解决冲突：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch https://bitbucket.org/user/repo feature-branch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查修改</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure><p>一旦修改被整合进本地的 <code>master</code>，维护者需要将它推送到服务器上的官方仓库，这样其他开发者也可以访问它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>记住，维护者的 <code>origin</code> 指向他们的公开仓库，也就是项目的官方代码库。开发者的贡献现在完全并入了项目。</p><h3 id="开发者和中央仓库保持同步"><a href="#开发者和中央仓库保持同步" class="headerlink" title="开发者和中央仓库保持同步"></a>开发者和中央仓库保持同步</h3><p>因为主代码库已经取得了新的进展，其他开发者应该和官方仓库同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream master</span><br></pre></td></tr></table></figure><h2 id="接下来该怎么做-3"><a href="#接下来该怎么做-3" class="headerlink" title="接下来该怎么做"></a>接下来该怎么做</h2><p>如果你从 SVN 迁移而来，Fork 工作流看上去是一个比较大的转变。但不要害怕——它只是在 Feature 分支工作流之上引入了一层抽象。贡献的代码发布到开发者在服务端自己的仓库，而不是在唯一的中央仓库中直接共享分支。</p><p>这篇文章解释了一次代码贡献是如何从一个开发者流入官方的 <code>master</code> 分支的，但相同的方法可以用在将代码贡献整合进任何仓库。比如，如果你团队的一部分成员在一个特定功能上协作，他们可以用自己约定的行为共享修改——而不改变主仓库。</p><p>这使得 Fork 工作流对于松散的团队来说是个非常强大的工具。任何开发者都可以轻而易举地和其他开发者共享修改，任何分支都能高效地并入主代码库。</p><hr><h1 id="3-1-Git图解"><a href="#3-1-Git图解" class="headerlink" title="3.1 Git图解"></a>3.1 Git图解</h1><p><img src="/img/git1.png"></p><p>此页图解 git 中的最常用命令。如果你稍微理解 git 的工作原理，这篇文章能够让你理解的更透彻。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>上面的四条命令在工作目录、stage 缓存(也叫做索引)和 commit 历史之间复制文件。</p><ul><li><code>git add files</code> 把工作目录中的文件加入 stage 缓存</li><li><code>git commit</code> 把 stage 缓存生成一次 commit，并加入 commit 历史</li><li><code>git reset -- files</code> 撤销最后一次 <code>git add files</code>，你也可以用 <code>git reset</code> 撤销所有 stage 缓存文件</li><li><code>git checkout -- files</code> 把文件从 stage 缓存复制到工作目录，用来丢弃本地修改</li></ul><p>你可以用 <code>git reset -p</code>、<code>git checkout -p</code> 或 <code>git add -p</code> 进入交互模式，也可以跳过 stage 缓存直接从  commit历史取出文件或者直接提交代码。</p><ul><li><code>git commit -a </code> 相当于运行 <code>git add</code> 把所有当前目录下的文件加入 stage 缓存再运行 <code>git commit</code>。</li><li><code>git commit files</code> 进行一次包含最后一次提交加上工作目录中文件快照的提交，并且文件被添加到 stage 缓存。</li><li><code>git checkout HEAD -- files</code> 回滚到复制最后一次提交。</li></ul><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><h3 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h3><p>有许多种方法查看两次提交之间的变动，下面是其中一些例子。</p><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><p>提交时，Git 用 stage 缓存中的文件创建一个新的提交，并把此时的节点设为父节点。然后把当前分支指向新的提交节点。当前分支是 <code>_master_</code>。</p><p>在运行命令之前，<code>_master_</code> 指向 <code>_ed489_</code>，提交后，<code>_master_</code> 指向新的节点<code>_f0cec_</code> 并以 <code>_ed489_</code> 作为父节点。</p><p>即便当前分支是某次提交的祖父节点，Git 会同样操作。</p><p>这样，<code>_maint_ </code>分支就不再是 <code>_master_</code> 分支的祖父节点。此时，[merge] 或者 [rebase] 是必须的。</p><p>如果想更改一次提交，使用 <code>git commit --amend</code>。Git 会使用与当前提交相同的父节点进行一次新提交，旧的提交会被取消。</p><p>另一个例子是[分离HEAD提交]，在后面的章节中介绍。</p><h3 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h3><p><code>git checkout</code> 命令用于从历史提交（或者 stage 缓存）中拷贝文件到工作目录，也可用于切换分支。</p><p>当给定某个文件名（或者打开 <code>-p</code> 选项，或者文件名和-p选项同时打开）时，Git 会从指定的提交中拷贝文件到 stage 缓存和工作目录。比如，<code>git checkout HEAD~ foo.c</code> 会将提交节点 <code>_HEAD~_</code>（即当前提交节点的父节点）中的 <code>foo.c</code> 复制到工作目录并且加到 stage 缓存中。如果命令中没有指定提交节点，则会从 stage 缓存中拷贝内容。注意当前分支不会发生变化。</p><p>当不指定文件名，而是给出一个（本地）分支时，那么 <code>_HEAD_</code> 标识会移动到那个分支（也就是说，我们「切换」到那个分支了），然后 stage 缓存和工作目录中的内容会和 <code>_HEAD_</code> 对应的提交节点一致。新提交节点中的所有文件都会被复制（到 stage 缓存和工作目录中）；只存在于老的提交节点（<code>ed489</code>）中的文件会被删除；不属于上述两者的文件会被忽略，不受影响。</p><p>如果既没有指定文件名，也没有指定分支名，而是一个标签、远程分支、SHA-1 值或者是像 <code>_master~3_</code> 类似的东西，就得到一个匿名分支，称作 <code>_detached HEAD_</code>（被分离的 <code>_HEAD_</code> 标识）。这样可以很方便地在历史版本之间互相切换。比如说你想要编译 1.6.6.1 版本的 Git，你可以运行 <code>git checkout v1.6.6.1</code>（这是一个标签，而非分支名），编译，安装，然后切换回另一个分支，比如说 <code>git checkout master</code>。然而，当提交操作涉及到「分离的 HEAD」时，其行为会略有不同，详情见在下面。</p><h3 id="HEAD-标识处于分离状态时的提交操作"><a href="#HEAD-标识处于分离状态时的提交操作" class="headerlink" title="HEAD 标识处于分离状态时的提交操作"></a>HEAD 标识处于分离状态时的提交操作</h3><p>当 <code>_HEAD_</code> 处于分离状态（不依附于任一分支）时，提交操作可以正常进行，但是不会更新任何已命名的分支。你可以认为这是在更新一个匿名分支。</p><p>一旦此后你切换到别的分支，比如说 <code>_master_</code>，那么这个提交节点（可能）再也不会被引用到，然后就会被丢弃掉了。注意这个命令之后就不会有东西引用 <code>_2eecb_</code>。</p><p>但是，如果你想保存这个状态，可以用命令 <code>git checkout -b name</code> 来创建一个新的分支。</p><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><p><code>git reset</code> 命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。也用来在从历史commit历史中复制文件到索引，而不动工作目录。</p><p>如果不给选项，那么当前分支指向到那个提交。如果用 <code>--hard</code> 选项，那么工作目录也更新，如果用 <code>--soft</code> 选项，那么都不变。</p><p>如果没有给出提交点的版本号，那么默认用 <code>_HEAD_</code>。这样，分支指向不变，但是索引会回滚到最后一次提交，如果用 <code>--hard</code> 选项，工作目录也同样。</p><p>如果给了文件名(或者 <code>-p</code> 选项), 那么工作效果和带文件名的<a href="#checkout">checkout</a>差不多，除了索引被更新。</p><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p><code>git merge</code> 命令把不同分支合并起来。合并前，索引必须和当前提交相同。如果另一个分支是当前提交的祖父节点，那么合并命令将什么也不做。</p><p>另一种情况是如果当前提交是另一个分支的祖父节点，就导致 <code>_fast-forward_</code> 合并。指向只是简单的移动，并生成一个新的提交。</p><p>否则就是一次真正的合并。默认把当前提交（<code>_ed489_</code> 如下所示）和另一个提交（<code>_33104_</code>）以及他们的共同祖父节点（<code>_b325c_</code>）进行一次<code>三方合并</code>。结果是先保存当前目录和索引，然后和父节点 <code>_33104_</code> 一起做一次新提交。</p><h3 id="Cherry-Pick"><a href="#Cherry-Pick" class="headerlink" title="Cherry Pick"></a>Cherry Pick</h3><p><code>git cherry-pick</code> 命令「复制」一个提交节点并在当前分支做一次完全一样的新提交。</p><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p><code>git rebase</code> 是合并命令的另一种选择。合并把两个父分支合并进行一次提交，提交历史不是线性的。rebase 在当前分支上重演另一个分支的历史，提交历史是线性的。</p><p>本质上，这是线性化的自动的 <a href="#cherry-pick">cherry-pick</a>。</p><p>上面的命令都在 <code>_topic_</code> 分支中进行，而不是 <code>_master_</code> 分支，在 <code>_master_</code> 分支上重演，并且把分支指向新的节点。注意旧提交没有被引用，将被回收。</p><p>要限制回滚范围，使用 <code>--onto</code> 选项。下面的命令在 <code>_master_</code> 分支上重演当前分支从 <code>_169a6_</code> 以来的最近几个提交，即 <code>_2c33a_</code>。</p><p>同样有 <code>git rebase --interactive</code> 让你更方便的完成一些复杂操作，比如丢弃、重排、修改、合并提交。</p><hr><h1 id="4-1-代码合并：Merge、Rebase-的选择"><a href="#4-1-代码合并：Merge、Rebase-的选择" class="headerlink" title="4.1 代码合并：Merge、Rebase 的选择"></a>4.1 代码合并：Merge、Rebase 的选择</h1><p><code>git rebase</code> 这个命令经常被人认为是一种 Git 巫术，初学者应该避而远之。但如果使用得当的话，它能给你的团队开发省去太多烦恼。在这篇文章中，我们会比较 <code>git rebase</code> 和类似的 <code>git merge</code> 命令，找到 Git 工作流中 rebase 的所有用法。</p><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>你要知道的第一件事是，<code>git rebase</code> 和<code>git merge</code> 做的事其实是一样的。它们都被设计来将一个分支的更改并入另一个分支，只不过方式有些不同。</p><p>想象一下，你刚创建了一个专门的分支开发新功能，然后团队中另一个成员在 master 分支上添加了新的提交。这就会造成提交历史被 fork 一份，用 Git 来协作的开发者应该都很清楚。</p><p>现在，如果 master 中新的提交和你的工作是相关的。为了将新的提交并入你的分支，你有两个选择：merge 或 rebase。</p><h3 id="Merge-1"><a href="#Merge-1" class="headerlink" title="Merge"></a>Merge</h3><p>将 master 分支合并到 feature 分支最简单的办法就是用下面这些命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure><p>或者，你也可以把它们压缩在一行里。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge master feature</span><br></pre></td></tr></table></figure><p>feature 分支中新的合并提交（merge commit）将两个分支的历史连在了一起。你会得到下面这样的分支结构：</p><p>Merge 好在它是一个安全的操作。现有的分支不会被更改，避免了 rebase 潜在的缺点（后面会说）。</p><p>另一方面，这同样意味着每次合并上游更改时 feature 分支都会引入一个外来的合并提交。如果 master 非常活跃的话，这或多或少会污染你的分支历史。虽然高级的 <code>git log</code> 选项可以减轻这个问题，但对于开发者来说，还是会增加理解项目历史的难度。</p><h3 id="Rebase-1"><a href="#Rebase-1" class="headerlink" title="Rebase"></a>Rebase</h3><p>作为 merge 的替代选择，你可以像下面这样将 feature 分支并入 master 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure><p>它会把整个 feature 分支移动到 master 分支的后面，有效地把所有 master 分支上新的提交并入过来。但是，rebase 为原分支上每一个提交创建一个新的提交，重写了项目历史，并且不会带来合并提交。</p><p>rebase最大的好处是你的项目历史会非常整洁。首先，它不像 <code>git merge</code> 那样引入不必要的合并提交。其次，rebase 导致最后的项目历史呈现出完美的线性——你可以从项目终点到起点浏览而不需要任何的 fork。这让你更容易使用 <code>git log</code>、<code>git bisect</code> 和 <code>gitk</code> 来查看项目历史。</p><p>不过，这种简单的提交历史会带来两个后果：安全性和可跟踪性。如果你违反了 rebase 黄金法则，重写项目历史可能会给你的协作工作流带来灾难性的影响。此外，rebase 不会有合并提交中附带的信息——你看不到 feature 分支中并入了上游的哪些更改。</p><h3 id="交互式的-rebase"><a href="#交互式的-rebase" class="headerlink" title="交互式的 rebase"></a>交互式的 rebase</h3><p>交互式的 rebase 允许你更改并入新分支的提交。这比自动的 rebase 更加强大，因为它提供了对分支上提交历史完整的控制。一般来说，这被用于将 feature 分支并入 master 分支之前，清理混乱的历史。</p><p>把 <code>-i</code> 传入 <code>git rebase</code> 选项来开始一个交互式的rebase过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase -i master</span><br></pre></td></tr></table></figure><p>它会打开一个文本编辑器，显示所有将被移动的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 33d5b7a Message for commit #1</span><br><span class="line">pick 9480b3d Message for commit #2</span><br><span class="line">pick 5c67e61 Message for commit #3</span><br></pre></td></tr></table></figure><p>这个列表定义了 rebase 将被执行后分支会是什么样的。更改 <code>pick</code> 命令或者重新排序，这个分支的历史就能如你所愿了。比如说，如果第二个提交修复了第一个提交中的小问题，你可以用 <code>fixup</code> 命令把它们合到一个提交中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 33d5b7a Message for commit #1</span><br><span class="line">fixup 9480b3d Message for commit #2</span><br><span class="line">pick 5c67e61 Message for commit #3</span><br></pre></td></tr></table></figure><p>保存后关闭文件，Git 会根据你的指令来执行 rebase，项目历史看上去会是这样：</p><p>忽略不重要的提交会让你的 feature 分支的历史更清晰易读。这是 <code>git merge</code> 做不到的。</p><h2 id="Rebase-的黄金法则"><a href="#Rebase-的黄金法则" class="headerlink" title="Rebase 的黄金法则"></a>Rebase 的黄金法则</h2><p>当你理解 rebase 是什么的时候，最重要的就是什么时候 <em>不能</em> 用 rebase。<code>git rebase</code> 的黄金法则便是，绝不要在公共的分支上使用它。</p><p>比如说，如果你把 master 分支 rebase 到你的 feature 分支上会发生什么：</p><p>这次 rebase 将 master 分支上的所有提交都移到了 feature 分支后面。问题是它只发生在你的代码仓库中，其他所有的开发者还在原来的 master 上工作。因为 rebase 引起了新的提交，Git 会认为你的 master 分支和其他人的 master 已经分叉了。</p><p>同步两个 master 分支的唯一办法是把它们 merge 到一起，导致一个额外的合并提交和两堆包含同样更改的提交。不用说，这会让人非常困惑。</p><p>所以，在你运行 <code>git rebase</code> 之前，一定要问问你自己「有没有别人正在这个分支上工作？」。如果答案是肯定的，那么把你的爪子放回去，重新找到一个无害的方式（如 <code>git revert</code>）来提交你的更改。不然的话，你可以随心所欲地重写历史。</p><h3 id="强制推送-1"><a href="#强制推送-1" class="headerlink" title="强制推送"></a>强制推送</h3><p>如果你想把 rebase 之后的 master 分支推送到远程仓库，Git 会阻止你这么做，因为两个分支包含冲突。但你可以传入 <code>--force</code> 标记来强行推送。就像下面一样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">小心使用这个命令！</span></span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure><p>它会重写远程的 master 分支来匹配你仓库中 rebase 之后的 master 分支，对于团队中其他成员来说这看上去很诡异。所以，务必小心这个命令，只有当你知道你在做什么的时候再使用。</p><p>仅有的几个强制推送的使用场景之一是，当你在想向远程仓库推送了一个私有分支之后，执行了一个本地的清理（比如说为了回滚）。这就像是在说「哦，其实我并不想推送之前那个 feature 分支的。用我现在的版本替换掉吧。」同样，你要注意没有别人正在这个 feature 分支上工作。</p><h2 id="工作流-1"><a href="#工作流-1" class="headerlink" title="工作流"></a>工作流</h2><p>rebase 可以或多或少应用在你们团队的 Git 工作流中。在这一节中，我们来看看在 feature 分支开发的各个阶段中，rebase 有哪些好处。</p><p>第一步是在任何和 <code>git rebase</code> 有关的工作流中为每一个 feature 专门创建一个分支。它会给你带来安全使用 rebase 的分支结构：</p><h3 id="本地清理"><a href="#本地清理" class="headerlink" title="本地清理"></a>本地清理</h3><p>在你工作流中使用 rebase 最好的用法之一就是清理本地正在开发的分支。隔一段时间执行一次交互式 rebase，你可以保证你 feature 分支中的每一个提交都是专注和有意义的。你在写代码时不用担心造成孤立的提交——因为你后面一定能修复。</p><p>调用 <code>git rebase</code> 的时候，你有两个基（base）可以选择：上游分支（比如 master）或者你 feature 分支中早先的一个提交。我们在「交互式 rebase」一节看到了第一种的例子。后一种在当你只需要修改最新几次提交时也很有用。比如说，下面的命令对最新的 3 次提交进行了交互式 rebase：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>通过指定 <code>HEAD~3</code> 作为新的基提交，你实际上没有移动分支——你只是将之后的 3 次提交重写了。注意它不会把上游分支的更改并入到 feature 分支中。</p><p>如果你想用这个方法重写整个 feature 分支，<code>git merge-base</code> 命令非常方便地找出 feature 分支开始分叉的基。下面这段命令返回基提交的 ID，你可以接下来将它传给 <code>git rebase</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge-base feature master</span><br></pre></td></tr></table></figure><p>交互式 rebase 是在你工作流中引入 <code>git rebase</code> 的的好办法，因为它只影响本地分支。其他开发者只能看到你已经完成的结果，那就是一个非常整洁、易于追踪的分支历史。</p><p>但同样的，这只能用在私有分支上。如果你在同一个 feature 分支和其他开发者合作的话，这个分支是公开的，你不能重写这个历史。</p><p>用带有交互式的 rebase 清理本地提交，这是无法用 <code>git merge</code> 命令代替的。</p><h3 id="将上游分支上的更改并入feature分支"><a href="#将上游分支上的更改并入feature分支" class="headerlink" title="将上游分支上的更改并入feature分支"></a>将上游分支上的更改并入feature分支</h3><p>在概览一节，我们看到了 feature 分支如何通过 <code>git merge</code> 或 <code>git rebase</code> 来并入上游分支。merge 是保留你完整历史的安全选择，rebase 将你的 feature 分支移动到 master 分支后面，创建一个线性的历史。</p><p><code>git rebase</code> 的用法和本地清理非常类似（而且可以同时使用），但之间并入了 master 上的上游更改。</p><p>记住，rebase 到远程分支而不是 master 也是完全合法的。当你和另一个开发者在同一个 feature 分之上协作的时候，你会用到这个用法，将他们的更改并入你的项目。</p><p>比如说，如果你和另一个开发者 John 往 feature 分支上添加了几个提交，在从 John 的仓库中 fetch 之后，你的仓库可能会像下面这样：</p><p>就和并入 master 上的上游更改一样，你可以这样解决这个 fork：要么 merge 你的本地分支和 John 的分支，要么把你的本地分支 rebase 到 John 的分支后面。</p><p>注意，这里的 rebase 没有违反 rebase 黄金法则，因为只有你的本地分支上的 commit 被移动了，之前的所有东西都没有变。这就像是在说「把我的改动加到 John 的后面去」。在大多数情况下，这比通过合并提交来同步远程分支更符合直觉。</p><p>默认情况下，<code>git pull</code> 命令会执行一次merge，但你可以传入<code>--rebase</code> 来强制它通过rebase来整合远程分支。</p><h3 id="用-Pull-Request-进行审查"><a href="#用-Pull-Request-进行审查" class="headerlink" title="用 Pull Request 进行审查"></a>用 Pull Request 进行审查</h3><p>如果你将 Pull Request 作为你代码审查过程中的一环，你需要避免在创建 Pull Request 之后使用 <code>git rebase</code>。只要你发起了 Pull Request，其他开发者能看到你的代码，也就是说这个分支变成了公共分支。重写历史会造成 Git 和你的同事难以找到这个分支接下来的任何提交。</p><p>来自其他开发者的任何更改都应该用 <code>git merge</code> 而不是 <code>git rebase</code> 来并入。</p><p>因此，在提交 Pull Request前用交互式的 rebase 进行代码清理通常是一个好的做法。</p><h3 id="并入通过的功能分支"><a href="#并入通过的功能分支" class="headerlink" title="并入通过的功能分支"></a>并入通过的功能分支</h3><p>如果某个功能被你们团队通过了，你可以选择将这个分支 rebase 到 master 分支之后，或是使用 <code>git merge</code> 来将这个功能并入主代码库中。</p><p>这和将上游改动并入 feature 分支很相似，但是你不可以在 master 分支重写提交，你最后需要用 <code>git merge</code> 来并入这个 feature。但是，在 merge 之前执行一次 rebase，你可以确保 merge 是一直向前的，最后生成的是一个完全线性的提交历史。这样你还可以加入 Pull Request 之后的提交。</p><p>如果你还没有完全熟悉 <code>git rebase</code>，你还可以在一个临时分支中执行 rebase。这样的话，如果你意外地弄乱了你 feature 分支的历史，你还可以查看原来的分支然后重试。</p><p>比如说：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git checkout -b temporary-branch</span><br><span class="line">git rebase -i master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[清理目录]</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge temporary-branch</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>你使用 rebase 之前需要知道的知识点都在这了。如果你想要一个干净的、线性的提交历史，没有不必要的合并提交，你应该使用 <code>git rebase</code> 而不是 <code>git merge</code> 来并入其他分支上的更改。</p><p>另一方面，如果你想要保存项目完整的历史，并且避免重写公共分支上的 commit， 你可以使用 <code>git merge</code>。两种选项都很好用，但至少你现在多了 <code>git rebase</code> 这个选择。</p><hr><h1 id="4-2-代码回滚：Reset、Checkout、Revert-的选择"><a href="#4-2-代码回滚：Reset、Checkout、Revert-的选择" class="headerlink" title="4.2 代码回滚：Reset、Checkout、Revert 的选择"></a>4.2 代码回滚：Reset、Checkout、Revert 的选择</h1><p><code>git reset</code>、<code>git checkout</code> 和 <code>git revert</code> 是你的 Git 工具箱中最有用的一些命令。它们都用来撤销代码仓库中的某些更改，而前两个命令不仅可以作用于提交，还可以作用于特定文件。</p><p>因为它们非常相似，所以我们经常会搞混，不知道什么场景下该用哪个命令。在这篇文章中，我们会比较 <code>git reset</code>、<code>git checkout</code> 和 <code>git revert</code> 最常见的用法。希望你在看完后能游刃有余地使用这些命令来管理你的仓库。</p><p>Git 仓库有三个主要组成——工作目录，缓存区和提交历史。这张图有助于理解每个命令到底产生了哪些影响。当你阅读的时候，牢记这张图。</p><h2 id="提交层面的操作"><a href="#提交层面的操作" class="headerlink" title="提交层面的操作"></a>提交层面的操作</h2><p>你传给 <code>git reset</code> 和 <code>git checkout</code> 的参数决定了它们的作用域。如果你没有包含文件路径，这些操作对所有提交生效。我们这一节要探讨的就是提交层面的操作。注意，<code>git revert</code> 没有文件层面的操作。</p><h3 id="Reset-1"><a href="#Reset-1" class="headerlink" title="Reset"></a>Reset</h3><p>在提交层面上，reset 将一个分支的末端指向另一个提交。这可以用来移除当前分支的一些提交。比如，下面这两条命令让 hotfix 分支向后回退了两个提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout hotfix</span><br><span class="line">git reset HEAD~2</span><br></pre></td></tr></table></figure><p>hotfix 分支末端的两个提交现在变成了悬挂提交。也就是说，下次 Git 执行垃圾回收的时候，这两个提交会被删除。</p><p>如果你的更改还没有共享给别人，<code>git reset</code> 是撤销这些更改的简单方法。当你开发一个功能的时候发现「糟糕，我做了什么？我应该重新来过！」时，reset 就像是 go-to 命令一样。</p><p>除了在当前分支上操作，你还可以通过传入这些标记来修改你的缓存区或工作目录：</p><ul><li>–soft – 缓存区和工作目录都不会被改变</li><li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li><li>–hard – 缓存区和工作目录都同步到你指定的提交</li></ul><p>把这些标记想成定义 <code>git reset</code> 操作的作用域就容易理解多了。</p><p>这些标记往往和 HEAD 作为参数一起使用。比如，<code>git reset --mixed HEAD</code> 将你当前的改动从缓存区中移除，但是这些改动还留在工作目录中。另一方面，如果你想完全舍弃你没有提交的改动，你可以使用 <code>git reset --hard HEAD</code>。这是 <code>git reset</code> 最常用的两种用法。</p><p>当你传入 HEAD 以外的其他提交的时候要格外小心，因为 reset 操作会重写当前分支的历史。正如 rebase 黄金法则所说的，在公共分支上这样做可能会引起严重的后果。</p><h3 id="Checkout-1"><a href="#Checkout-1" class="headerlink" title="Checkout"></a>Checkout</h3><p>你应该已经非常熟悉提交层面的 <code>git checkout</code>。当传入分支名时，可以切换到那个分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout hotfix</span><br></pre></td></tr></table></figure><p>上面这个命令做的不过是将HEAD移到一个新的分支，然后更新工作目录。因为这可能会覆盖本地的修改，Git 强制你提交或者缓存工作目录中的所有更改，不然在 checkout 的时候这些更改都会丢失。和 <code>git reset</code> 不一样的是，<code>git checkout</code> 没有移动这些分支。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b5ad4ac9c92eb372e084162d2eb5644d.png" alt="将 HEAD 从 master 移到 hotfix"></p><p>除了分支之外，你还可以传入提交的引用来 checkout 到任意的提交。这和 checkout 到另一个分支是完全一样的：把 HEAD 移动到特定的提交。比如，下面这个命令会 checkout 到当前提交的祖父提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD~2</span><br></pre></td></tr></table></figure><p>这对于快速查看项目旧版本来说非常有用。但如果你当前的 HEAD 没有任何分支引用，那么这会造成 HEAD 分离。这是非常危险的，如果你接着添加新的提交，然后切换到别的分支之后就没办法回到之前添加的这些提交。因此，在为分离的 HEAD 添加新的提交的时候你应该创建一个新的分支。</p><h3 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h3><p>Revert 撤销一个提交的同时会创建一个新的提交。这是一个安全的方法，因为它不会重写提交历史。比如，下面的命令会找出倒数第二个提交，然后创建一个新的提交来撤销这些更改，然后把这个提交加入项目中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout hotfix</span><br><span class="line">git revert HEAD~2</span><br></pre></td></tr></table></figure><p>相比 <code>git reset</code>，它不会改变现在的提交历史。因此，<code>git revert</code> 可以用在公共分支上，<code>git reset</code> 应该用在私有分支上。</p><p>你也可以把 <code>git revert</code> 当作撤销已经提交的更改，而 <code>git reset HEAD</code> 用来撤销没有提交的更改。</p><p>就像 <code>git checkout</code> 一样，<code>git revert</code> 也有可能会重写文件。所以，Git 会在你执行 revert 之前要求你提交或者缓存你工作目录中的更改。</p><h2 id="文件层面的操作"><a href="#文件层面的操作" class="headerlink" title="文件层面的操作"></a>文件层面的操作</h2><p><code>git reset</code> 和 <code>git checkout</code> 命令也接受文件路径作为参数。这时它的行为就大为不同了。它不会作用于整份提交，参数将它限制于特定文件。</p><h3 id="Reset-2"><a href="#Reset-2" class="headerlink" title="Reset"></a>Reset</h3><p>当检测到文件路径时，<code>git reset</code> 将缓存区同步到你指定的那个提交。比如，下面这个命令会将倒数第二个提交中的 <code>foo.py</code> 加入到缓存区中，供下一个提交使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~2 foo.py</span><br></pre></td></tr></table></figure><p>和提交层面的 <code>git reset</code> 一样，通常我们使用HEAD而不是某个特定的提交。运行 <code>git reset HEAD foo.py</code> 会将当前的 <code>foo.py</code> 从缓存区中移除出去，而不会影响工作目录中对 <code>foo.py</code> 的更改。</p><p><code>--soft</code>、<code>--mixed</code> 和 <code>--hard</code> 对文件层面的 <code>git reset</code> 毫无作用，因为缓存区中的文件一定会变化，而工作目录中的文件一定不变。</p><h3 id="Checkout-2"><a href="#Checkout-2" class="headerlink" title="Checkout"></a>Checkout</h3><p>Checkout 一个文件和带文件路径 <code>git reset</code> 非常像，除了它更改的是工作目录而不是缓存区。不像提交层面的 checkout 命令，它不会移动  HEAD引用，也就是你不会切换到别的分支上去。</p><p>比如，下面这个命令将工作目录中的 <code>foo.py</code> 同步到了倒数第二个提交中的 <code>foo.py</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD~2 foo.py</span><br></pre></td></tr></table></figure><p>和提交层面相同的是，它可以用来检查项目的旧版本，但作用域被限制到了特定文件。</p><p>如果你缓存并且提交了 checkout 的文件，它具备将某个文件回撤到之前版本的效果。注意它撤销了这个文件后面所有的更改，而 <code>git revert</code> 命令只撤销某个特定提交的更改。</p><p>和 <code>git reset</code> 一样，这个命令通常和 HEAD 一起使用。比如 <code>git checkout HEAD foo.py</code> 等同于舍弃 <code>foo.py</code> 没有缓存的更改。这个行为和 <code>git reset HEAD --hard</code> 很像，但只影响特定文件。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>你现在已经掌握了 Git 仓库中撤销更改的所有工具。<code>git reset</code>、<code>git checkout</code> 和 <code>git revert</code> 命令比较容易混淆，但当你想起它们对工作目录、缓存区和提交历史的不同影响，就会容易判断现在应该用哪个命令。</p><p>下面这个表格总结了这些命令最常用的使用场景。记得经常对照这个表格，因为你使用 Git 时一定会经常用到。</p><table><thead><tr><th align="center">命令</th><th align="center">作用域</th><th align="left">常用情景</th></tr></thead><tbody><tr><td align="center">git reset</td><td align="center">提交层面</td><td align="left">在私有分支上舍弃一些没有提交的更改</td></tr><tr><td align="center">git reset</td><td align="center">文件层面</td><td align="left">将文件从缓存区中移除</td></tr><tr><td align="center">git checkout</td><td align="center">提交层面</td><td align="left">切换分支或查看旧版本</td></tr><tr><td align="center">git checkout</td><td align="center">文件层面</td><td align="left">舍弃工作目录中的更改</td></tr><tr><td align="center">git revert</td><td align="center">提交层面</td><td align="left">在公共分支上回滚更改</td></tr><tr><td align="center">git revert</td><td align="center">文件层面</td><td align="left">（然而并没有）</td></tr></tbody></table><hr><h1 id="4-3-Git-log-高级用法"><a href="#4-3-Git-log-高级用法" class="headerlink" title="4.3 Git log 高级用法"></a>4.3 Git log 高级用法</h1><p>每一个版本控制系统的出现都是为了让你记录代码的变化。你可以看到项目的历史记录——谁贡献了什么、bug 是什么时候引入的，还可以撤回有问题的更改。但是，首先你得知道如何使用它。这也就是为什么会有 <code>git log</code> 这个命令。</p><p>到现在为止，你应该已经知道如何用 <code>git log</code> 命令来显示最基本的提交信息。但除此之外，你还可以传入各种不同的参数来获得不一样的输出。</p><p><code>git log</code> 有两个高级用法：一是自定义提交的输出格式，二是过滤输出哪些提交。这两个用法合二为一，你就可以找到你项目中你需要的任何信息。</p><h2 id="格式化-Log-输出"><a href="#格式化-Log-输出" class="headerlink" title="格式化 Log 输出"></a>格式化 Log 输出</h2><p>首先，这篇文章会展示几种 <code>git log</code> 格式化输出的例子。大多数例子只是通过标记向 <code>git log</code> 请求或多或少的信息。</p><p>如果你不喜欢默认的 <code>git log</code> 格式，你可以用 <code>git config</code> 的别名功能来给你想要的格式创建一个快捷方式。</p><h3 id="Oneline"><a href="#Oneline" class="headerlink" title="Oneline"></a>Oneline</h3><p><code>--oneline</code> 标记把每一个提交压缩到了一行中。它默认只显示提交ID和提交信息的第一行。<code>git log --oneline</code> 的输出一般是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0e25143 Merge branch &#x27;feature&#x27;</span><br><span class="line">ad8621a Fix a bug in the feature</span><br><span class="line">16b36c6 Add a new feature</span><br><span class="line">23ad9ad Add the initial code base</span><br></pre></td></tr></table></figure><p>它对于获得项目的总体情况很有帮助。</p><h3 id="Decorate"><a href="#Decorate" class="headerlink" title="Decorate"></a>Decorate</h3><p>很多时候，知道每个提交关联的分支或者标签很有用。<code>--decorate</code> 标记让 <code>git log</code> 显示指向这个提交的所有引用（比如说分支、标签等）。</p><p>这可以和另一个配置项一起使用。比如，执行 <code>git log --oneline --decorate</code> 会将提交历史格式化成这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0e25143 (HEAD, master) Merge branch &#x27;feature&#x27;</span><br><span class="line">ad8621a (feature) Fix a bug in the feature</span><br><span class="line">16b36c6 Add a new feature</span><br><span class="line">23ad9ad (tag: v0.9) Add the initial code base</span><br></pre></td></tr></table></figure><p>在这个例子中，你（通过HEAD标记）可以看到最上面那个提交已经被 checkout 了，而且它还是 master 分支的尾端。第二个提交有另一个 feature 分支指向它，以及最后那个提交带有 v0.9 标签。</p><p>分支、标签、HEAD 还有提交历史是你 Git 仓库中包含的所有信息。因此，这个命令让你更完整地观察项目结构。</p><h3 id="Diff-1"><a href="#Diff-1" class="headerlink" title="Diff"></a>Diff</h3><p><code>git log</code> 提供了很多选项来显示两个提交之间的差异。其中最常用的两个是 <code>--stat</code> 和 <code>-p</code>。</p><p><code>--stat</code> 选项显示每次提交的文件增删数量（注意：修改一行记作增加一行且删去一行），当你想要查看提交引入的变化时这会非常有用。比如说，下面这个提交在 hello.py 文件中增加了 67 行，删去了 38 行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">commit f2a238924e89ca1d4947662928218a06d39068c3</span><br><span class="line">Author: John &lt;john@example.com&gt;</span><br><span class="line">Date:   Fri Jun 25 17:30:28 2014 -0500</span><br><span class="line"></span><br><span class="line">    Add a new feature</span><br><span class="line"></span><br><span class="line"> hello.py | 105 ++++++++++++++++++++++++-----------------</span><br><span class="line"> 1 file changed, 67 insertion(+), 38 deletions(-)</span><br></pre></td></tr></table></figure><p>文件名后面+和-的数量是这个提交造成的更改中增删的相对比例。它给你一个直观的感觉，关于这次提交有多少改动。如果你想知道每次提交删改的绝对数量，你可以将 <code>-p</code> 选项传入<code>git log</code>。这样提交所有的删改都会被输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">commit 16b36c697eb2d24302f89aa22d9170dfe609855b</span><br><span class="line">Author: Mary &lt;mary@example.com&gt;</span><br><span class="line">Date:   Fri Jun 25 17:31:57 2014 -0500</span><br><span class="line"></span><br><span class="line">    Fix a bug in the feature</span><br><span class="line"></span><br><span class="line">diff --git a/hello.py b/hello.py</span><br><span class="line">index 18ca709..c673b40 100644</span><br><span class="line">--- a/hello.py</span><br><span class="line">+++ b/hello.py</span><br><span class="line">@@ -13,14 +13,14 @@ B</span><br><span class="line">-print(&quot;Hello, World!&quot;)</span><br><span class="line">+print(&quot;Hello, Git!&quot;)</span><br></pre></td></tr></table></figure><p>对于改动很多的提交来说，这个输出会变得又长又大。一般来说，当你输出所有删改的时候，你是想要查找某一具体的改动，这时你就要用到 <code>pickaxe</code> 选项。</p><h3 id="Shortlog"><a href="#Shortlog" class="headerlink" title="Shortlog"></a>Shortlog</h3><p><code>git shortlog</code> 是一种特殊的 <code>git log</code>，它是为创建发布声明设计的。它把每个提交按作者分类，显示提交信息的第一行。这样可以容易地看到谁做了什么。</p><p>比如说，两个开发者为项目贡献了 5 个提交，那么 <code>git shortlog</code> 输出会是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mary (2):</span><br><span class="line">      Fix a bug in the feature</span><br><span class="line">      Fix a serious security hole in our framework</span><br><span class="line"></span><br><span class="line">John (3):</span><br><span class="line">      Add the initial code base</span><br><span class="line">      Add a new feature</span><br><span class="line">      Merge branch &#x27;feature&#x27;</span><br></pre></td></tr></table></figure><p>默认情况下，<code>git shortlog</code> 把输出按作者名字排序，但你可以传入 <code>-n</code> 选项来按每个作者提交数量排序。</p><h3 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h3><p><code>--graph</code> 选项绘制一个 ASCII 图像来展示提交历史的分支结构。它经常和 <code>--oneline</code> 和 <code>--decorate</code> 两个选项一起使用，这样会更容易查看哪个提交属于哪个分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --oneline --decorate</span><br><span class="line">For a simple repository with just 2 branches, this will produce the following:</span><br><span class="line"></span><br><span class="line">*   0e25143 (HEAD, master) Merge branch &#x27;feature&#x27;</span><br><span class="line">|\  </span><br><span class="line">| * 16b36c6 Fix a bug in the new feature</span><br><span class="line">| * 23ad9ad Start a new feature</span><br><span class="line">* | ad8621a Fix a critical security issue</span><br><span class="line">|/  </span><br><span class="line">* 400e4b7 Fix typos in the documentation</span><br><span class="line">* 160e224 Add the initial code base</span><br></pre></td></tr></table></figure><p>虽然这对简单的项目来说是个很好用的选择，但你可能会更喜欢 gitk 或 SourceTree 这些更强大的可视化工具来分析大型项目。</p><h3 id="自定义格式"><a href="#自定义格式" class="headerlink" title="自定义格式"></a>自定义格式</h3><p>对于其他的 <code>git log</code> 格式需求，你都可以使用 <code>--pretty=format:&quot;&lt;string&gt;&quot;</code> 选项。它允许你使用像 printf 一样的占位符来输出提交。</p><p>比如，下面命令中的 <code>%cn</code>、<code>%h</code> 和 <code>%cd</code> 这三种占位符会被分别替换为作者名字、缩略标识和提交日期。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=format:&quot;%cn committed %h on %cd&quot;</span><br><span class="line">This results in the following format for each commit:</span><br><span class="line"></span><br><span class="line">John committed 400e4b7 on Fri Jun 24 12:30:04 2014 -0500</span><br><span class="line">John committed 89ab2cf on Thu Jun 23 17:09:42 2014 -0500</span><br><span class="line">Mary committed 180e223 on Wed Jun 22 17:21:19 2014 -0500</span><br><span class="line">John committed f12ca28 on Wed Jun 22 13:50:31 2014 -0500</span><br></pre></td></tr></table></figure><p>完整的占位符清单可以在文档中找到。</p><p>除了让你只看到关注的信息，这个 <code>--pretty=format:&quot;&lt;string&gt;&quot;</code> 选项在你想要在另一个命令中使用日志内容是尤为有用的。</p><h2 id="过滤提交历史"><a href="#过滤提交历史" class="headerlink" title="过滤提交历史"></a>过滤提交历史</h2><p>格式化提交输出只是 <code>git log</code> 其中的一个用途。另一半是理解如何浏览整个提交历史。接下来的文章会介绍如何用 <code>git log</code> 选择项目历史中的特定提交。所有的用法都可以和上面讨论过的格式化选项结合起来。</p><h3 id="按数量"><a href="#按数量" class="headerlink" title="按数量"></a>按数量</h3><p><code>git log</code> 最基础的过滤选项是限制显示的提交数量。当你只对最近几次提交感兴趣时，它可以节省你一页一页查看的时间。</p><p>你可以在后面加上 <code>-&lt;n&gt;</code> 选项。比如说，下面这个命令会显示最新的 3 次提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -3</span><br></pre></td></tr></table></figure><h3 id="按日期"><a href="#按日期" class="headerlink" title="按日期"></a>按日期</h3><p>如果你想要查看某一特定时间段内的提交，你可以使用 <code>--after</code> 或 <code>--before</code> 标记来按日期筛选。它们都接受好几种日期格式作为参数。比如说，下面的命令会显示 2014 年 7 月 1 日后（含）的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --after=&quot;2014-7-1&quot;</span><br></pre></td></tr></table></figure><p>你也可以传入相对的日期，比如一周前（<code>&quot;1 week ago&quot;</code>）或者昨天（<code>&quot;yesterday&quot;</code>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get log --after=&quot;yesterday&quot;</span><br></pre></td></tr></table></figure><p>你可以同时提供<code>--before</code> 和 <code>--after</code> 来检索两个日期之间的提交。比如，为了显示 2014 年 7 月 1 日到 2014 年 7 月 4 日之间的提交，你可以这么写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --after=&quot;2014-7-1&quot; --before=&quot;2014-7-4&quot;</span><br></pre></td></tr></table></figure><p>注意 <code>--since</code>、<code>--until</code> 标记和 <code>--after</code>、<code>--before</code> 标记分别是等价的。</p><h3 id="按作者"><a href="#按作者" class="headerlink" title="按作者"></a>按作者</h3><p>当你只想看某一特定作者的提交的时候，你可以使用 <code>--author</code> 标记。它接受正则表达式，返回所有作者名字满足这个规则的提交。如果你知道那个作者的确切名字你可以直接传入文本字符串：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;John&quot;</span><br></pre></td></tr></table></figure><p>它会显示所有作者叫 John 的提交。作者名不一定是全匹配，只要包含那个子串就会匹配。</p><p>你也可以用正则表达式来创建更复杂的检索。比如，下面这个命令检索名叫 Mary 或 John 的作者的提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;John\|Mary&quot;</span><br></pre></td></tr></table></figure><p>注意作者的邮箱地址也算作是作者的名字，所以你也可以用这个选项来按邮箱检索。</p><p>如果你的工作流区分提交者和作者，<code>--committer</code> 也能以相同的方式使用。</p><h3 id="按提交信息"><a href="#按提交信息" class="headerlink" title="按提交信息"></a>按提交信息</h3><p>按提交信息来过滤提交，你可以使用 <code>--grep</code> 标记。它和上面的 <code>--author</code> 标记差不多，只不过它搜索的是提交信息而不是作者。</p><p>比如说，你的团队规范要求在提交信息中包括相关的issue编号，你可以用下面这个命令来显示这个 issue 相关的所有提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --grep=&quot;JRA-224:&quot;</span><br></pre></td></tr></table></figure><p>你也可以传入 <code>-i</code> 参数来忽略大小写匹配。</p><h3 id="按文件"><a href="#按文件" class="headerlink" title="按文件"></a>按文件</h3><p>很多时候，你只对某个特定文件的更改感兴趣。为了显示某个特定文件的历史，你只需要传入文件路径。比如说，下面这个命令返回所有和 <code>foo.py</code> 和 <code>bar.py</code> 文件相关的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -- foo.py bar.py</span><br></pre></td></tr></table></figure><p><code>--</code> 告诉 <code>git log</code> 接下来的参数是文件路径而不是分支名。如果分支名和文件名不可能冲突，你可以省略 <code>--</code>。</p><h3 id="按内容"><a href="#按内容" class="headerlink" title="按内容"></a>按内容</h3><p>我们还可以根据源代码中某一行的增加和删除来搜索提交。这被称为 pickaxe，它接受形如 <code>-S&quot;&lt;string&gt;&quot;</code> 的参数。比如说，当你想要知道 <code>Hello, World!</code> 字符串是什么时候加到项目中哪个文件中去的，你可以使用下面这个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -S &quot;Hello, World!&quot;</span><br></pre></td></tr></table></figure><p>如果你想用正则表达式而不是字符串来搜索，你可以使用 <code>-G&quot;&lt;regex&gt;&quot;</code> 标记。</p><p>这是一个非常强大的调试工具，它能让你定位到所有影响代码中特定一行的提交。它甚至可以让你看到某一行是什么时候复制或者移动到另一个文件中去的。</p><h3 id="按范围"><a href="#按范围" class="headerlink" title="按范围"></a>按范围</h3><p>你可以传入范围来筛选提交。这个范围由下面这样的格式指定，其中 <code>&lt;since&gt;</code> 和 <code>&lt;until&gt;</code> 是提交的引用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log &lt;since&gt;..&lt;until&gt;</span><br></pre></td></tr></table></figure><p>这个命令在你使用分支引用作为参数时特别有用。这是显示两个分支之间区别最简单的方式。看看下面这个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log master..feature</span><br></pre></td></tr></table></figure><p>其中的 <code>master..feature</code> 范围包含了在 feature 分支而不在 master 分支中所有的提交。换句话说，这个命令可以看出从 master 分支 fork 到 feature 分支后发生了哪些变化。它可以这样可视化：</p><p>注意如果你更改范围的前后顺序（feature..master），你会获取到 master 分支而非 feature 分支上的所有提交。如果 <code>git log</code> 输出了全部两个分支的提交，这说明你的提交历史已经分叉了。</p><h3 id="过滤合并提交"><a href="#过滤合并提交" class="headerlink" title="过滤合并提交"></a>过滤合并提交</h3><p><code>git log</code> 输出时默认包括合并提交。但是，如果你的团队采用强制合并策略（意思是 merge 你修改的上游分支而不是将你的分支 rebase 到上游分支），你的项目历史中会有很多外来的提交。</p><p>你可以通过 <code>--no-merges</code> 标记来排除这些提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --no-merges</span><br></pre></td></tr></table></figure><p>另一方面，如果你只对合并提交感兴趣，你可以使用 <code>--merges</code> 标记：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --merges</span><br></pre></td></tr></table></figure><p>它会返回所有包含两个父节点的提交。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>你现在应该对使用 <code>git log</code> 来格式化输出和选择你要显示的提交的用法比较熟悉了。它允许你查看你项目历史中任何需要的内容。</p><p>这些技巧是你 Git 工具箱中重要的部分，不过注意 <code>git log</code> 往往和其他 Git 命令连着使用。当你找到了你要的提交，你把它传给 <code>git checkout</code>、<code>git revert</code> 或是其他控制提交历史的工具。所以，请继续坚持 Git 高级用法的学习。</p><hr><h1 id="4-4-Git-钩子：自定义你的工作流"><a href="#4-4-Git-钩子：自定义你的工作流" class="headerlink" title="4.4 Git 钩子：自定义你的工作流"></a>4.4 Git 钩子：自定义你的工作流</h1><p>Git 钩子是在 Git 仓库中特定事件发生时自动运行的脚本。它可以让你自定义 Git 内部的行为，在开发周期中的关键点触发自定义的行为。</p><p>Git 钩子最常见的使用场景包括推行提交规范，根据仓库状态改变项目环境，和接入持续集成工作流。但是，因为脚本可以完全定制，你可以用 Git 钩子来自动化或者优化你开发工作流中任意部分。</p><p>在这篇文章中，我们会先简要介绍 Git 钩子是如何工作的。然后，我们会审视一些本地和远端仓库使用最流行的钩子。</p><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>Git 钩子是仓库中特定事件发生时 Git 自动运行的普通脚本。因此，Git 钩子安装和配置也非常容易。</p><p>钩子在本地或服务端仓库都可以部署，且只会在仓库中事件发生时被执行。在文章后面我们会具体地研究各种钩子。接下来所讲的配置对本地和服务端钩子都起作用。</p><h3 id="安装钩子"><a href="#安装钩子" class="headerlink" title="安装钩子"></a>安装钩子</h3><p>钩子存在于每个 Git 仓库的 <code>.git/hooks</code> 目录中。当你初始化仓库时，Git 自动生成这个目录和一些示例脚本。当你观察 <code>.git/hooks</code> 时，你会看到下面这些文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">applypatch-msg.sample       pre-push.sample</span><br><span class="line">commit-msg.sample           pre-rebase.sample</span><br><span class="line">post-update.sample          prepare-commit-msg.sample</span><br><span class="line">pre-applypatch.sample       update.sample</span><br><span class="line">pre-commit.sample</span><br></pre></td></tr></table></figure><p>这里已经包含了大部分可用的钩子了，但是 <code>.sample</code> 拓展名防止它们默认被执行。为了安装一个钩子，你只需要去掉 <code>.sample</code> 拓展名。或者你要写一个新的脚本，你只需添加一个文件名和上述匹配的新文件，去掉 <code>.sample</code> 拓展名。</p><p>比如说，试试安装一个 <code>prepare-commit-msg</code> 钩子。去掉脚本的 <code>.sample</code> 拓展名，在文件中加上下面这两行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/shell</span></span><br><span class="line"></span><br><span class="line">echo &quot;# Please include a useful commit message!&quot; &gt; $1</span><br></pre></td></tr></table></figure><p>钩子需要能被执行，所以如果你创建了一个新的脚本文件，你需要修改它的文件权限。比如说，为了确保 <code>prepare-commit-msg</code> 可执行，运行下面这个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x prepare-commit-msg</span><br></pre></td></tr></table></figure><p>接下来你每次运行 <code>git commit</code> 时，你会看到默认的提交信息都被替换了。我们会在「准备提交信息」一节中细看它是如何工作的。现在我们已经可以定制 Git 的内部功能，你只需要坐和放宽。</p><p>内置的样例脚本是非常有用的参考资料，因为每个钩子传入的参数都有非常详细的说明（不同钩子不一样）。</p><h3 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h3><p>内置的脚本大多是  shell和 PERL 语言的，但你可以使用任何脚本语言，只要它们最后能编译到可执行文件。每次脚本中的 <code>#!/bin/shell</code> 定义了你的文件将被如何解释。比如，使用其他语言时你只需要将 path 改为你的解释器的路径。</p><p>比如说，你可以在 <code>prepare-commit-msg</code> 中写一个可执行的 Python 脚本。下面这个钩子和上一节的 shell 脚本做的事完全一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line"></span><br><span class="line">commit_msg_filepath = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(commit_msg_filepath, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;# Please include a useful commit message!&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意第一行改成了 Python 解释器的路径。此外，这里用 <code>sys.argv[1]</code> 而不是 <code>$1</code> 来获取第一个参数（这个也后面再讲）。</p><p>这个特性非常强大，因为你可以用任何你喜欢的语言来编写  Git 钩子。</p><h3 id="钩子的作用域"><a href="#钩子的作用域" class="headerlink" title="钩子的作用域"></a>钩子的作用域</h3><p>对于任何 Git 仓库来说钩子都是本地的，而且它不会随着 <code>git clone</code> 一起复制到新的仓库。而且，因为钩子是本地的，任何能接触得到仓库的人都可以修改。</p><p>对于开发团队来说，这有很大的影响。首先，你要确保你们成员之间的钩子都是最新的。其次，你也不能强行让其他人用你喜欢的方式提交——你只能鼓励他们这样做。</p><p>在开发团队中维护钩子是比较复杂的，因为 <code>.git/hooks</code> 目录不随你的项目一起拷贝，也不受版本控制影响。一个简单的解决办法是把你的钩子存在项目的实际目录中（在 <code>.git</code> 外）。这样你就可以像其他文件一样进行版本控制。为了安装钩子，你可以在 <code>.git/hooks</code> 中创建一个符号链接，或者简单地在更新后把它们复制到 <code>.git/hooks</code> 目录下。</p><p>作为备选方案，Git 同样提供了一个模板目录机制来更简单地自动安装钩子。每次你使用 <code>git init</code> 或 <code>git clone</code> 时，模板目录文件夹下的所有文件和目录都会被复制到 <code>.git</code> 文件夹。</p><p>所有的下面讲到的本地钩子都可以被更改或者彻底删除，只要你是项目的参与者。这完全取决于你的团队成员想不想用这个钩子。所以记住，最好把 Git 钩子当成一个方便的开发者工具而不是一个严格强制的开发规范。</p><p>也就是说，用服务端钩子来拒绝没有遵守规范的提交是完全可行的。后面我们会再讨论这个问题。</p><h2 id="本地钩子"><a href="#本地钩子" class="headerlink" title="本地钩子"></a>本地钩子</h2><p>本地钩子只影响它们所在的仓库。当你在读这一节的时候，记住开发者可以修改他们本地的钩子，所以不要用它们来推行强制的提交规范。不过，它们确实可以让开发者更易于接受这些规范。</p><p>在这一节中，我们会探讨 6 个最有用的本地钩子：</p><ul><li>pre-commit</li><li>prepare-commit-msg</li><li>commit-msg</li><li>post-commit</li><li>post-checkout</li><li>pre-rebase</li></ul><p>前四个钩子让你介入完整的提交生命周期，后两个允许你执行一些额外的操作，分别为 <code>git checkout</code> 和 <code>git rebase</code> 的安全检查。</p><p>所有带 <code>pre-</code> 的钩子允许你修改即将发生的操作，而带 <code>post-</code> 的钩子只能用于通知。</p><p>我们也会看到处理钩子的参数和用底层 Git 命令获取仓库信息的实用技巧。</p><h3 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h3><p><code>pre-commit</code> 脚本在每次你运行 <code>git commit</code> 命令时，Git 向你询问提交信息或者生产提交对象时被执行。你可以用这个钩子来检查即将被提交的代码快照。比如说，你可以运行一些自动化测试，保证这个提交不会破坏现有的功能。</p><p><code>pre-commit</code> 不需要任何参数，以非0状态退出时将放弃整个提交。让我们看一个简化了的（和更详细的）内置 <code>pre-commit</code> 钩子。只要检测到不一致时脚本就放弃这个提交，就像 <code>git diff-index</code> 命令定义的那样（只要词尾有空白字符、只有空白字符的行、行首一个 tab 后紧接一个空格就被认为错误）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查这是否是初始提交</span></span><br><span class="line"><span class="keyword">if</span> git rev-parse --verify HEAD &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">then</span><br><span class="line">    echo <span class="string">&quot;pre-commit: About to create a new commit...&quot;</span></span><br><span class="line">    against=HEAD</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    echo <span class="string">&quot;pre-commit: About to create the first commit...&quot;</span></span><br><span class="line">    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用git diff-index来检查空白字符错误</span></span><br><span class="line">echo <span class="string">&quot;pre-commit: Testing for whitespace errors...&quot;</span></span><br><span class="line"><span class="keyword">if</span> ! git diff-index --check --cached $against</span><br><span class="line">then</span><br><span class="line">    echo <span class="string">&quot;pre-commit: Aborting commit due to whitespace errors&quot;</span></span><br><span class="line">    exit <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    echo <span class="string">&quot;pre-commit: No whitespace errors :)&quot;</span></span><br><span class="line">    exit <span class="number">0</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>使用 <code>git diff-index</code> 时我们要指出和哪次提交进行比较。一般来说是 HEAD，但 HEAD 在创建第一次提交时不存在，所以我们的第一个任务是解决这个极端情形。我们通过 <code>git rev-parse --verify</code> 来检查 HEAD 是否是一个合法的引用。<code>&gt;/dev/null 2&gt;&amp;1</code> 这部分屏蔽了 <code>git rev-parse</code> 任何输出。HEAD 或者一个新的提交对象被储存在 <code>against</code> 变量中供 <code>git diff-index</code> 使用。<code>4b825d...</code> 这个哈希字串代表一个空白提交的 ID。</p><p><code>git diff-index --cached</code> 命令将提交和缓存区比较。通过传入 <code>-check</code> 选项，我们要求它在更改引入空白字符错误时警告我们。如果它这么做了，我们返回状态1来放弃这次提交，否则返回状态 0，提交工作流正常进行。</p><p>这只是 <code>pre-commit</code> 的其中一个例子。它恰好使用了已有的 Git 命令来根据提交带来的更改进行测试，但你可以在 <code>pre-commit</code> 中做任何你想做的事，比如执行其它脚本、运行第三方测试集、用 Lint 检查代码风格。</p><h3 id="prepare-commit-msg"><a href="#prepare-commit-msg" class="headerlink" title="prepare-commit-msg"></a>prepare-commit-msg</h3><p><code>prepare-commit-msg</code> 钩子在 <code>pre-commit</code> 钩子在文本编辑器中生成提交信息之后被调用。这被用来方便地修改自动生成的 squash 或 merge 提交。</p><p><code>prepare-commit-msg</code> 脚本的参数可以是下列三个：</p><ul><li>包含提交信息的文件名。你可以在原地更改提交信息。</li><li>提交类型。可以是信息（<code>-m</code> 或 <code>-F</code> 选项），模板（<code>-t</code> 选项），merge（如果是个合并提交）或 squash（如果这个提交插入了其他提交）。</li><li>相关提交的 SHA1 哈希字串。只有当 <code>-c</code>、<code>-C</code> 或 <code>--amend</code> 选项出现时才需要。</li></ul><p>和 <code>pre-commit</code> 一样，以非0状态退出会放弃提交。</p><p>我们已经看过一个修改提交信息的简单例子，现在我们来看一个更有用的脚本。使用 issue 跟踪器时，我们通常在单独的分支上处理 issue。如果你在分支名中包含了 issue 编号，你可以使用 <code>prepare-commit-msg</code> 钩子来自动地将它包括在那个分支的每个提交信息中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集参数</span></span><br><span class="line">commit_msg_filepath = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">2</span>:</span><br><span class="line">    commit_type = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    commit_type = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">    commit_hash = sys.argv[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    commit_hash = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;prepare-commit-msg: File: %s\nType: %s\nHash: %s&quot;</span> % (commit_msg_filepath, commit_type, commit_hash)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测我们所在的分支</span></span><br><span class="line">branch = check_output([<span class="string">&#x27;git&#x27;</span>, <span class="string">&#x27;symbolic-ref&#x27;</span>, <span class="string">&#x27;--short&#x27;</span>, <span class="string">&#x27;HEAD&#x27;</span>]).strip()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;prepare-commit-msg: On branch &#x27;%s&#x27;&quot;</span> % branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用issue编号生成提交信息</span></span><br><span class="line"><span class="keyword">if</span> branch.startswith(<span class="string">&#x27;issue-&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;prepare-commit-msg: Oh hey, it&#x27;s an issue branch.&quot;</span></span><br><span class="line">    result = re.<span class="keyword">match</span>(<span class="string">&#x27;issue-(.*)&#x27;</span>, branch)</span><br><span class="line">    issue_number = result.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(commit_msg_filepath, <span class="string">&#x27;r+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">        f.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        f.write(<span class="string">&quot;ISSUE-%s %s&quot;</span> % (issue_number, content))</span><br></pre></td></tr></table></figure><p>首先，上面的 <code>prepare-commit-msg</code> 钩子告诉你如何收集传入脚本的所有参数。接下来，它调用了 <code>git symbolic-ref --short HEAD</code> 来获取对应 HEAD 的分支名。如果分支名以 <code>issue-</code> 开头，它会重写提交信息文件，在第一行加上 issue 编号。比如你的分支名 <code>issue-224</code>，下面的提交信息将会生成：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ISSUE-<span class="number">224</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment"># On branch issue-224</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   modified:   test.txt</span></span><br></pre></td></tr></table></figure><p>有一点要记住的是即使用户用 <code>-m</code> 传入提交信息，<code>prepare-commit-msg</code> 也会运行。也就是说，上面这个脚本会自动插入 <code>ISSUE-[#]</code> 字符串，而用户无法更改。你可以检查第二个参数是否是提交类型来处理这个情况。</p><p>但是，如果没有 <code>-m</code> 选项，<code>prepare-commit-msg</code> 钩子允许用户修改生成后的提交信息。所以脚本的目的是为了方便，而不是推行强制的提交信息规范。如果你要这么做，你需要下一节所讲的 <code>commit-msg</code> 钩子。</p><h3 id="commit-msg"><a href="#commit-msg" class="headerlink" title="commit-msg"></a>commit-msg</h3><p><code>commit-msg</code> 钩子和 <code>prepare-commit-msg</code> 钩子很像，但它会在用户输入提交信息之后被调用。这适合用来提醒开发者他们的提交信息不符合你团队的规范。</p><p>传入这个钩子唯一的参数是包含提交信息的文件名。如果它不喜欢用户输入的提交信息，它可以在原地修改这个文件（和 <code>prepare-commit-msg</code> 一样），或者它会以非 0 状态退出，放弃这个提交。</p><p>比如说，下面这个脚本确认用户没有删除 <code>prepare-commit-msg</code> 脚本自动生成的 <code>ISSUE-[#]</code> 字符串。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集参数</span></span><br><span class="line">commit_msg_filepath = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测所在的分支</span></span><br><span class="line">branch = check_output([<span class="string">&#x27;git&#x27;</span>, <span class="string">&#x27;symbolic-ref&#x27;</span>, <span class="string">&#x27;--short&#x27;</span>, <span class="string">&#x27;HEAD&#x27;</span>]).strip()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;commit-msg: On branch &#x27;%s&#x27;&quot;</span> % branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测提交信息，判断是否是一个issue提交</span></span><br><span class="line"><span class="keyword">if</span> branch.startswith(<span class="string">&#x27;issue-&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;commit-msg: Oh hey, it&#x27;s an issue branch.&quot;</span></span><br><span class="line">    result = re.<span class="keyword">match</span>(<span class="string">&#x27;issue-(.*)&#x27;</span>, branch)</span><br><span class="line">    issue_number = result.group(<span class="number">1</span>)</span><br><span class="line">    required_message = <span class="string">&quot;ISSUE-%s&quot;</span> % issue_number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(commit_msg_filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> content.startswith(required_message):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;commit-msg: ERROR! The commit message must start with &#x27;%s&#x27;&quot;</span> % required_message</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>虽然用户每次创建提交时，这个脚本都会运行。但你还是应该避免做检查提交信息之外的事情。如果你需要通知其他服务一个快照已经被提交了，你应该使用 <code>post-commit</code> 这个钩子。</p><h3 id="post-commit"><a href="#post-commit" class="headerlink" title="post-commit"></a>post-commit</h3><p><code>post-commit</code> 钩子在 <code>commit-msg</code> 钩子之后立即被运行 。它无法更改 <code>git commit</code> 的结果，所以这主要用于通知用途。</p><p>这个脚本没有参数，而且退出状态不会影响提交。对于大多数 <code>post-commit</code> 脚本来说，你只是想访问你刚刚创建的提交。你可以用 <code>git rev-parse HEAD</code> 来获得最近一次提交的SHA1哈希字串，或者你可以用 <code>git log -l HEAD</code> 获取完整的信息。</p><p>比如说，如果你需要每次提交快照时向老板发封邮件（也许对于大多数工作流来说这不是个好的想法），你可以加上下面这个 <code>post-commit</code> 钩子。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得新提交的git log --stat输出</span></span><br><span class="line">log = check_output([<span class="string">&#x27;git&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;-1&#x27;</span>, <span class="string">&#x27;--stat&#x27;</span>, <span class="string">&#x27;HEAD&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个纯文本的邮件内容</span></span><br><span class="line">msg = MIMEText(<span class="string">&quot;Look, I&#x27;m actually doing some work:\n\n%s&quot;</span> % log)</span><br><span class="line"></span><br><span class="line">msg[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;Git post-commit hook notification&#x27;</span></span><br><span class="line">msg[<span class="string">&#x27;From&#x27;</span>] = <span class="string">&#x27;mary@example.com&#x27;</span></span><br><span class="line">msg[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&#x27;boss@example.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送信息</span></span><br><span class="line">SMTP_SERVER = <span class="string">&#x27;smtp.example.com&#x27;</span></span><br><span class="line">SMTP_PORT = <span class="number">587</span></span><br><span class="line"></span><br><span class="line">session = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)</span><br><span class="line">session.ehlo()</span><br><span class="line">session.starttls()</span><br><span class="line">session.ehlo()</span><br><span class="line">session.login(msg[<span class="string">&#x27;From&#x27;</span>], <span class="string">&#x27;secretPassword&#x27;</span>)</span><br><span class="line"></span><br><span class="line">session.sendmail(msg[<span class="string">&#x27;From&#x27;</span>], msg[<span class="string">&#x27;To&#x27;</span>], msg.as_string())</span><br><span class="line">session.quit()</span><br></pre></td></tr></table></figure><p>你虽然可以用 <code>post-commit</code> 来触发本地的持续集成系统，但大多数时候你想用的是 <code>post-receive</code> 这个钩子。它运行在服务端而不是用户的本地机器，它同样在任何开发者推送代码时运行。那里更适合你进行持续集成。</p><h3 id="post-checkout"><a href="#post-checkout" class="headerlink" title="post-checkout"></a>post-checkout</h3><p><code>post-checkout</code> 钩子和 <code>post-commit</code> 钩子很像，但它在你用 <code>git checkout</code> 查看引用的时候被调用。这是用来清理你的工作目录中可能会令人困惑的生成文件。</p><p>这个钩子接受三个参数，它的返回状态不影响 <code>git checkout</code> 命令。</p><ul><li>HEAD 前一次提交的引用</li><li>新的 HEAD 的引用</li><li>1 或 0，分别代表是分支 checkout 还是文件 checkout。</li></ul><p>Python 程序员经常遇到的问题是切换分支后那些之前生成的 <code>.pyc</code> 文件。解释器有时使用 <code>.pyc</code> 而不是 <code>.py</code> 文件。为了避免歧义，你可以在每次用 <code>post-checkout</code> 切换到新的分支的时候，删除所有 <code>.pyc</code> 文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集参数</span></span><br><span class="line">previous_head = sys.argv[<span class="number">1</span>]</span><br><span class="line">new_head = sys.argv[<span class="number">2</span>]</span><br><span class="line">is_branch_checkout = sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_branch_checkout == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;post-checkout: This is a file checkout. Nothing to do.&quot;</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;post-checkout: Deleting all &#x27;.pyc&#x27; files in working directory&quot;</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">        ext = os.path.splitext(filename)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> ext == <span class="string">&#x27;.pyc&#x27;</span>:</span><br><span class="line">            os.unlink(os.path.join(root, filename))</span><br></pre></td></tr></table></figure><p>钩子脚本当前的工作目录总是位于仓库的根目录下，所以 <code>os.walk(&#39;.&#39;)</code> 调用遍历了仓库中所有文件。接下来，我们检查它的拓展名，如果是 <code>.pyc</code> 就删除它。</p><p>通过 <code>post-checkout</code> 钩子，你还可以根据你切换的分支来来更改工作目录。比如说，你可以在代码库外面使用一个插件分支来储存你所有的插件。如果这些插件需要很多二进制文件而其他分支不需要，你可以选择只在插件分支上 build。</p><h3 id="pre-rebase"><a href="#pre-rebase" class="headerlink" title="pre-rebase"></a>pre-rebase</h3><p><code>pre-rebase</code> 钩子在 <code>git rebase</code> 发生更改之前运行，确保不会有什么糟糕的事情发生。</p><p>这个钩子有两个参数：fork 之前的上游分支，将要 rebase 的下游分支。如果 rebase 当前分支则第二个参数为空。以非 0 状态退出会放弃这次 rebase。</p><p>比如说，如果你想彻底禁用 rebase 操作，你可以使用下面的 <code>pre-rebase</code> 脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用所有rebase</span></span><br><span class="line">echo <span class="string">&quot;pre-rebase: Rebasing is dangerous. Don&#x27;t do it.&quot;</span></span><br><span class="line">exit <span class="number">1</span></span><br></pre></td></tr></table></figure><p>每次运行 <code>git rebase</code>，你都会看到下面的信息：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pre-rebase: Rebasing is dangerous. Don&#x27;t do it.</span><br><span class="line">The pre-rebase hook refused to rebase.</span><br></pre></td></tr></table></figure><p>内置的 <code>pre-rebase.sample</code> 脚本是一个更复杂的例子。它在何时阻止 rebase 这方面更加智能。它会检查你当前的分支是否已经合并到了下一个分支中去（也就是主分支）。如果是的话，rebase 可能会遇到问题，脚本会放弃这次 rebase。</p><h2 id="服务端钩子"><a href="#服务端钩子" class="headerlink" title="服务端钩子"></a>服务端钩子</h2><p>服务端钩子和本地钩子几乎一样，只不过它们存在于服务端的仓库中（比如说中心仓库，或者开发者的公共仓库）。当和官方仓库连接时，其中一些可以用来拒绝一些不符合规范的提交。</p><p>这节中我们要讨论下面三个服务端钩子：</p><ul><li>pre-receive</li><li>update</li><li>post-receive</li></ul><p>这些钩子都允许你对 <code>git push</code> 的不同阶段做出响应。</p><p>服务端钩子的输出会传送到客户端的控制台中，所以给开发者发送信息是很容易的。但你要记住这些脚本在结束完之前都不会返回控制台的控制权，所以你要小心那些长时间运行的操作。</p><h3 id="pre-receive"><a href="#pre-receive" class="headerlink" title="pre-receive"></a>pre-receive</h3><p><code>pre-receive</code> 钩子在有人用 <code>git push</code> 向仓库推送代码时被执行。它只存在于远端仓库中，而不是原来的仓库中。</p><p>这个钩子在任意引用被更新前被执行，所以这是强制推行开发规范的好地方。如果你不喜欢推送的那个人（多大仇 &#x3D; &#x3D;），提交信息的格式，或者提交的更改，你都可以拒绝这次提交。虽然你不能阻止开发者写出糟糕的代码，但你可以用 <code>pre-receive</code> 防止这些代码流入官方的代码库。</p><p>这个脚本没有参数，但每一个推送上来的引用都会以下面的格式传入脚本的单独一行：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;old-value&gt; &lt;new-value&gt; &lt;ref-name&gt;</span><br></pre></td></tr></table></figure><p>你可以看到这个钩子做了非常简单的事，就是读取推送上来的引用并且把它们打印出来。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取用户试图更新的所有引用</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.<span class="built_in">input</span>():</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;pre-receive: Trying to push ref: %s&quot;</span> % line</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放弃推送</span></span><br><span class="line"><span class="comment"># sys.exit(1)</span></span><br></pre></td></tr></table></figure><p>这和其它钩子相比略微有些不同，因为信息是通过标准输入而不是命令行传入的。在远端仓库的 <code>.git/hooks</code> 中加上这个脚本，推送到 master 分支，你会看到下面这些信息打印出来：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b6b36c697eb2d24302f89aa22d9170dfe609855b 85baa88c22b52ddd24d71f05db31f4e46d579095 refs/heads/master</span><br></pre></td></tr></table></figure><p>你可以用 SHA1 哈希字串，或者底层的 Git 命令，来检查将要引入的更改。一些常见的使用包括：</p><ul><li>拒绝将上游分支 rebase 的更改</li><li>防止错综复杂的合并（非快速向前，会造成项目历史非线性）</li><li>检查用户是否有正确的权限来做这些更改（大多用于中心化的 Git 工作流中）</li><li>如果多个引用被推送，在 <code>pre-receive</code> 中返回非 0 状态，拒绝所有提交。如果你想一个个接受或拒绝分支，你需要使用 <code>update</code> 钩子</li></ul><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p><code>update</code> 钩子在 <code>pre-receive</code> 之后被调用，用法也差不多。它也是在实际更新前被调用的，但它可以分别被每个推送上来的引用分别调用。也就是说如果用户尝试推送到4个分支，<code>update</code> 会被执行 4 次。和 <code>pre-receive</code> 不一样，这个钩子不需要读取标准输入。事实上，它接受三个参数：</p><ul><li>更新的引用名称</li><li>引用中存放的旧的对象名称</li><li>引用中存放的新的对象名称</li></ul><p>这些信息和 <code>pre-receive</code> 相同，但因为每次引用都会分别触发更新，你可以拒绝一些引用而接受另一些。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">branch = sys.argv[<span class="number">1</span>]</span><br><span class="line">old_commit = sys.argv[<span class="number">2</span>]</span><br><span class="line">new_commit = sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Moving &#x27;%s&#x27; from %s to %s&quot;</span> % (branch, old_commit, new_commit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只放弃当前分支的推送</span></span><br><span class="line"><span class="comment"># sys.exit(1)</span></span><br></pre></td></tr></table></figure><p>上面这个钩子简单地输出了分支和新旧提交的哈希字串。当你向远程仓库推送超过一个分支时，你可以看到每个分支都有输出。</p><h3 id="post-receive"><a href="#post-receive" class="headerlink" title="post-receive"></a>post-receive</h3><p><code>post-receive</code> 钩子在成功推送后被调用，适合用于发送通知。对很多工作流来说，这是一个比 <code>post-commit</code> 更好的发送通知的地方，因为这些更改在公共的服务器而不是用户的本地机器上。给其他开发者发送邮件或者触发一个持续集成系统都是 <code>post-receive</code> 常用的操作。</p><p>这个脚本没有参数，但和 <code>pre-receive</code> 一样通过标准输入读取。</p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中，我们学习了如果用 Git 钩子来修改内部行为，当仓库中特定的事件发生时接受消息。钩子是存在于 <code>git/hooks</code> 仓库中的普通脚本，因此也非常容易安装和定制。</p><p>我们还看了一些常用的本地和服务端的钩子。这使得我们能够介入到整个开发生命周期中去。我们现在知道了如何在创建提交或推送的每个阶段执行自定义的操作。有了这些简单的脚本知识，你就可以对 Git 仓库为所欲为了 :]</p><hr><h1 id="4-5-Git提交引用和引用日志"><a href="#4-5-Git提交引用和引用日志" class="headerlink" title="4.5 Git提交引用和引用日志"></a>4.5 Git提交引用和引用日志</h1><p>提交是 Git 的精髓所在，你无时不刻不在创建和缓存提交、查看以前的提交，或者用各种Git命令在仓库间转移你的提交。大多数的命令都对同一个提交操作，而有些会接受提交的引用作为参数。比如，你可以给 <code>git checkout</code> 传入一个引用来查看以前的提交，或者传入一个分支名来切换到对应的分支。</p><p>知道提交的各种引用方式之后，Git 的命令就会变得更加强大。在这章中，我们研究提交的各种引用方式，来一窥 <code>git checkout</code>、<code>git branch</code>、<code>git push</code> 等命令的工作原理。</p><p>我们还会学到如何使用 Git 的引用日志查看似乎已被删除的提交。</p><h2 id="哈希字串"><a href="#哈希字串" class="headerlink" title="哈希字串"></a>哈希字串</h2><p>引用一个提交最直接的方式是通过 SHA-1 的哈希字串，这是每个提交唯一的 ID。你可以在 <code>git log</code> 的输出中找到提交的哈希字串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commit 0c708fdec272bc4446c6cabea4f0022c2b616eba</span><br><span class="line">Author: Mary Johnson &lt;mary@example.com&gt;</span><br><span class="line">Date:   Wed Jul 9 16:37:42 2014 -0500</span><br><span class="line"></span><br><span class="line">    一些提交信息</span><br></pre></td></tr></table></figure><p>在 Git 命令中传递时，你只需要提供足以确定那个提交的哈希子串即可。比如，你可以这样用 <code>git show</code> 的命令显示上面的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show 0c708f</span><br></pre></td></tr></table></figure><p>有时，我们需要把分支、标签或者其他间接的引用转变成对应提交的哈希。<code>git rev-parse</code> 命令正是你需要的。下面这个命令返回 master 分支提交的哈希字串：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-parse master</span><br></pre></td></tr></table></figure><p>当你写的自定义脚本中需要将提交引用作为参数时，这个命令非常有用。你可以让 <code>git rev-parse</code> 帮你处理转换，而不用手动做这件事。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>ref 是提交的间接引用。你可以把它当做哈希字串的别名，但对用户更友好。这就是 Git 内部表示分支和标签的机制。</p><p>引用以一段普通的文本存在于 <code>.git/refs</code> 目录中，就是我们平时说的那个 <code>.git</code>。你去 <code>.git/refs</code> 文件夹查看仓库中的引用。你可以看到下面这样的结构，但具体的文件取决于你的仓库中有什么分支和标签，以及你的远程仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.git/refs/</span><br><span class="line">    heads/</span><br><span class="line">        master</span><br><span class="line">        some-feature</span><br><span class="line">    remotes/</span><br><span class="line">        origin/</span><br><span class="line">            master</span><br><span class="line">    tags/</span><br><span class="line">        v0.9</span><br></pre></td></tr></table></figure><p><code>heads</code>目录定义了你本地仓库中的所有分支。每一个文件名和你的分支名一一对应，文件中包含一个提交的哈希字串。这个就是分支顶端的所在位置。为了验证这一点，试试在 Git 根目录运行下面这两个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出`refs/heads/master`文件内容</span></span><br><span class="line">cat .git/refs/heads/master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看`master`分支尾端的提交</span></span><br><span class="line">git log -1 master</span><br></pre></td></tr></table></figure><p><code>cat</code> 命令返回的哈希字串和 <code>git log</code> 命令显示的哈希字串应该是一致的。</p><p>如果要改变 master 分支的位置，Git 只需要更改 <code>refs/heads/master</code> 的文件内容。同样地，创建新的分支也只需要将当前提交的哈希字串写入到新的文件中。这也是为什么 Git 分支比 SVN 轻量那么多的其中一个原因。</p><p><code>tags</code> 目录也是以相同的方式存储，只不过其中存的是标签而不是分支。<code>remotes</code> 目录将你之前用 <code>git remote</code> 命令创建的所有远程仓库以子目录的形式一一列出。在每个文件夹中，你可以找到所有 fetch 到本地仓库的远程分支。</p><h3 id="指定引用"><a href="#指定引用" class="headerlink" title="指定引用"></a>指定引用</h3><p>当你向 Git 命令传入引用的时候，你既可以指定引用完整的名称，也可以使用缩写，然后让 Git 来寻找匹配。你应该已经对引用的缩写很熟悉了，每次你通过名称引用分支的时候都会这么做。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show some-feature</span><br></pre></td></tr></table></figure><p>这里的 <code>some-feature</code> 参数其实是分支名的缩写。Git 在使用前将它解析成 <code>refs/heads/some-feature</code>。你也可以在命令行中指定引用的全称，就像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show refs/heads/some-feature</span><br></pre></td></tr></table></figure><p>这避免了引用可能产生的所有歧义。这是非常必要的，比如你同时有一个标签和分支都叫 <code>some-feature</code>。然而，如果使用正常的命名规范，你不应该有这样的歧义。</p><p>我们会在 refspec 一节见到更多引用名称。</p><h2 id="打包引用目录"><a href="#打包引用目录" class="headerlink" title="打包引用目录"></a>打包引用目录</h2><p>对于大型仓库，Git 会周期性地执行垃圾回收来移除不需要的对象，将所有引用文件压缩成单个文件来获得更好的性能。你可以使用这个命令强制垃圾回收来执行压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc</span><br></pre></td></tr></table></figure><p>这个命令把 <code>refs</code> 文件夹中所有单独的分支和标签移动到了 <code>.git</code> 根目录下的 <code>packed-refs</code> 文件中。如果你打开这个文件，你会发现提交的哈希字串和引用之间的映射关系：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00f54250cf4e549fdfcafe2cf9a2c90bc3800285 refs/heads/feature</span><br><span class="line">0e25143693cfe9d5c2e83944bbaf6d3c4505eb17 refs/heads/master</span><br><span class="line">bb883e4c91c870b5fed88fd36696e752fb6cf8e6 refs/tags/v0.9</span><br></pre></td></tr></table></figure><p>另一方面，正常的 Git 功能不会受到任何影响。但如果你好奇你的 <code>.git/refs</code> 文件夹为什么是空的，这一节告诉你了答案。</p><h2 id="特殊的引用"><a href="#特殊的引用" class="headerlink" title="特殊的引用"></a>特殊的引用</h2><p>除了 <code>refs</code> 文件夹外，<code>.git</code> 根目录还有一些特殊的引用。如下所示：</p><ul><li>HEAD – 当前所在的提交或分支。</li><li>FETCH_HEAD – 远程仓库中 fetch 到的最新一次提交。</li><li>ORIG_HEAD – HEAD 的备份引用，避免损坏。</li><li>MERGE_HEAD – 你通过 <code>git merge</code> 并入当前分支的引用（们）。</li><li>CHERRY_PICK_HEAD – 你 <code>cherry pick</code> 使用的引用。</li></ul><p>这些引用由 Git 在需要时创建和更新。比如说，<code>git pull</code> 命令首先运行 <code>git fetch</code>，而 <code>FETCH_HEAD</code> 引用随之改变。然后，运行 <code>git merge FETCH_HEAD</code> 来将 fetch 到的分支最终并入仓库。当然，你也可以使用其他任何引用，因为我相信你已经对 <code>HEAD</code> 很熟悉了。</p><p>这些文件包含的内容取决于它们的类型和你的仓库状态。<code>HEAD</code> 引用可以包含符号链接（指向另一个引用而不是哈希字串），或是提交的哈希字串。比如说，看看当你在 master 分支上时 <code>HEAD</code> 的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">cat .git/HEAD</span><br></pre></td></tr></table></figure><p>这个命令会输出 <code>ref: refs/heads/master</code>，也就是说 HEAD 指向 <code>refs/heads/master</code> 这个引用。这也正是 Git 如何知道现在所在的是 master 分支。如果你要切换分支，<code>HEAD</code> 的内容将会被更新到新的分支。但如果你要切换到一个提交而不是分支，<code>HEAD</code> 会包含一个提交的哈希而不是符号引用。这就是 Git 如何知道现在 <code>HEAD</code> 处于分离状态。</p><p>在大多数情况下，<code>HEAD</code> 是你唯一用得到的引用。其它引用一般只在写底层脚本，接触到 Git 内部的工作机制时才会用到。</p><h2 id="refspec"><a href="#refspec" class="headerlink" title="refspec"></a>refspec</h2><p>refspec 将本地分支和远程分支对应起来。我们可以通过它用本地的 Git 命令管理远程分支，设置一些高级的 <code>git push</code> 和 <code>git fetch</code> 行为。</p><p>refspec 的定义是这样的：<code>[+]&lt;src&gt;:&lt;dst&gt;</code>。<code>&lt;src&gt;</code> 参数是本地的源分支，<code>&lt;dst&gt;</code> 是远程的目标分支。可选的 <code>+</code> 号强制远程仓库采用非快速向前的更新策略。</p><p>refspec 可以和 <code>git push</code> 一起使用，用来指定远程的分支的名称。比如，下面这个命令将 master 分支推送到远程 origin，就像一般的 <code>git push</code> 一样，但它使用 qa-master 作为远程仓库中的分支名。对于 QA 团队来说，这个方法非常有用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:refs/heads/qa-master</span><br></pre></td></tr></table></figure><p>你也可以用 refspec 来删除远程分支。feature 分支的工作流经常会遇到这种情况，将 feature 分支推送到远程仓库中（比如说为了备份）。你删除本地的 feature 分支之后，远程的 feature 分支依然存在，虽然现在我们已经不再需要它。你可以 push 一个 <code>&lt;src&gt;</code> 参数为空的 refspec 来删除它们，就像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin:some-feature</span><br></pre></td></tr></table></figure><p>这非常方便，因为你不需要登录到你的远程仓库然后手动删除这些远程分支。注意，在 Git v1.7.0 之后你可以用 <code>--delete</code> 标记代替上面这个方法。下面这个命令和上面的命令作用相同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete some-feature</span><br></pre></td></tr></table></figure><p>在 Git 配置文件中增加几行，你就可以更改 <code>git fetch</code> 的行为。默认地，<code>git fetch</code> 会 fetch 远程仓库中所有分支。原因就是 <code>.git/config</code> 文件的这段配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = https://git@github.com:mary/example-repo.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure><p>fetch 这一行告诉 <code>git fetch</code> 从 origin 仓库中下载所有分支。但是，一些工作流不需要所有分支。比如，很多持续集成工作流只关心 master 分支。为了做到这一点，我们需要将 fetch 这行改成下面这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = https://git@github.com:mary/example-repo.git</span><br><span class="line">    fetch = +refs/heads/master:refs/remotes/origin/master</span><br></pre></td></tr></table></figure><p>你还可以类似地修改 <code>git push</code> 的配置。比如，如果你总是将 master 分支推送到 origin 仓库的 qa-master 分支（就像我们之前做的一样），你要把配置文件改成这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = https://git@github.com:mary/example-repo.git</span><br><span class="line">    fetch = +refs/heads/master:refs/remotes/origin/master</span><br><span class="line">    push = refs/heads/master:refs/heads/qa-master</span><br></pre></td></tr></table></figure><p>refspec 给了你完全的掌控权，可以定制 Git 命令如何在仓库之间转移分支。你可以重命名或是删除你的本地分支，fetch 或是 push 不同的分支名，修改 <code>git push</code> 和 <code>git fetch</code> 的设置，只对你想要的分支进行操作。</p><h2 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h2><p>你还可以通过提交之间的相对关系来引用。<code>~</code> 符号让你访问父节点的提交。比如说，下面这个命令显示 <code>HEAD</code> 祖父节点的提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show HEAD~2</span><br></pre></td></tr></table></figure><p>但是，面对合并提交（merge commit）的时候，事情就会变得有些复杂。因为合并提交有多个父节点，所以你可以找到多条回溯的路径。对于 3 路合并，第一个父节点是你执行合并时的分支，第二个父节点是你传给 <code>git merge</code> 命令的分支。</p><p><code>~</code> 符号总是选择合并提交的第一个父节点。如果你想选择其他父节点，你需要用 <code>^</code> 符号来指定。比如说，<code>HEAD</code> 是一个合并提交，下面这个命令返回 <code>HEAD</code> 的第二个父节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show HEAD^2</span><br></pre></td></tr></table></figure><p>你可以使用不止一个 <code>^</code> 来查看超过一层的节点。比如，下面的命令显示的是 <code>HEAD</code> 的祖父节点，也就是 <code>HEAD</code> 第二个父节点的父节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show HEAD^2^1</span><br></pre></td></tr></table></figure><p>为了阐明 <code>~</code> 和 <code>^</code> 是如何工作的，下面这张图告诉你如何使用相对引用，来指向任意的提交。有的提交可以通过多种方式引用。</p><p>相对引用在命令中的用法和普通的引用相同。比如，下面所有命令中使用的都是相对引用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只列出合并提交的第二个父节点的父节点</span></span><br><span class="line">git log HEAD^2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除当前分支最新的 3 个提交</span></span><br><span class="line">git reset HEAD~3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">交互式rebase当前分支最新的 3 个提交</span></span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><h2 id="引用日志"><a href="#引用日志" class="headerlink" title="引用日志"></a>引用日志</h2><p>引用日志是 Git 的安全网。它记录了你在仓库中做的所有更改，不管你有没有提交。你也可以认为这是你本地更改的完整历史记录。运行 <code>git reflog</code> 命令查看引用日志。它应该会打印出像下面这样的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">400e4b7 HEAD@&#123;0&#125;: checkout: moving from master to HEAD~2</span><br><span class="line">0e25143 HEAD@&#123;1&#125;: commit (amend): 将一些很赞的新特性引入`master`</span><br><span class="line">00f5425 HEAD@&#123;2&#125;: commit (merge): 合并&#x27;feature&#x27;分支</span><br><span class="line">ad8621a HEAD@&#123;3&#125;: commit: 结束feature分支开发</span><br></pre></td></tr></table></figure><p>说人话就是：</p><ul><li>你刚刚切换到 <code>HEAD~2</code></li><li>你刚刚修改了一个提交信息</li><li>你刚刚把 feature 分支合并到了 master 分支</li><li>你刚刚提交了一份缓存</li></ul><p><code>HEAD&#123;&lt;n&gt;&#125;</code> 语法允许你引用保存在日志中的提交。这和上一节的 <code>HEAD~&lt;n&gt;</code> 引用差不多，不过 <code>&lt;n&gt;</code> 指的是引用日志中的对象，而不是提交历史。</p><p>你可以用办法回到之前可能已经丢失的状态。比如，你刚刚用 <code>git reset</code> 方法粉碎了新的 feature 分支。你的引用日志看上去可能会是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ad8621a HEAD@&#123;0&#125;: reset: moving to HEAD~3</span><br><span class="line">298eb9f HEAD@&#123;1&#125;: commit: 一些提交信息</span><br><span class="line">bbe9012 HEAD@&#123;2&#125;: commit: 继续开发</span><br><span class="line">9cb79fa HEAD@&#123;3&#125;: commit: 开始新特性开发</span><br></pre></td></tr></table></figure><p><code>git reset</code> 前的三个提交现在都成了悬挂的了，也就是说除了引用日志之外没有办法再引用到它们。现在，假设你意识到了你不应该丢掉你全部的工作。你只需要切换到 <code>HEAD@&#123;1&#125;</code> 这个提交就能回到你运行 <code>git reset</code> 之前仓库的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure><p>这会让你处于 <code>HEAD</code> 分离的状态。你可以从这里开始，创建新的分支，继续你的工作。</p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>你现在对 Git 提交的引用应该已经相当熟悉了。我们知道了分支和标签是如何存在于 <code>.git</code> 的子文件夹 refs 中，如何读取打包的引用文件，如何使用 refspec 来进行更高级的 push 和 fetch 操作，如何使用 <code>~</code> 和 <code>^</code> 符号来遍历分支结构。</p><p>我们还了解了引用日志，来引用到其他方式已经不存在的提交。这是一种很好的恢复误删提交的方法。</p><p>它的意义在于：在任何开发场景下，你都能找到你需要的特定提交。你很容易就可以把这些技巧用在你一有的 Git 知识中，因为很多常用的命令都接受引用作为参数，包括 <code>git log</code>、<code>git show</code>、<code>git checkout</code>、<code>git reset</code>、<code>git revert</code>、<code>git rebase</code> 等等。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;1-1-Git-简易指南&quot;&gt;&lt;a href=&quot;#1-1-Git-简易指南&quot; class=&quot;headerlink&quot; title=&quot;1.1 Git 简易指南&quot;&gt;&lt;/a&gt;1.1 Git 简易指南&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/git1.png&quot;&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>汇编</title>
    <link href="http://example.com/2023/10/26/%E6%B1%87%E7%BC%96/"/>
    <id>http://example.com/2023/10/26/%E6%B1%87%E7%BC%96/</id>
    <published>2023-10-26T11:45:36.000Z</published>
    <updated>2023-10-26T13:18:35.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-第一段代码：Hello-World"><a href="#1-第一段代码：Hello-World" class="headerlink" title="1. 第一段代码：Hello World"></a>1. 第一段代码：Hello World</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DSEG SEGMENT</span><br><span class="line">        MESS DB &#x27;Hello, World!&#x27;,0DH,0AH,24H</span><br><span class="line">DSEG ENDS</span><br><span class="line"></span><br><span class="line">SSEG SEGMENT PARA STACK</span><br><span class="line">             DW 256 DUP(?)</span><br><span class="line">SSEG ENDS</span><br><span class="line"></span><br><span class="line">CSEG SEGMENT</span><br><span class="line">              ASSUME CS:CSEG, DS:DSEG</span><br><span class="line">        BEGIN:MOV    AX,DSEG</span><br><span class="line">              MOV    DS,AX</span><br><span class="line">              MOV    DX,OFFSET MESS</span><br><span class="line">              </span><br><span class="line">              MOV    AH,9</span><br><span class="line">              INT    21H</span><br><span class="line">              </span><br><span class="line">              MOV    AH,4CH</span><br><span class="line">              INT    21H</span><br><span class="line">CSEG ENDS</span><br><span class="line">END BEGIN</span><br></pre></td></tr></table></figure><h1 id="2-基础指令"><a href="#2-基础指令" class="headerlink" title="2. 基础指令"></a>2. 基础指令</h1><p>用以下指令可以写一个基础的程序：</p><ol><li>段定义+Assume</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XXX SEGMENT(XXX:DATA/STACK/CODE)</span><br><span class="line">XXX ENDS</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ASSUME CS:CSEG, DS:DSEG, SS:SSEG</span><br><span class="line">MOV AX,DSEG</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,SSEG</span><br><span class="line">MOV SS,AX</span><br></pre></td></tr></table></figure><ol start="2"><li>数据定义</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(ORG 1000)</span><br><span class="line">(NAME) DB ?/...</span><br><span class="line">(NAME) DB N DUP(?/...)</span><br><span class="line">db:12H/dw:1234H</span><br></pre></td></tr></table></figure><ol start="3"><li>MOV</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,Y</span><br><span class="line">MOV Y,AX</span><br><span class="line">MOV AX,BX</span><br></pre></td></tr></table></figure><ol start="4"><li>+-</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ADD AX,X;AX+=X</span><br><span class="line">SUB AX,X;</span><br><span class="line">INC AX;AX++</span><br><span class="line">DEC AX;AX--</span><br><span class="line"></span><br><span class="line">NEG AX ;取负</span><br></pre></td></tr></table></figure><ol start="5"><li>程序的终止</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><hr><h1 id="3-寄存器的使用"><a href="#3-寄存器的使用" class="headerlink" title="3. 寄存器的使用"></a>3. 寄存器的使用</h1><p>在汇编语言中，我们不能对内存中的数据进行直接操作，如果要操作，需要把数据先<code>MOV</code>到寄存器中再进行处理。</p><p>8086 CPU 中有14个16位寄存器 。16位的存储可以用16进制表示，BeLike：<code>123AH</code>（H表示16进制)在查看内存情况的时候，由于数据从高位到低位存储，BeLike：<code>3A 12</code></p><p><img src="/img/c-.1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DSEG ...</span><br><span class="line">X DB 12H</span><br><span class="line">Y DB ?</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">CSEG...</span><br><span class="line">...</span><br><span class="line">MOV AH,X</span><br><span class="line">MOV Y,AH ;Y--12H</span><br></pre></td></tr></table></figure><p>可以拆分为两个寄存器使用（AH和AL），不过各自有各自的独特作用，用到再提，这和它们的名字是关联的</p><p>说到底为什么<code>通用</code>寄存器会有<code>独特的作用</code>？<br>这是因为一些内置的指令依靠<strong>固定</strong>的寄存器传递参数，所以这些寄存器也有了独特的作用</p><p>一般来说随便用就可以，反正里面的东西不久存，只是用来做中转</p><h2 id="3-1-AX：Accumlator-累加器"><a href="#3-1-AX：Accumlator-累加器" class="headerlink" title="3.1 AX：Accumlator 累加器"></a>3.1 AX：Accumlator 累加器</h2><p>特殊功能和MUL&#x2F;DIV有关，后面再说</p><h2 id="3-2-BX：Base-基地址寄存器"><a href="#3-2-BX：Base-基地址寄存器" class="headerlink" title="3.2 BX：Base 基地址寄存器"></a>3.2 BX：Base 基地址寄存器</h2><p>可以存储地址并访问<br>说到地址，就得提一下汇编语言里地址的表示方法<br>在汇编语言里，内存中的地址BeLike：<code>204B:1001</code> （以16进制表示）<br><code>204B</code>是<strong>段地址</strong>，<code>1001</code>是<strong>偏移地址</strong>，各需要一个Word进行存储<br>有两个指令对应的获取内存单元的这两种地址<br>    <code>SEG</code>可以获取<strong>段地址</strong>（这个段就是指我们程序对应的段Segment），<code>OFFSET</code>可以获取<strong>偏移地址</strong><br>    使用这两个词只需要在MOV时加在变量前即可，比如<code>MOV BX offset X</code><br>在<code>通过地址找内容</code>这件事方面，一般用BX存储偏移地址<br>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X DW 1234H</span><br><span class="line">Y DW ?</span><br><span class="line">...</span><br><span class="line">MOV BX, OFFSET X;BX中存储了X的偏移地址</span><br><span class="line">MOV Y, [BX];BX存储的偏移地址对应的内容被存放到y</span><br></pre></td></tr></table></figure><p>一般来说，<code>[BX]</code>就是指 <code>DS:[BX]</code>，默认段地址为数据段，当然你也可以指定为CS和SS</p><h2 id="3-3-CX：Count-计数器"><a href="#3-3-CX：Count-计数器" class="headerlink" title="3.3 CX：Count 计数器"></a>3.3 CX：Count 计数器</h2><p>和循环指令<code>LOOP</code>有关</p><p>LOOP指令类似于C语言中的For循环，<code>loop NAME</code>近似于<code>for(cx;;cx--)</code><br>关于LOOP的用法，具体到程序结构再说好了~。</p><h2 id="3-4-DX：Data-数据寄存器"><a href="#3-4-DX：Data-数据寄存器" class="headerlink" title="3.4 DX：Data 数据寄存器"></a>3.4 DX：Data 数据寄存器</h2><p>特殊功能和MUL&#x2F;DIV有关，后面再说<br>也有与输入输出的暂存有关的功能（9.10号指令）</p><hr><h2 id="3-5-指针变址寄存器：SP，BP，SI，DI"><a href="#3-5-指针变址寄存器：SP，BP，SI，DI" class="headerlink" title="3.5 指针变址寄存器：SP，BP，SI，DI"></a>3.5 指针变址寄存器：SP，BP，SI，DI</h2><p>都倾向于用来存地址</p><h3 id="3-5-1-SP：Stack-Pointer"><a href="#3-5-1-SP：Stack-Pointer" class="headerlink" title="3.5.1 SP：Stack Pointer"></a>3.5.1 SP：Stack Pointer</h3><p>和堆栈段的使用有关，定义堆栈段要记得手动把SP放在栈顶</p><h3 id="3-5-2-BP：Base-Pointer"><a href="#3-5-2-BP：Base-Pointer" class="headerlink" title="3.5.2 BP：Base Pointer"></a>3.5.2 BP：Base Pointer</h3><p>和BX有类似的用法，只是一般更倾向于用在堆栈的数据里，<code>[BP]</code>默认为<code>SS:[BP]</code></p><h3 id="3-5-3-SI：Source-Index"><a href="#3-5-3-SI：Source-Index" class="headerlink" title="3.5.3 SI：Source Index"></a>3.5.3 SI：Source Index</h3><h3 id="3-5-4-DI：Destination-Index"><a href="#3-5-4-DI：Destination-Index" class="headerlink" title="3.5.4 DI：Destination Index"></a>3.5.4 DI：Destination Index</h3><p>和BX有类似的用法，<code>[SI]</code>默认为<code>DS:[SI]</code><br>如果要转移数据，倾向于用SI存原地址，DI存新地址</p><hr><h2 id="3-6-段寄存器：CS，DS，SS，ES，IP"><a href="#3-6-段寄存器：CS，DS，SS，ES，IP" class="headerlink" title="3.6 段寄存器：CS，DS，SS，ES，IP"></a>3.6 段寄存器：CS，DS，SS，ES，IP</h2><p>段的存在方便我们以<code>段地址+偏移地址</code>的方式定位内存单元<br>刚刚在例子中看到，一般的程序我们定义三个段，Data、Stack和Code，它们的作用和名字是一致的</p><p>这些寄存器都和程序段还有程序的运行有关。<br>在程序启动的时候，操作系统会把IP（Instruction Pointer）指向程序的第一句开始运行，之后IP会一直指向每次要运行的下一条指令</p><p>在代码段的开始，我们就用Assume语句声明CS、DS、SS的地址<br>和CS不同，DS和SS寄存器的值需要我们手动指定，而与SS寄存器绑定的SP指针也需要我们手动设置（SS:SP指向的就是栈顶元素）</p><p>ES是Extra Segment，程序有附加段落的时候才用，用法和DS SS差不多</p><h2 id="3-7-寄存器合集统计"><a href="#3-7-寄存器合集统计" class="headerlink" title="3.7 寄存器合集统计"></a>3.7 寄存器合集统计</h2><ul><li><p><strong>通用寄存器</strong> (General-Purpose Registers):</p><ul><li><code>AX</code>, <code>BX</code>, <code>CX</code>, <code>DX</code>: 16位寄存器</li><li><code>EAX</code>, <code>EBX</code>, <code>ECX</code>, <code>EDX</code>: 32位寄存器</li><li><code>RAX</code>, <code>RBX</code>, <code>RCX</code>, <code>RDX</code>: 64位寄存器</li></ul></li><li><p><strong>指针寄存器</strong> (Pointer Registers):</p><ul><li><code>SI</code>: 源变址寄存器 (Source Index)</li><li><code>DI</code>: 目的变址寄存器 (Destination Index)</li><li><code>BP</code>: 基址指针寄存器 (Base Pointer)</li><li><code>SP</code>: 堆栈指针寄存器 (Stack Pointer)</li></ul></li><li><p><strong>段寄存器</strong> (Segment Registers):</p><ul><li><code>CS</code>: 代码段寄存器 (Code Segment)</li><li><code>DS</code>: 数据段寄存器 (Data Segment)</li><li><code>SS</code>: 堆栈段寄存器 (Stack Segment)</li><li><code>ES</code>: 附加段寄存器 (Extra Segment)</li><li><code>FS</code>, <code>GS</code>: 额外段寄存器 (Additional Segment) [64位模式中常用于TLS]</li></ul></li><li><p><strong>指令指针寄存器</strong> (Instruction Pointer Register):</p><ul><li><code>IP</code>: 指令指针 (Instruction Pointer) - 16位</li><li><code>EIP</code>: 扩展指令指针 (Extended Instruction Pointer) - 32位</li><li><code>RIP</code>: 64位指令指针寄存器</li></ul></li><li><p><strong>标志寄存器</strong> (Flags Register):</p><ul><li><code>FLAGS</code>, <code>EFLAGS</code>, <code>RFLAGS</code>: 包含各种标志位，如零标志、进位标志、溢出标志等。</li></ul></li><li><p><strong>控制寄存器</strong> (Control Registers) 和 <strong>调试寄存器</strong> (Debug Registers): 主要用于系统控制和调试。</p><ul><li><code>CR0</code>, <code>CR2</code>, <code>CR3</code>, <code>CR4</code>: 控制寄存器</li><li><code>DR0</code>, <code>DR1</code>, <code>DR2</code>, <code>DR3</code>, <code>DR6</code>, <code>DR7</code>: 调试寄存器</li></ul></li><li><p><strong>测试寄存器</strong> (Test Registers): <code>TR6</code>, <code>TR7</code>，主要用于处理器内部测试。</p></li><li><p><strong>浮点寄存器</strong> (Floating-Point Registers): <code>ST0</code> 到 <code>ST7</code>，主要用于浮点运算。</p></li><li><p><strong>多媒体扩展寄存器</strong> (Multimedia Extension Registers): <code>MM0</code> 到 <code>MM7</code>，主要用于多媒体和SIMD（单指令多数据）操作。</p></li></ul><hr><h1 id="4-进阶指令"><a href="#4-进阶指令" class="headerlink" title="4. 进阶指令"></a>4. 进阶指令</h1><h2 id="4-1-Label和Jump：跳转"><a href="#4-1-Label和Jump：跳转" class="headerlink" title="4.1 Label和Jump：跳转"></a>4.1 Label和Jump：跳转</h2><p>一段代码可以拥有label，Jump NAME 即可跳转至label位置<br>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MAIN：MOV X,AX</span><br><span class="line">JUMP DONE</span><br><span class="line">MOV AX,Y</span><br><span class="line">...</span><br><span class="line">DONE:</span><br><span class="line">MOV AH, 4CH</span><br><span class="line">INT 21</span><br></pre></td></tr></table></figure><p>在这段程序中，<code>MOV AX,Y</code>就会直接被跳过</p><h2 id="4-2-分支和循环"><a href="#4-2-分支和循环" class="headerlink" title="4.2 分支和循环"></a>4.2 分支和循环</h2><h3 id="4-2-1-分支-CMP-JGE-…"><a href="#4-2-1-分支-CMP-JGE-…" class="headerlink" title="4.2.1 分支 CMP-JGE&#x2F;…"></a>4.2.1 分支 CMP-JGE&#x2F;…</h3><p><img src="/img/c-.3.png"></p><p>BeLike:(求abs(AX)保存在AX中)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MAIN:</span><br><span class="line">...</span><br><span class="line">CMP AX,0</span><br><span class="line">JGE DONE; Jump if Greater or Equal</span><br><span class="line">NEG AX</span><br><span class="line">DONE:</span><br><span class="line">...</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="4-2-2-循环-LOOP"><a href="#4-2-2-循环-LOOP" class="headerlink" title="4.2.2 循环  LOOP"></a>4.2.2 循环  LOOP</h3><p>一种简单的循环，类似于<code>for(cx;;cx--)</code>。（事实上，你可以用JUMP和分支结构来实现循环）</p><p>LOOP NM过程中：<br>    0. CMP CX,0<br>    1. 如果CX&gt;0，继续执行以下语句，否则跳出<br>    2. DEC CX(CX&gt;0)<br>    3. JUMP NM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV CX,6</span><br><span class="line">NM: ...</span><br><span class="line">LOOP NM;这样写一共执行CX次（声明NM时执行1次，LOOP中执行CX-1次）</span><br></pre></td></tr></table></figure><h2 id="4-3-堆栈的使用"><a href="#4-3-堆栈的使用" class="headerlink" title="4.3 堆栈的使用"></a>4.3 堆栈的使用</h2><h3 id="4-3-1-初始化"><a href="#4-3-1-初始化" class="headerlink" title="4.3.1 初始化"></a>4.3.1 初始化</h3><p>两个好用的方法</p><h4 id="4-3-1-1-堆栈段中做定义"><a href="#4-3-1-1-堆栈段中做定义" class="headerlink" title="4.3.1.1 堆栈段中做定义"></a>4.3.1.1 堆栈段中做定义</h4><ol><li>在堆栈段划分位置，保存栈顶位置</li><li>在程序段开始的时候把堆栈段的位置告诉堆栈寄存器SS，把栈顶的位置告诉指针寄存器SP</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SSEG SEGMENT</span><br><span class="line">      STACK DW  128 dup(?)</span><br><span class="line">      TOP   DW LENGTH STACK ;划定范围</span><br><span class="line">SSEG ENDS</span><br><span class="line"></span><br><span class="line">CSEG SEGMENT</span><br><span class="line">           ASSUME CS:CSEG,DS:DSEG,SS:SSEG</span><br><span class="line">      MAIN:</span><br><span class="line">           MOV    AX,DSEG</span><br><span class="line">           MOV    DS,AX</span><br><span class="line">           MOV    AX,SSEG</span><br><span class="line">           MOV    SS,AX</span><br><span class="line">           MOV    AX,TOP</span><br><span class="line">           MOV    SP,AX                        ;栈顶地址载入</span><br></pre></td></tr></table></figure><h5 id="4-3-1-2-程序段中划空间"><a href="#4-3-1-2-程序段中划空间" class="headerlink" title="4.3.1.2 程序段中划空间"></a>4.3.1.2 程序段中划空间</h5><p>直接给SP赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SSEG SEGMENT</span><br><span class="line">SSEG ENDS</span><br><span class="line">;ss:0000-ss:1000</span><br><span class="line">CSEG SEGMENT</span><br><span class="line">            ASSUME CS:CSEG, DS:DSEG,SS:SSEG</span><br><span class="line">      BEGIN:MOV    AX,DSEG</span><br><span class="line">            MOV    DS,AX</span><br><span class="line">            MOV    AX,SSEG</span><br><span class="line">            MOV    SS,AX</span><br><span class="line">            MOV    SP,1000H                      ;手动规定了1000H的空置空间(OFFSET 0H-1000H)</span><br></pre></td></tr></table></figure><h3 id="4-3-2-PUSH和POP"><a href="#4-3-2-PUSH和POP" class="headerlink" title="4.3.2 PUSH和POP"></a>4.3.2 PUSH和POP</h3><p>注意：<code>只能操作寄存器</code>，不能直接操作内存单元<br><code>PUSH AX</code>：将AX的值入栈（如果AX两个字节，就会入栈两个字节，SP也相应-2）<br><code>POP AX</code>：出栈，内容保存在AX（如果AX两个字节，就会入栈两个字节，SP也相应+2）</p><h3 id="4-3-3-用SP和BP操作堆栈"><a href="#4-3-3-用SP和BP操作堆栈" class="headerlink" title="4.3.3 用SP和BP操作堆栈"></a>4.3.3 用SP和BP操作堆栈</h3><p>在主程序只是暂存数据用的话，一般<code>不用</code>操作指针<br>但是，由于PROC需要使用到堆栈段，所以这是操作指针就是必要的，接下来在PROC中解释</p><hr><h2 id="4-4-函数：PROC和MACRO"><a href="#4-4-函数：PROC和MACRO" class="headerlink" title="4.4 函数：PROC和MACRO"></a>4.4 函数：PROC和MACRO</h2><blockquote><p>PROC&amp;CALL（子程序结构）</p></blockquote><h3 id="4-4-1-定义-PROC-RET-ENDP"><a href="#4-4-1-定义-PROC-RET-ENDP" class="headerlink" title="4.4.1 定义 PROC-RET-ENDP"></a>4.4.1 定义 PROC-RET-ENDP</h3><p>(Near 属性是默认值)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MAIN:</span><br><span class="line">CALL NM</span><br><span class="line"></span><br><span class="line">NM PROC</span><br><span class="line">...</span><br><span class="line">RET</span><br><span class="line">NM ENDP</span><br><span class="line">...</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><p>完整的表达式：<br>调用：<code>CALL FAR/NEAR PTR NM</code><br>定义：<code>NM PROC FAR/NEAR</code></p><h3 id="4-4-2-子程序属性和调用"><a href="#4-4-2-子程序属性和调用" class="headerlink" title="4.4.2 子程序属性和调用"></a>4.4.2 子程序属性和调用</h3><h4 id="4-4-2-1-段内调用"><a href="#4-4-2-1-段内调用" class="headerlink" title="4.4.2.1 段内调用"></a>4.4.2.1 段内调用</h4><p>只需要Main（主Label调用）的话空置即可（默认Near）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A:...</span><br><span class="line">CALL B;调用B</span><br><span class="line"></span><br><span class="line">PROC B:...;默认为near属性子程序</span><br><span class="line">RET</span><br><span class="line">B ENDP</span><br><span class="line">...</span><br><span class="line">END A</span><br></pre></td></tr></table></figure><h4 id="4-4-2-2-段间调用"><a href="#4-4-2-2-段间调用" class="headerlink" title="4.4.2.2 段间调用"></a>4.4.2.2 段间调用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PROC A:CALL FAR PTR B</span><br><span class="line">RET</span><br><span class="line">ENDP</span><br><span class="line"></span><br><span class="line">PROC B FAR:...;写明属性</span><br><span class="line">RET ENDP</span><br></pre></td></tr></table></figure><h3 id="4-4-3-注意堆栈"><a href="#4-4-3-注意堆栈" class="headerlink" title="4.4.3 注意堆栈"></a>4.4.3 注意堆栈</h3><p>PROC的本质是：入栈程序出口指针，RET时从回到出口指针的位置<br>所以：</p><ol><li>第一个出栈元素会是一个偏移地址</li><li>如果最后SP的指针位置不对，就无法正确RET</li></ol><p>简单的方法：<code>用寄存器BP保护SP</code>，使用BP进行数据的读取</p><blockquote><p>eg: x+y子程序化<br>…</p><ol><li>在堆栈段push任意两个长度为1word的数据</li><li>使用子程序，将这两个数据的和存储于AX</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SUM PROC ;取两个栈顶元素求和储存到AX中</span><br><span class="line">         MOV    BP,SP</span><br><span class="line">         MOV    AX,[BP+2]</span><br><span class="line">         ADD    AX,[BP+4]</span><br><span class="line">         RET</span><br><span class="line">SUM ENDP</span><br></pre></td></tr></table></figure><h3 id="4-4-4-Macro（宏定义）"><a href="#4-4-4-Macro（宏定义）" class="headerlink" title="4.4.4 Macro（宏定义）"></a>4.4.4 Macro（宏定义）</h3><p>PROC的使用有调用开销（程序的中断 跳转 继续），而MACRO没有<br>MACRO相当于写代码的人把重复写代码的过程交给了汇编器，相比子程序来说，是通过多占程序的内存来提高运行速度（对机器来说，每调用一次Macro，就是把这段指令重复了一次）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NM MACRO R1,R2...(参数)</span><br><span class="line">...</span><br><span class="line">END M</span><br><span class="line"></span><br><span class="line">NM MACRO AX,BX...(寄存器取值)</span><br></pre></td></tr></table></figure><hr><h2 id="4-5-INT-21H指令：输入-输出"><a href="#4-5-INT-21H指令：输入-输出" class="headerlink" title="4.5 INT 21H指令：输入&#x2F;输出"></a>4.5 INT 21H指令：输入&#x2F;输出</h2><h3 id="4-5-1-键盘输入"><a href="#4-5-1-键盘输入" class="headerlink" title="4.5.1 键盘输入"></a>4.5.1 键盘输入</h3><h4 id="4-5-1-1-1号指令：单个字符输入"><a href="#4-5-1-1-1号指令：单个字符输入" class="headerlink" title="4.5.1.1 1号指令：单个字符输入"></a>4.5.1.1 1号指令：单个字符输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AH,1</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><p>(内容会保存在AL)</p><h4 id="4-5-1-2-10号指令：从键盘输入字符串"><a href="#4-5-1-2-10号指令：从键盘输入字符串" class="headerlink" title="4.5.1.2 10号指令：从键盘输入字符串"></a>4.5.1.2 10号指令：从键盘输入字符串</h4><p>内存里需要划分三个部分：<br>    1.一个字节存放最大长度（你写，溢出会被裁掉）<br>    2.一个字节存放实际长度（指令运行完CPU会写）<br>    3.一些字节用来存字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">    MAXLENGTH    DB 100           ;一个字节，用它存最大的长度</span><br><span class="line">    ACTUALLENGTH DB ?             ;一个字节，用它存实际的长度，在指令执行后会被填写</span><br><span class="line">    STRING       DB 100 DUP(?)    ;用来存字符串</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">STACK SEGMENT</span><br><span class="line">STACK ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">         ASSUME DS:DATA,SS:STACK,CS:CODE</span><br><span class="line">    MAIN:</span><br><span class="line">         MOV    AX,DATA</span><br><span class="line">         MOV    DS,AX</span><br><span class="line">         MOV    DX,OFFSET MAXLENGTH         ;把需要用到的内存块（三个部分）的地址存入DX</span><br><span class="line"></span><br><span class="line">         MOV    AH,10</span><br><span class="line">         INT    21H</span><br><span class="line"></span><br><span class="line">         MOV    AH,4CH</span><br><span class="line">         INT    21H</span><br><span class="line">CODE ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="4-5-2-显示器输出"><a href="#4-5-2-显示器输出" class="headerlink" title="4.5.2 显示器输出"></a>4.5.2 显示器输出</h3><h4 id="4-5-2-1-2号调用：单个字符输出"><a href="#4-5-2-1-2号调用：单个字符输出" class="headerlink" title="4.5.2.1 2号调用：单个字符输出"></a>4.5.2.1 2号调用：单个字符输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV DL,&#x27;A&#x27;</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><h4 id="4-5-2-2-9号调用：字符串输出"><a href="#4-5-2-2-9号调用：字符串输出" class="headerlink" title="4.5.2.2 9号调用：字符串输出"></a>4.5.2.2 9号调用：字符串输出</h4><p>你的字符串必须要以’$‘结尾！不然输出不会结束！（类似于’\0’，’$‘是一种字符串的终止符）<br>程序会将DS:DX地址开始输出字符到’$‘结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV DX,OFFSET STRING</span><br><span class="line">MOV AH,9</span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-第一段代码：Hello-World&quot;&gt;&lt;a href=&quot;#1-第一段代码：Hello-World&quot; class=&quot;headerlink&quot; title=&quot;1. 第一段代码：Hello World&quot;&gt;&lt;/a&gt;1. 第一段代码：Hello World&lt;/h1&gt;&lt;fi</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="汇编语言" scheme="http://example.com/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>CMake</title>
    <link href="http://example.com/2023/10/25/CMake/"/>
    <id>http://example.com/2023/10/25/CMake/</id>
    <published>2023-10-25T04:35:46.000Z</published>
    <updated>2023-10-25T13:02:46.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-CMake概述"><a href="#1-CMake概述" class="headerlink" title="1. CMake概述"></a>1. CMake概述</h1><p>CMake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Makefile（通过 make 命令进行项目的构建），大多是IDE软件都集成了make，比如：VS 的 nmake、linux 下的 GNU make、Qt 的 qmake等，如果自己动手写 makefile，会发现，makefile 通常依赖于当前的编译平台，而且编写 makefile 的工作量比较大，解决依赖关系时也容易出错。</p><p>而 CMake 恰好能解决上述问题， 其允许开发者指定整个工程的编译流程，在根据编译平台，<code>自动生成本地化的Makefile和工程文件</code>，最后用户只需<code>make</code>编译即可，所以可以把CMake看成一款自动生成 Makefile的工具，其编译流程如下图：</p><p><img src="/img/cmake1.png"></p><ul><li>蓝色虚线表示使用<code>makefile</code>构建项目的过程</li><li>红色实线表示使用<code>cmake</code>构建项目的过程</li></ul><p>介绍完CMake的作用之后，总结一下优点：</p><ul><li>跨平台</li><li>能够管理大型项目</li><li>简化编译构建过程和编译过程</li><li>可扩展：可以为 cmake 编写特定功能的模块，扩充 cmake 功能</li></ul><hr><h1 id="2-CMake的使用"><a href="#2-CMake的使用" class="headerlink" title="2. CMake的使用"></a>2. CMake的使用</h1><p><code>CMake</code>支持大写、小写、混合大小写的命令。如果在编写<code>CMakeLists.txt</code>文件时使用的工具有对应的命令提示，那么大小写随缘即可，不要太过在意。</p><h2 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h2><h3 id="2-1-1-注释行"><a href="#2-1-1-注释行" class="headerlink" title="2.1.1 注释行"></a>2.1.1 注释行</h3><p>CMake 使用 <code>#</code> 进行行注释，可以放在任何位置。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个 CMakeLists.txt 文件</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="2-1-2-注释块"><a href="#2-1-2-注释块" class="headerlink" title="2.1.2 注释块"></a>2.1.2 注释块</h3><p>CMake 使用 <code>#[[ ]]</code> 形式进行块注释。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[[ 这是一个 CMakeLists.txt 文件。</span></span><br><span class="line"><span class="comment">这是一个 CMakeLists.txt 文件</span></span><br><span class="line"><span class="comment">这是一个 CMakeLists.txt 文件]]</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="2-1-只有源文件"><a href="#2-1-只有源文件" class="headerlink" title="2.1 只有源文件"></a>2.1 只有源文件</h2><h3 id="2-1-1-共处一室"><a href="#2-1-1-共处一室" class="headerlink" title="2.1.1 共处一室"></a>2.1.1 共处一室</h3><blockquote><p>准备工作，为了方便测试，在我本地电脑准备了这么几个测试文件</p></blockquote><p><strong>add.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;head.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sub.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;head.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你好</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mult.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;head.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>div.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;head.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">double</span>)a/b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>head.h</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _HEAD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HEAD_H</span></span><br><span class="line"><span class="comment">// 加法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 减法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 乘法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">// 除法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>main.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;head.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a + b = %d\n&quot;</span>, <span class="built_in">add</span>(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a - b = %d\n&quot;</span>, <span class="built_in">subtract</span>(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a * b = %d\n&quot;</span>, <span class="built_in">multiply</span>(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a / b = %f\n&quot;</span>, <span class="built_in">divide</span>(a, b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述文件的目录结构如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── div.c</span><br><span class="line">├── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── mult.c</span><br><span class="line">└── sub.c</span><br></pre></td></tr></table></figure><blockquote><p>添加 CMakeLists.txt 文件</p></blockquote><p>在上述源文件所在目录下添加一个新文件 <code>CMakeLists.txt</code>，文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">add_executable</span>(app add.c div.c main.c mult.c sub.c)</span><br></pre></td></tr></table></figure><p>接下来依次介绍一下在 CMakeLists.txt 文件中添加的三个命令:</p><ul><li><code>cmake_minimum_required</code>：指定使用的 cmake 的最低版本<ul><li>可选，非必须，如果不加可能会有警告</li></ul></li><li><code>project</code>：定义工程名称，并可指定工程的版本、工程描述、web主页地址、支持的语言（默认情况支持所有语言），如果不需要这些都是可以忽略的，只需要指定出工程名字即可。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PROJECT 指令的语法是：</span></span><br><span class="line"><span class="keyword">project</span>(&lt;<span class="keyword">PROJECT</span>-NAME&gt; [&lt;language-name&gt;...])</span><br><span class="line"><span class="keyword">project</span>(&lt;<span class="keyword">PROJECT</span>-NAME&gt;</span><br><span class="line">       [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]</span><br><span class="line">       [DESCRIPTION &lt;<span class="keyword">project</span>-description-<span class="keyword">string</span>&gt;]</span><br><span class="line">       [HOMEPAGE_URL &lt;url-<span class="keyword">string</span>&gt;]</span><br><span class="line">       [LANGUAGES &lt;language-name&gt;...])</span><br></pre></td></tr></table></figure><ul><li><code>add_executable</code>：定义工程会生成一个可执行程序</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(可执行程序名 源文件名称)</span><br></pre></td></tr></table></figure><p>这里的可执行程序名和<code>project</code>中的项目名没有任何关系</p><p>源文件名可以是一个也可以是<code>多个</code>，如有多个可用空格或<code>;</code>间隔</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 样式1</span></span><br><span class="line"><span class="keyword">add_executable</span>(app add.c div.c main.c mult.c sub.c)</span><br><span class="line"><span class="comment"># 样式2</span></span><br><span class="line"><span class="keyword">add_executable</span>(app add.c;div.c;main.c;mult.c;sub.c)</span><br></pre></td></tr></table></figure><blockquote><p>执行CMake 命令</p></blockquote><p>万事俱备只欠东风，将 <code>CMakeLists.txt</code> 文件编辑好之后，就可以执行 <code>cmake</code>命令了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cmake 命令原型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake CMakeLists.txt文件所在路径</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── div.c</span><br><span class="line">├── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── mult.c</span><br><span class="line">└── sub.c</span><br><span class="line"></span><br><span class="line">0 directories, 7 files</span><br><span class="line">robin@OS:~/Linux/3Day/calc$ cmake .</span><br></pre></td></tr></table></figure><p>当执行<code>cmake</code>命令之后，<code>CMakeLists.txt</code> 中的命令就会被执行，所以一定要注意给<code>cmake</code>命令指定路径的时候一定不能出错。</p><p>执行命令之后，看一下源文件所在目录中是否多了一些文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -L 1</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── CMakeCache.txt         # new add file</span><br><span class="line">├── CMakeFiles             # new add dir</span><br><span class="line">├── cmake_install.cmake    # new add file</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── div.c</span><br><span class="line">├── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── Makefile               # new add file</span><br><span class="line">├── mult.c</span><br><span class="line">└── sub.c</span><br></pre></td></tr></table></figure><p>我们可以看到在对应的目录下生成了一个<code>makefile</code>文件，此时再执行<code>make</code>命令，就可以对项目进行构建得到所需的可执行程序了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line">Scanning dependencies of target app</span><br><span class="line">[ 16%] Building C object CMakeFiles/app.dir/add.c.o</span><br><span class="line">[ 33%] Building C object CMakeFiles/app.dir/div.c.o</span><br><span class="line">[ 50%] Building C object CMakeFiles/app.dir/main.c.o</span><br><span class="line">[ 66%] Building C object CMakeFiles/app.dir/mult.c.o</span><br><span class="line">[ 83%] Building C object CMakeFiles/app.dir/sub.c.o</span><br><span class="line"><span class="meta prompt_">[100%</span><span class="language-bash">] Linking C executable app</span></span><br><span class="line"><span class="meta prompt_">[100%</span><span class="language-bash">] Built target app</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看可执行程序是否已经生成</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree -L 1</span></span><br><span class="line">.</span><br><span class="line">├── add.c</span><br><span class="line">├── app# 生成的可执行程序</span><br><span class="line">├── CMakeCache.txt</span><br><span class="line">├── CMakeFiles</span><br><span class="line">├── cmake_install.cmake</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── div.c</span><br><span class="line">├── head.h</span><br><span class="line">├── main.c</span><br><span class="line">├── Makefile</span><br><span class="line">├── mult.c</span><br><span class="line">└── sub.c</span><br></pre></td></tr></table></figure><p>最终可执行程序<code>app</code>就被编译出来了（这个名字是在<code>CMakeLists.txt</code>中指定的）。</p><hr><h3 id="2-1-2-VIP-包房"><a href="#2-1-2-VIP-包房" class="headerlink" title="2.1.2 VIP 包房"></a>2.1.2 VIP 包房</h3><p>通过上面的例子可以看出，如果在<code>CMakeLists.txt</code>文件所在目录执行了<code>cmake</code>命令之后就会生成一些目录和文件（包括 <code>makefile</code>文件），如果再基于<code>makefile</code>文件执行<code>make</code>命令，程序在编译过程中还会生成一些中间文件和一个可执行文件，这样会导致整个项目目录看起来很混乱，不太容易管理和维护，此时我们就可以把生成的这些与项目源码无关的文件统一放到一个对应的目录里边，比如将这个目录命名为<code>build</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- The C compiler identification is GNU 5.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 5.4.0</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/robin/Linux/build</span><br></pre></td></tr></table></figure><p>现在<code>cmake</code>命令是在<code>build</code>目录中执行的，但是<code>CMakeLists.txt</code>文件是<code>build</code>目录的上一级目录中，所以<code>cmake</code> 命令后指定的路径为<code>..</code>，即当前目录的上一级目录。</p><p>当命令执行完毕之后，在<code>build</code>目录中会生成一个<code>makefile</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree build -L 1</span></span><br><span class="line">build</span><br><span class="line">├── CMakeCache.txt</span><br><span class="line">├── CMakeFiles</span><br><span class="line">├── cmake_install.cmake</span><br><span class="line">└── Makefile</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure><p>这样就可以在<code>build</code>目录中执行<code>make</code>命令编译项目，生成的相关文件自然也就被存储到<code>build</code>目录中了。这样通过<code>cmake</code>和<code>make</code>生成的所有文件就全部和项目源文件隔离开了，各回各家，各找各妈。</p><hr><h2 id="2-2-私人订制"><a href="#2-2-私人订制" class="headerlink" title="2.2 私人订制"></a>2.2 私人订制</h2><h3 id="2-2-1-定义变量"><a href="#2-2-1-定义变量" class="headerlink" title="2.2.1 定义变量"></a>2.2.1 定义变量</h3><p>在上面的例子中一共提供了5个源文件，假设这五个源文件需要反复被使用，每次都直接将它们的名字写出来确实是很麻烦，此时我们就需要定义一个变量，将文件名对应的字符串存储起来，在cmake里定义变量需要使用<code>set</code>。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SET 指令的语法是：</span></span><br><span class="line"><span class="comment"># [] 中的参数为可选项, 如不需要可以不写</span></span><br><span class="line"><span class="keyword">SET</span>(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</span><br></pre></td></tr></table></figure><ul><li><code>VAR</code>：变量名</li><li><code>VALUE</code>：变量值</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1: 各个源文件之间使用空格间隔</span></span><br><span class="line"><span class="comment"># set(SRC_LIST add.c  div.c   main.c  mult.c  sub.c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2: 各个源文件之间使用分号 ; 间隔</span></span><br><span class="line"><span class="keyword">set</span>(SRC_LIST add.c;div.c;main.c;mult.c;sub.c)</span><br><span class="line"><span class="keyword">add_executable</span>(app  <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-2-指定使用的C-标准"><a href="#2-2-2-指定使用的C-标准" class="headerlink" title="2.2.2 指定使用的C++标准"></a>2.2.2 指定使用的C++标准</h3><p>在编写C++程序的时候，可能会用到C++11、C++14、C++17、C++20等新特性，那么就需要在编译的时候在编译命令中制定出要使用哪个标准：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ *.cpp -std=c++11 -o app</span></span><br></pre></td></tr></table></figure><p>上面的例子中通过参数<code>-std=c++11</code>指定出要使用c++11标准编译程序，C++标准对应有一宏叫做<code>DCMAKE_CXX_STANDARD</code>。在CMake中想要指定C++标准有两种方式：</p><ol><li>在 CMakeLists.txt 中通过 set 命令指定</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加-std=c++11</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="comment">#增加-std=c++14</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="comment">#增加-std=c++17</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>在执行 cmake 命令的时候指定出这个宏的值</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加-std=c++11</span></span><br><span class="line">cmake CMakeLists.txt文件路径 -DCMAKE_CXX_STANDARD=11</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加-std=c++14</span></span><br><span class="line">cmake CMakeLists.txt文件路径 -DCMAKE_CXX_STANDARD=14</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加-std=c++17</span></span><br><span class="line">cmake CMakeLists.txt文件路径 -DCMAKE_CXX_STANDARD=17</span><br></pre></td></tr></table></figure><blockquote><p>在上面例子中 CMake 后的路径需要根据实际情况酌情修改。</p></blockquote><hr><h3 id="2-2-3-指定输出的路径"><a href="#2-2-3-指定输出的路径" class="headerlink" title="2.2.3 指定输出的路径"></a>2.2.3 指定输出的路径</h3><p>在CMake中指定可执行程序输出的路径，也对应一个宏，叫做<code>EXECUTABLE_OUTPUT_PATH</code>，它的值还是通过<code>set</code>命令进行设置:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(HOME /home/robin/Linux/Sort)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;HOME&#125;</span>/bin)</span><br></pre></td></tr></table></figure><ul><li>第一行：定义一个变量用于存储一个绝对路径</li><li>第二行：将拼接好的路径值设置给<code>EXECUTABLE_OUTPUT_PATH</code>宏<ul><li>如果这个路径中的子目录不存在，会自动生成，无需自己手动创建</li></ul></li></ul><p><font color = red>由于可执行程序是基于 cmake 命令生成的 makefile 文件然后再执行 make 命令得到的，所以如果此处指定可执行程序生成路径的时候使用的是相对路径 .&#x2F;xxx&#x2F;xxx，那么这个路径中的 .&#x2F; 对应的就是 makefile 文件所在的那个目录。</font></p><hr><h2 id="2-3-搜索文件"><a href="#2-3-搜索文件" class="headerlink" title="2.3 搜索文件"></a>2.3 搜索文件</h2><p>如果一个项目里边的源文件很多，在编写<code>CMakeLists.txt</code>文件的时候不可能将项目目录的各个文件一一罗列出来，这样太麻烦也不现实。所以，在CMake中为我们提供了搜索文件的命令，可以使用<code>aux_source_directory</code>命令或者<code>file</code>命令。</p><h3 id="2-3-1-方式1"><a href="#2-3-1-方式1" class="headerlink" title="2.3.1 方式1"></a>2.3.1 方式1</h3><p>在 CMake 中使用<code>aux_source_directory</code>命令可以查找某个路径下的所有源文件，命令格式为：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(&lt; dir &gt; &lt; variable &gt;)</span><br></pre></td></tr></table></figure><ul><li><code>dir</code>：要搜索的目录</li><li><code>variable</code>：将从<code>dir</code>目录下搜索到的源文件列表存储到该变量中</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 搜索 src 目录下的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src SRC_LIST)</span><br><span class="line"><span class="keyword">add_executable</span>(app  <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-2-方式2"><a href="#2-3-2-方式2" class="headerlink" title="2.3.2 方式2"></a>2.3.2 方式2</h3><p>如果一个项目里边的源文件很多，在编写<code>CMakeLists.txt</code>文件的时候不可能将项目目录的各个文件一一罗列出来，这样太麻烦了。所以，在CMake中为我们提供了搜索文件的命令，他就是<code>file</code>（当然，除了搜索以外通过 &#96;file&#96;&#96; 还可以做其他事情）。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</span><br></pre></td></tr></table></figure><ul><li><code>GLOB</code>: 将指定目录下搜索到的满足条件的所有文件名生成一个列表，并将其存储到变量中。</li><li><code>GLOB_RECURSE</code>：递归搜索指定目录，将搜索到的满足条件的文件名生成一个列表，并将其存储到变量中。</li></ul><p><strong>搜索当前目录的src目录下所有的源文件，并存储到变量中</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_SRC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>/*.h)</span><br></pre></td></tr></table></figure><ul><li><p><code>CMAKE_CURRENT_SOURCE_DIR</code> 宏表示当前访问的 CMakeLists.txt 文件所在的路径。</p></li><li><p>关于要搜索的文件路径和类型可加双引号，也可不加:</p></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.h&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-包含头文件"><a href="#2-4-包含头文件" class="headerlink" title="2.4 包含头文件"></a>2.4 包含头文件</h2><p>在编译项目源文件的时候，很多时候都需要将源文件对应的头文件路径指定出来，这样才能保证在编译过程中编译器能够找到这些头文件，并顺利通过编译。在CMake中设置要包含的目录也很简单，通过一个命令就可以搞定了，他就是<code>include_directories</code>:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(headpath)</span><br></pre></td></tr></table></figure><p>举例说明，有源文件若干，其目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── head.h</span><br><span class="line">└── src</span><br><span class="line">    ├── add.cpp</span><br><span class="line">    ├── div.cpp</span><br><span class="line">    ├── main.cpp</span><br><span class="line">    ├── mult.cpp</span><br><span class="line">    └── sub.cpp</span><br><span class="line"></span><br><span class="line">3 directories, 7 files</span><br></pre></td></tr></table></figure><p><code>CMakeLists.txt</code>文件内容如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(HOME /home/robin/Linux/calc)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;HOME&#125;</span>/bin/)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(app  <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>其中，第六行指定就是头文件的路径，<code>PROJECT_SOURCE_DIR</code>宏对应的值就是我们在使用cmake命令时，后面紧跟的目录，一般是工程的根目录。</p><hr><h2 id="2-5-制作动态库或静态库"><a href="#2-5-制作动态库或静态库" class="headerlink" title="2.5 制作动态库或静态库"></a>2.5 制作动态库或静态库</h2><p>有些时候我们编写的源代码并不需要将他们编译生成可执行程序，而是生成一些静态库或动态库提供给第三方使用，下面来讲解在cmake中生成这两类库文件的方法。</p><h3 id="2-5-1-制作静态库"><a href="#2-5-1-制作静态库" class="headerlink" title="2.5.1 制作静态库"></a>2.5.1 制作静态库</h3><p>在cmake中，如果要制作静态库，需要使用的命令如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(库名称 STATIC 源文件<span class="number">1</span> [源文件<span class="number">2</span>] ...) </span><br></pre></td></tr></table></figure><p>在Linux中，静态库名字分为三部分：<code>lib+库名字+.a</code>，此处<code>只需要指定出库的名字就可以了</code>，另外两部分在生成该文件的时候会自动填充。</p><p>在Windows中虽然库名和Linux格式不同，但也只需指定出名字即可。</p><p>下面有一个目录，需要将<code>src</code>目录中的源文件编译成静态库，然后再使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include           # 头文件目录</span><br><span class="line">│   └── head.h</span><br><span class="line">├── main.cpp          # 用于测试的源文件</span><br><span class="line">└── src               # 源文件目录</span><br><span class="line">    ├── add.cpp</span><br><span class="line">    ├── div.cpp</span><br><span class="line">    ├── mult.cpp</span><br><span class="line">    └── sub.cpp</span><br></pre></td></tr></table></figure><p>根据上面的目录结构，可以这样编写<code>CMakeLists.txt</code>文件:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(calc STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>这样最终就会生成对应的静态库文件<code>libcalc.a</code>。</p><hr><h3 id="2-5-2-制作动态库"><a href="#2-5-2-制作动态库" class="headerlink" title="2.5.2 制作动态库"></a>2.5.2 制作动态库</h3><p>在cmake中，如果要制作动态库，需要使用的命令如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(库名称 SHARED 源文件<span class="number">1</span> [源文件<span class="number">2</span>] ...)</span><br></pre></td></tr></table></figure><p>在Linux中，动态库名字分为三部分：<code>lib+库名字+.so</code>，此处<code>只需要指定出库的名字就可以了</code>，另外两部分在生成该文件的时候会自动填充。</p><p>在Windows中虽然库名和Linux格式不同，但也只需指定出名字即可。</p><p>根据上面的目录结构，可以这样编写<code>CMakeLists.txt</code>文件:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(calc SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>这样最终就会生成对应的动态库文件<code>libcalc.so</code>。</p><hr><h3 id="2-5-3-指定输出的路径"><a href="#2-5-3-指定输出的路径" class="headerlink" title="2.5.3 指定输出的路径"></a>2.5.3 指定输出的路径</h3><p><strong>方式1 - 适用于动态库</strong></p><p>对于生成的库文件来说和可执行程序一样都可以指定输出路径。<code>由于在Linux下生成的动态库默认是有执行权限的</code>，所以可以按照生成可执行程序的方式去指定它生成的目录：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="comment"># 设置动态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">add_library</span>(calc SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>对于这种方式来说，其实就是通过<code>set</code>命令给<code>EXECUTABLE_OUTPUT_PATH</code>宏设置了一个路径，这个路径就是可执行文件生成的路径。</p><hr><p><strong>方式2 - 都适用</strong></p><p><code>由于在Linux下生成的静态库默认不具有可执行权限</code>，所以在指定静态库生成的路径的时候就不能使用<code>EXECUTABLE_OUTPUT_PATH</code>宏了，而应该使用<code>LIBRARY_OUTPUT_PATH</code>，这个宏对应静态库文件和动态库文件都适用。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="comment"># 设置动态库/静态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 生成动态库</span></span><br><span class="line"><span class="comment">#add_library(calc SHARED $&#123;SRC_LIST&#125;)</span></span><br><span class="line"><span class="comment"># 生成静态库</span></span><br><span class="line"><span class="keyword">add_library</span>(calc STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="2-6-包含库文件"><a href="#2-6-包含库文件" class="headerlink" title="2.6 包含库文件"></a>2.6 包含库文件</h2><p>在编写程序的过程中，可能会用到一些系统提供的动态库或者自己制作出的动态库或者静态库文件，cmake中也为我们提供了相关的加载动态库的命令。</p><h3 id="2-6-1-链接静态库"><a href="#2-6-1-链接静态库" class="headerlink" title="2.6.1 链接静态库"></a>2.6.1 链接静态库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── add.cpp</span><br><span class="line">├── div.cpp</span><br><span class="line">├── main.cpp</span><br><span class="line">├── mult.cpp</span><br><span class="line">└── sub.cpp</span><br></pre></td></tr></table></figure><p>现在我们把上面<code>src</code>目录中的<code>add.cpp、div.cpp、mult.cpp、sub.cpp编译成一个静态库文件libcalc.a</code>。</p><p>测试目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span> </span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── head.h</span><br><span class="line">├── lib</span><br><span class="line">│   └── libcalc.a     # 制作出的静态库的名字</span><br><span class="line">└── src</span><br><span class="line">    └── main.cpp</span><br><span class="line"></span><br><span class="line">4 directories, 4 files</span><br></pre></td></tr></table></figure><p>在cmake中，链接静态库的命令如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">link_libraries</span>(&lt;static lib&gt; [&lt;static lib&gt;...])</span><br></pre></td></tr></table></figure><ul><li>参数1：指定出要链接的静态库的名字<ul><li>可以是<code>全名</code> libxxx.a</li><li>也可以是<code>掐头</code>（lib）<code>去尾</code>（.a）之后的名字 xxx</li></ul></li><li>参数2-N：要链接的其它静态库的名字</li></ul><p>如果该静态库不是系统提供的（自己制作或者使用第三方提供的静态库）可能出现静态库找不到的情况，此时可以将静态库的路径也指定出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link_directories(&lt;lib path&gt;)</span><br></pre></td></tr></table></figure><p>这样，修改之后的<code>CMakeLists.txt</code>文件内容如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="comment"># 搜索指定目录下源文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="comment"># 包含头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 包含静态库路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 链接静态库</span></span><br><span class="line"><span class="keyword">link_libraries</span>(calc)</span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>添加了第8行的代码，就可以根据参数指定的路径找到这个静态库了。</p><hr><h3 id="2-6-2-链接动态库"><a href="#2-6-2-链接动态库" class="headerlink" title="2.6.2 链接动态库"></a>2.6.2 链接动态库</h3><p>在程序编写过程中，除了在项目中引入静态库，好多时候也会使用一些标准的或者第三方提供的一些动态库，关于动态库的制作、使用以及在内存中的加载方式和静态库都是不同的</p><p>在<code>cmake</code>中链接动态库的命令如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">    &lt;<span class="keyword">target</span>&gt; </span><br><span class="line">    &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;... </span><br><span class="line">    [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)</span><br></pre></td></tr></table></figure><ul><li><code>target</code>：指定要加载动态库的文件的名字<ul><li>该文件可能是一个源文件</li><li>该文件可能是一个动态库文件</li><li>该文件可能是一个可执行文件</li></ul></li><li><code>PRIVATE|PUBLIC|INTERFACE</code>：动态库的访问权限，默认为&#96;PUBLIC&#96;&#96;<ul><li>如果各个动态库之间没有依赖关系，无需做任何设置，三者没有没有区别，<code>一般无需指定，使用默认的 PUBLIC 即可。</code></li><li><code>动态库的链接具有传递性</code>，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法。</li></ul></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(A B C)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(D A)</span><br></pre></td></tr></table></figure><p><code>PUBLIC</code>：在public后面的库会被Link到前面的target中，并且里面的符号也会被导出，提供给第三方使用。</p><p><code>PRIVATE</code>：在private后面的库仅被link到前面的target中，并且终结掉，第三方不能感知你调了啥库</p><p><code>INTERFACE</code>：在interface后面引入的库不会被链接到前面的target中，只会导出符号。</p><p><strong>链接系统动态库</strong></p><p>动态库的链接和静态库是完全不同的：</p><ul><li>静态库会在生成可执行程序的链接阶段被打包到可执行程序中，所以可执行程序启动，静态库就被加载到内存中了。</li><li>动态库在生成可执行程序的链接阶段<code>不会</code>被打包到可执行程序中，当可执行程序被启动并且调用了动态库中的函数的时候，动态库才会被加载到内存</li></ul><p>因此，在<code>cmake</code>中指定要链接的动态库的时候，<code>应该将命令写到生成了可执行文件之后：</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 添加并指定最终生成的可执行程序名</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 指定可执行程序要链接的动态库名字</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread)</span><br></pre></td></tr></table></figure><p>在<code>target_link_libraries(app pthread)</code>中：</p><ul><li><code>app</code>: 对应的是最终生成的可执行程序的名字</li><li><code>pthread</code>：这是可执行程序要加载的动态库，这个库是系统提供的线程库，全名为<code>libpthread.so</code>，在指定的时候一般会掐头（lib）去尾（.so）。</li></ul><p><strong>链接第三方动态库</strong></p><p>现在，自己生成了一个动态库，对应的目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span> </span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   └── head.h            # 动态库对应的头文件</span><br><span class="line">├── lib</span><br><span class="line">│   └── libcalc.so        # 自己制作的动态库文件</span><br><span class="line">└── main.cpp              # 测试用的源文件</span><br><span class="line"></span><br><span class="line">3 directories, 4 files</span><br></pre></td></tr></table></figure><p>假设在测试文件<code>main.cpp</code>中既使用了自己制作的动态库<code>libcalc.so</code>又使用了系统提供的线程库，此时<code>CMakeLists.txt</code>文件可以这样写：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread calc)</span><br></pre></td></tr></table></figure><p>在第六行中，<code>pthread、calc</code>都是可执行程序<code>app</code>要链接的动态库的名字。当可执行程序<code>app</code>生成之后并执行该文件，会提示有如下错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./app</span> </span><br><span class="line">./app: error while loading shared libraries: libcalc.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>这是因为可执行程序启动之后，去加载<code>calc</code>这个动态库，但是不知道这个动态库被放到了什么位置，所以就加载失败了，<font color = red>在 CMake 中可以在生成可执行程序之前，通过命令指定出要链接的动态库的位置，指定静态库位置使用的也是这个命令：</font></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">link_directories</span>(path)</span><br></pre></td></tr></table></figure><p>所以修改之后的<code>CMakeLists.txt</code>文件应该是这样的：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 指定源文件或者动态库对应的头文件路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 指定要链接的动态库的路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 添加并生成一个可执行程序</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 指定要链接的动态库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread calc)</span><br></pre></td></tr></table></figure><p>通过<code>link_directories</code>指定了动态库的路径之后，在执行生成的可执行程序的时候，就不会出现找不到动态库的问题了。</p><blockquote><p>温馨提示：使用 <code>target_link_libraries</code> 命令就可以链接动态库，<code>也可以链接静态库文件。</code></p></blockquote><hr><h2 id="2-7-日志"><a href="#2-7-日志" class="headerlink" title="2.7 日志"></a>2.7 日志</h2><p>在CMake中可以用用户显示一条消息，该命令的名字为<code>message：</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message</span>([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] <span class="string">&quot;message to display&quot;</span> ...)</span><br></pre></td></tr></table></figure><ul><li><code>(无)</code> ：重要消息</li><li><code>STATUS</code> ：非重要消息</li><li><code>WARNING</code>：CMake 警告, 会继续执行</li><li><code>AUTHOR_WARNING</code>：CMake 警告 (dev), 会继续执行</li><li><code>SEND_ERROR</code>：CMake 错误, 继续执行，但是会跳过生成的步骤</li><li><code>FATAL_ERROR</code>：CMake 错误, 终止所有处理过程</li></ul><p>CMake的命令行工具会在stdout上显示STATUS消息，在stderr上显示其他所有消息。CMake的GUI会在它的log区域显示所有消息。</p><p>CMake警告和错误消息的文本显示使用的是一种简单的标记语言。文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出一般日志信息</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 输出警告信息</span></span><br><span class="line"><span class="keyword">message</span>(WARNING <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 输出错误信息</span></span><br><span class="line"><span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;source path: $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="2-8-变量操作"><a href="#2-8-变量操作" class="headerlink" title="2.8 变量操作"></a>2.8 变量操作</h2><h3 id="2-8-1-追加"><a href="#2-8-1-追加" class="headerlink" title="2.8.1 追加"></a>2.8.1 追加</h3><p>有时候项目中的源文件并不一定都在同一个目录中，但是这些源文件最终却需要一起进行编译来生成最终的可执行文件或者库文件。如果我们通过<code>file</code>命令对各个目录下的源文件进行搜索，最后还需要做一个字符串拼接的操作，关于字符串拼接可以使用<code>set</code>命令也可以使用<code>list</code>命令。</p><p><strong>使用set拼接</strong></p><p>如果使用set进行字符串拼接，对应的命令格式如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(变量名<span class="number">1</span> <span class="variable">$&#123;变量名1&#125;</span> <span class="variable">$&#123;变量名2&#125;</span> ...)</span><br></pre></td></tr></table></figure><p>关于上面的命令其实就是将从第二个参数开始往后所有的字符串进行拼接，最后将结果存储到第一个参数中，如果第一个参数中原来有数据会对原数据就行覆盖。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">set</span>(TEMP <span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_1 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src1/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_2 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src2/*.cpp)</span><br><span class="line"><span class="comment"># 追加(拼接)</span></span><br><span class="line"><span class="keyword">set</span>(SRC_1 <span class="variable">$&#123;SRC_1&#125;</span> <span class="variable">$&#123;SRC_2&#125;</span> <span class="variable">$&#123;TEMP&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message: $&#123;SRC_1&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>使用list拼接</strong></p><p>如果使用list进行字符串拼接，对应的命令格式如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(APPEND &lt;<span class="keyword">list</span>&gt; [&lt;element&gt; ...])</span><br></pre></td></tr></table></figure><p><code>list</code>命令的功能比<code>set</code>要强大，字符串拼接只是它的其中一个功能，所以需要在它第一个参数的位置指定出我们要做的操作，<code>APPEND</code>表示进行数据追加，后边的参数和<code>set</code>就一样了。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">set</span>(TEMP <span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_1 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src1/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_2 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src2/*.cpp)</span><br><span class="line"><span class="comment"># 追加(拼接)</span></span><br><span class="line"><span class="keyword">list</span>(APPEND SRC_1 <span class="variable">$&#123;SRC_1&#125;</span> <span class="variable">$&#123;SRC_2&#125;</span> <span class="variable">$&#123;TEMP&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message: $&#123;SRC_1&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>在CMake中，使用<code>set</code>命令可以创建一个<code>list</code>。一个在list内部是一个由分号<code>;</code>分割的一组字符串。<br>例如，<code>set(var a b c d e)命令将会创建一个list:a;b;c;d;e，但是最终打印变量值的时候得到的是abcde。</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(tmp1 a;b;c;d;e)</span><br><span class="line"><span class="keyword">set</span>(tmp2 a b c d e)</span><br><span class="line"><span class="keyword">message</span>(<span class="variable">$&#123;tmp1&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(<span class="variable">$&#123;tmp2&#125;</span>)</span><br></pre></td></tr></table></figure><p>输出的结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abcde</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure><hr><h3 id="2-8-2-字符串移除"><a href="#2-8-2-字符串移除" class="headerlink" title="2.8.2 字符串移除"></a>2.8.2 字符串移除</h3><p>我们在通过<code>file</code>搜索某个目录就得到了该目录下所有的源文件，但是其中有些源文件并不是我们所需要的，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── add.cpp</span><br><span class="line">├── div.cpp</span><br><span class="line">├── main.cpp</span><br><span class="line">├── mult.cpp</span><br><span class="line">└── sub.cpp</span><br><span class="line"></span><br><span class="line">0 directories, 5 files</span><br></pre></td></tr></table></figure><p>在当前这么目录有五个源文件，其中<code>main.cpp</code>是一个测试文件。如果我们想要把计算器相关的源文件生成一个动态库给别人使用，那么只需要<code>add.cpp、div.cp、mult.cpp、sub.cpp</code>这四个源文件就可以了。此时，就需要将<code>main.cpp</code>从搜索到的数据中剔除出去，想要实现这个功能，也可以使用<code>list</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(REMOVE_ITEM &lt;<span class="keyword">list</span>&gt; &lt;value&gt; [&lt;value&gt; ...])</span><br></pre></td></tr></table></figure><p>通过上面的命令原型可以看到删除和追加数据类似，只不过是第一个参数变成了<code>REMOVE_ITEM</code>。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">set</span>(TEMP <span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_1 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 移除前日志</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message: $&#123;SRC_1&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 移除 main.cpp</span></span><br><span class="line"><span class="keyword">list</span>(REMOVE_ITEM SRC_1 <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/main.cpp)</span><br><span class="line"><span class="comment"># 移除后日志</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message: $&#123;SRC_1&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看到，在第8行把将要移除的文件的名字指定给list就可以了。<font color = red> 但是一定要注意通过 file 命令搜索源文件的时候得到的是文件的绝对路径（在list中每个文件对应的路径都是一个item，并且都是绝对路径），那么在移除的时候也要将该文件的绝对路径指定出来才可以，否是移除操作不会成功。</font></p><p>关于list命令还有其它功能，但是并不常用，在此就不一一进行举例介绍了。</p><blockquote><p>获取 list 的长度。</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(LENGTH &lt;<span class="keyword">list</span>&gt; &lt;output variable&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>LENGTH</code>：子命令LENGTH用于读取列表长度</li><li><code>&lt;list&gt;</code>：当前操作的列表</li><li><code>&lt;output variable&gt;</code>：新创建的变量，用于存储列表的长度。</li></ul><blockquote><p>读取列表中指定索引的的元素，可以指定多个索引</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(GET &lt;<span class="keyword">list</span>&gt; &lt;element index&gt; [&lt;element index&gt; ...] &lt;output variable&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>&lt;list&gt;</code>：当前操作的列表</li><li><code>&lt;element index&gt;</code>：列表元素的索引<ul><li>从0开始编号，索引0的元素为列表中的第一个元素；</li><li>索引也可以是负数，<code>-1</code>表示列表的最后一个元素，-2表示列表倒数第二个元素，以此类推</li><li>当索引（不管是正还是负）超过列表的长度，运行会报错</li></ul></li><li><code>&lt;output variable&gt;</code>：新创建的变量，存储指定索引元素的返回结果，也是一个列表。</li></ul><blockquote><p>将列表中的元素用连接符（字符串）连接起来组成一个字符串</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (JOIN &lt;<span class="keyword">list</span>&gt; &lt;glue&gt; &lt;output variable&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>&lt;list&gt;</code>：当前操作的列表</li><li><code>&lt;glue&gt;</code>：指定的连接符（字符串）</li><li><code>&lt;output variable&gt;</code>：新创建的变量，存储返回的字符串</li></ul><blockquote><p>查找列表是否存在指定的元素，若果未找到，返回-1</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(FIND &lt;<span class="keyword">list</span>&gt; &lt;value&gt; &lt;output variable&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>&lt;list&gt;</code>：当前操作的列表</li><li><code>&lt;value&gt;</code>：需要再列表中搜索的元素</li><li><code>&lt;output variable&gt;</code>：新创建的变量<ul><li>如果列表<list>中存在<value>，那么返回<value>在列表中的索引</li><li>如果未找到则返回-1。</li></ul></li></ul><blockquote><p>将元素追加到列表中</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (APPEND &lt;<span class="keyword">list</span>&gt; [&lt;element&gt; ...])</span><br></pre></td></tr></table></figure><blockquote><p>在list中指定的位置插入若干元素</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(INSERT &lt;<span class="keyword">list</span>&gt; &lt;element_index&gt; &lt;element&gt; [&lt;element&gt; ...])</span><br></pre></td></tr></table></figure><blockquote><p>将元素插入到列表的0索引位置</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (PREPEND &lt;<span class="keyword">list</span>&gt; [&lt;element&gt; ...])</span><br></pre></td></tr></table></figure><blockquote><p>将列表中最后元素移除</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (POP_BACK &lt;<span class="keyword">list</span>&gt; [&lt;out-var&gt;...])</span><br></pre></td></tr></table></figure><blockquote><p>将列表中第一个元素移除</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (POP_FRONT &lt;<span class="keyword">list</span>&gt; [&lt;out-var&gt;...])</span><br></pre></td></tr></table></figure><blockquote><p>将指定的元素从列表中移除</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (REMOVE_ITEM &lt;<span class="keyword">list</span>&gt; &lt;value&gt; [&lt;value&gt; ...])</span><br></pre></td></tr></table></figure><blockquote><p>将指定索引的元素从列表中移除</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (REMOVE_AT &lt;<span class="keyword">list</span>&gt; &lt;index&gt; [&lt;index&gt; ...])</span><br></pre></td></tr></table></figure><blockquote><p>移除列表中的重复元素</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (REMOVE_DUPLICATES &lt;<span class="keyword">list</span>&gt;)</span><br></pre></td></tr></table></figure><blockquote><p>列表翻转</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>(REVERSE &lt;<span class="keyword">list</span>&gt;)</span><br></pre></td></tr></table></figure><blockquote><p>列表排序</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span> (SORT &lt;<span class="keyword">list</span>&gt; [COMPARE &lt;compare&gt;] [CASE &lt;case&gt;] [ORDER &lt;order&gt;])</span><br></pre></td></tr></table></figure><ul><li><code>COMPARE</code>：指定排序方法。有如下几种值可选：<ul><li><code>STRING</code>:按照字母顺序进行排序，为默认的排序方法</li><li><code>FILE_BASENAME</code>：如果是一系列路径名，会使用basename进行排序</li><li><code>NATURAL</code>：使用自然数顺序排序</li></ul></li><li><code>CASE</code>：指明是否大小写敏感。有如下几种值可选：<ul><li><code>SENSITIVE</code>: 按照大小写敏感的方式进行排序，为默认值</li><li><code>INSENSITIVE</code>：按照大小写不敏感方式进行排序</li></ul></li><li><code>ORDER</code>：指明排序的顺序。有如下几种值可选：<ul><li><code>ASCENDING</code>:按照升序排列，为默认值</li><li><code>DESCENDING</code>：按照降序排列</li></ul></li></ul><hr><h2 id="2-9-宏定义"><a href="#2-9-宏定义" class="headerlink" title="2.9 宏定义"></a>2.9 宏定义</h2><p>在进行程序测试的时候，我们可以在代码中添加一些宏定义，通过这些宏来控制这些代码是否生效，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER  3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我是一个程序猿, 我不会爬树...\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;NUMBER; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, GCC!!!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序的第七行对<code>DEBUG</code>宏进行了判断，如果该宏被定义了，那么第八行就会进行日志输出，如果没有定义这个宏，第八行就相当于被注释掉了，因此最终无法看到日志输入出<code>（上述代码中并没有定义这个宏）</code>。</p><p>为了让测试更灵活，我们可以不在代码中定义这个宏，而是在测试的时候去把它定义出来，其中一种方式就是在<code>gcc/g++</code>命令中去指定，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc test.c -DDEBUG -o app</span></span><br></pre></td></tr></table></figure><p>在<code>gcc/g++</code>命令中通过参数 <code>-D</code> 指定出要定义的宏的名字，这样就相当于在代码中定义了一个宏，其名字为<code>DEBUG</code>。</p><p>在CMake中我们也可以做类似的事情，对应的命令叫做<code>add_definitions:</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_definitions</span>(-D宏名称)</span><br></pre></td></tr></table></figure><p>针对于上面的源文件编写一个<code>CMakeLists.txt</code>，内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="comment"># 自定义 DEBUG 宏</span></span><br><span class="line"><span class="keyword">add_definitions</span>(-DDEBUG)</span><br><span class="line"><span class="keyword">add_executable</span>(app ./<span class="keyword">test</span>.c)</span><br></pre></td></tr></table></figure><p>通过这种方式，上述代码中的第八行日志就能够被输出出来了。</p><hr><h2 id="2-10-CMake的普通实例使用"><a href="#2-10-CMake的普通实例使用" class="headerlink" title="2.10 CMake的普通实例使用"></a>2.10 CMake的普通实例使用</h2><h3 id="2-10-1-CMake的普通编译"><a href="#2-10-1-CMake的普通编译" class="headerlink" title="2.10.1 CMake的普通编译"></a>2.10.1 CMake的普通编译</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(calc)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB HEAD <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD&#125;</span>) <span class="comment">#包头,路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/exeout) <span class="comment">#生成路径</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-10-2-CMake的动-静-态库的生成"><a href="#2-10-2-CMake的动-静-态库的生成" class="headerlink" title="2.10.2 CMake的动(静)态库的生成"></a>2.10.2 CMake的动(静)态库的生成</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(libtest)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib) <span class="comment">#库生成路径</span></span><br><span class="line"><span class="comment"># add_library(calc SHARED $&#123;SRC&#125;) #动态库</span></span><br><span class="line"><span class="keyword">add_library</span>(calc STATIC <span class="variable">$&#123;SRC&#125;</span>) <span class="comment">#静态库</span></span><br></pre></td></tr></table></figure><h3 id="2-10-3-CMake的动-静-态库的使用"><a href="#2-10-3-CMake的动-静-态库的使用" class="headerlink" title="2.10.3 CMake的动(静)态库的使用"></a>2.10.3 CMake的动(静)态库的使用</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(uselib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib) <span class="comment">#静态库</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib_shared) <span class="comment">#动态库</span></span><br><span class="line"><span class="keyword">add_executable</span>(app main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(app calc) <span class="comment">#链接静态库/动态库 一定要放在后面</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="3-预定义宏"><a href="#3-预定义宏" class="headerlink" title="3. 预定义宏"></a>3. 预定义宏</h1><p>下面的列表中为大家整理了一些CMake中常用的宏：</p><table><thead><tr><th>宏</th><th>功能</th></tr></thead><tbody><tr><td>PROJECT_SOURCE_DIR</td><td>使用cmake命令后紧跟的目录，一般是工程的根目录</td></tr><tr><td>PROJECT_BINARY_DIR</td><td>执行cmake命令的目录</td></tr><tr><td>CMAKE_CURRENT_SOURCE_DIR</td><td>当前处理的CMakeLists.txt所在的路径</td></tr><tr><td>CMAKE_CURRENT_BINARY_DIR</td><td>target编译目录</td></tr><tr><td>EXECUTABLE_OUTPUT_PATH</td><td>重新定义目标二进制可执行文件的存放位置</td></tr><tr><td>LIBRARY_OUTPUT_PATH</td><td>重新定义目标链接库文件的存放位置</td></tr><tr><td>PROJECT_NAME</td><td>返回通过PROJECT指令定义的项目名称</td></tr><tr><td>CMAKE_BINARY_DIR</td><td>项目实际构建路径，假设在<code>build</code>目录进行的构建，那么得到的就是这个目录的路径</td></tr></tbody></table><hr><h1 id="4-嵌套的CMake"><a href="#4-嵌套的CMake" class="headerlink" title="4. 嵌套的CMake"></a>4. 嵌套的CMake</h1><p>如果项目很大，或者项目中有很多的源码目录，在通过CMake管理项目的时候如果只使用一个<code>CMakeLists.txt</code>，那么这个文件相对会比较复杂，有一种化繁为简的方式就是给每个源码目录都添加一个<code>CMakeLists.txt</code>文件（头文件目录不需要），这样每个文件都不会太复杂，而且更灵活，更容易维护。</p><p>先来看一下下面的这个的目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── calc</span><br><span class="line">│   ├── add.cpp</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── div.cpp</span><br><span class="line">│   ├── mult.cpp</span><br><span class="line">│   └── sub.cpp</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include</span><br><span class="line">│   ├── calc.h</span><br><span class="line">│   └── sort.h</span><br><span class="line">├── sort</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   ├── insert.cpp</span><br><span class="line">│   └── select.cpp</span><br><span class="line">├── test1</span><br><span class="line">│   ├── calc.cpp</span><br><span class="line">│   └── CMakeLists.txt</span><br><span class="line">└── test2</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── sort.cpp</span><br><span class="line"></span><br><span class="line">6 directories, 15 files</span><br></pre></td></tr></table></figure><ul><li><code>include</code> 目录：头文件目录</li><li><code>calc</code> 目录：目录中的四个源文件对应的加、减、乘、除算法<ul><li>对应的头文件是<code>include</code>中的<code>calc.h</code></li></ul></li><li><code>sort</code> 目录 ：目录中的两个源文件对应的是插入排序和选择排序算法<ul><li>对应的头文件是<code>include</code>中的<code>sort.h</code></li></ul></li><li><code>test1</code> 目录：测试目录，对加、减、乘、除算法进行测试</li><li><code>test2</code> 目录：测试目录，对排序算法进行测试</li></ul><p>可以看到各个源文件目录所需要的<code>CMakeLists.txt</code>文件现在已经添加完毕了。接下依次分析一下各个文件中需要添加的内容。</p><hr><h2 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h2><h3 id="4-1-1-节点关系"><a href="#4-1-1-节点关系" class="headerlink" title="4.1.1 节点关系"></a>4.1.1 节点关系</h3><p>众所周知，Linux的目录是树状结构，所以<code>嵌套的 CMake 也是一个树状结构，最顶层的 CMakeLists.txt 是根节点，其次都是子节点。</code>因此，我们需要了解一些关于 <code>CMakeLists.txt</code> 文件变量作用域的一些信息：</p><ul><li>根节点CMakeLists.txt中的变量全局有效</li><li>父节点CMakeLists.txt中的变量可以在子节点中使用</li><li>子节点CMakeLists.txt中的变量只能在当前节点中使用</li></ul><h3 id="4-1-2-添加子目录"><a href="#4-1-2-添加子目录" class="headerlink" title="4.1.2 添加子目录"></a>4.1.2 添加子目录</h3><p>接下来我们还需要知道在 CMake 中父子节点之间的关系是如何建立的，这里需要用到一个 CMake 命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure><ul><li><code>source_dir</code>：指定了<code>CMakeLists.txt</code>源文件和代码文件的位置，其实就是指定子目录</li><li><code>binary_dir</code>：指定了输出文件的路径，一般不需要指定，忽略即可。</li><li><code>EXCLUDE_FROM_ALL</code>：在子路径下的目标默认不会被包含到父路径的ALL目标里，并且也会被排除在IDE工程文件之外。用户必须显式构建在子路径下的目标。</li></ul><p>通过这种方式CMakeLists.txt文件之间的父子关系就被构建出来了。</p><hr><h2 id="4-2-解决问题"><a href="#4-2-解决问题" class="headerlink" title="4.2 解决问题"></a>4.2 解决问题</h2><p>在上面的目录中我们要做如下事情：</p><ol><li>通过 <code>test1 目录</code>中的测试文件进行计算器相关的测试</li><li>通过 <code>test2 目录</code>中的测试文件进行排序相关的测试</li></ol><p>现在相当于是要进行模块化测试，对于<code>calc</code>和<code>sort</code>目录中的源文件来说，可以将它们先编译成库文件（可以是静态库也可以是动态库）然后在提供给测试文件使用即可。库文件的本质其实还是代码，只不过是从文本格式变成了二进制格式。</p><hr><h3 id="4-2-1-根目录"><a href="#4-2-1-根目录" class="headerlink" title="4.2.1 根目录"></a>4.2.1 根目录</h3><p>根目录中的 <code>CMakeLists.txt</code>文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line"><span class="comment"># 静态库生成的路径</span></span><br><span class="line"><span class="keyword">set</span>(LIB_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 测试程序生成的路径</span></span><br><span class="line"><span class="keyword">set</span>(EXEC_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="comment"># 头文件目录</span></span><br><span class="line"><span class="keyword">set</span>(HEAD_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment"># 静态库的名字</span></span><br><span class="line"><span class="keyword">set</span>(CALC_LIB calc)</span><br><span class="line"><span class="keyword">set</span>(SORT_LIB sort)</span><br><span class="line"><span class="comment"># 可执行程序的名字</span></span><br><span class="line"><span class="keyword">set</span>(APP_NAME_1 test1)</span><br><span class="line"><span class="keyword">set</span>(APP_NAME_2 test2)</span><br><span class="line"><span class="comment"># 添加子目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(calc)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(sort)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(test1)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(test2)</span><br></pre></td></tr></table></figure><p>在根节点对应的文件中主要做了两件事情：<code>定义全局变量</code>和<code>添加子目录</code>。</p><ul><li>定义的全局变量主要是给子节点使用，目的是为了提高子节点中的<code>CMakeLists.txt</code>文件的可读性和可维护性，避免冗余并降低出差的概率。</li><li>一共添加了四个子目录，每个子目录中都有一个<code>CMakeLists.txt</code>文件，这样它们的父子关系就被确定下来了。</li></ul><hr><h3 id="4-2-2-calc-目录"><a href="#4-2-2-calc-目录" class="headerlink" title="4.2.2 calc 目录"></a>4.2.2 calc 目录</h3><p>calc 目录中的 CMakeLists.txt文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALCLIB)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;CALC_LIB&#125;</span> STATIC <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>第3行<code>aux_source_directory</code>：搜索当前目录（<code>calc</code>目录）下的所有源文件</li><li>第4行<code>include_directories</code>：包含头文件路径，<code>HEAD_PATH</code>是在根节点文件中定义的</li><li>第5行<code>set</code>：设置库的生成的路径，<code>LIB_PATH</code>是在根节点文件中定义的</li><li>第6行<code>add_library</code>：生成静态库，静态库名字<code>CALC_LIB</code>是在根节点文件中定义的</li></ul><hr><h3 id="4-2-3-sort-目录"><a href="#4-2-3-sort-目录" class="headerlink" title="4.2.3 sort 目录"></a>4.2.3 sort 目录</h3><p>sort 目录中的 CMakeLists.txt文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(SORTLIB)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;SORT_LIB&#125;</span> SHARED <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>第6行<code>add_library</code>：生成动态库，动态库名字<code>SORT_LIB</code>是在根节点文件中定义的</li></ul><p>这个文件中的内容和<code>calc</code>节点文件中的内容类似，只不过这次生成的是动态库。</p><blockquote><p>在生成库文件的时候，这个库可以是静态库也可以是动态库，一般需要根据实际情况来确定。如果生成的库比较大，建议将其制作成动态库。</p></blockquote><hr><h3 id="4-2-4-test1-目录"><a href="#4-2-4-test1-目录" class="headerlink" title="4.2.4 test1 目录"></a>4.2.4 test1 目录</h3><p>test1 目录中的 CMakeLists.txt文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALCTEST)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">link_libraries</span>(<span class="variable">$&#123;CALC_LIB&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;EXEC_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;APP_NAME_1&#125;</span> <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>第4行<code>include_directories</code>：指定头文件路径，<code>HEAD_PATH</code>变量是在根节点文件中定义的</li><li>第6行<code>link_libraries</code>：指定可执行程序要链接的<code>静态库</code>，<code>CALC_LIB</code>变量是在根节点文件中定义的</li><li>第7行<code>set</code>：指定可执行程序生成的路径，<code>EXEC_PATH</code>变量是在根节点文件中定义的</li><li>第8行<code>add_executable</code>：生成可执行程序，<code>APP_NAME_1</code>变量是在根节点文件中定义的</li></ul><p><font color = red>此处的可执行程序链接的是静态库，最终静态库会被打包到可执行程序中，可执行程序启动之后，静态库也就随之被加载到内存中了。</font></p><hr><h3 id="4-2-5-test2-目录"><a href="#4-2-5-test2-目录" class="headerlink" title="4.2.5 test2 目录"></a>4.2.5 test2 目录</h3><p>test2 目录中的 CMakeLists.txt文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(SORTTEST)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(./ SRC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HEAD_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;EXEC_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;LIB_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;APP_NAME_2&#125;</span> <span class="variable">$&#123;SRC&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;APP_NAME_2&#125;</span> <span class="variable">$&#123;SORT_LIB&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>第四行<code>include_directories</code>：包含头文件路径，<code>HEAD_PATH</code>变量是在根节点文件中定义的</li><li>第五行<code>set</code>：指定可执行程序生成的路径，<code>EXEC_PATH</code>变量是在根节点文件中定义的</li><li>第六行<code>link_directories</code>：指定可执行程序要链接的动态库的路径，<code>LIB_PATH</code>变量是在根节点文件中定义的</li><li>第七行<code>add_executable</code>：生成可执行程序，<code>APP_NAME_2</code>变量是在根节点文件中定义的</li><li>第八行<code>target_link_libraries</code>：指定可执行程序要链接的动态库的名字</li></ul><p><font color=red>在生成可执行程序的时候，动态库不会被打包到可执行程序内部。当可执行程序启动之后动态库也不会被加载到内存，只有可执行程序调用了动态库中的函数的时候，动态库才会被加载到内存中，且多个进程可以共用内存中的同一个动态库，所以动态库又叫共享库。</font></p><hr><h3 id="4-2-6-构建项目"><a href="#4-2-6-构建项目" class="headerlink" title="4.2.6 构建项目"></a>4.2.6 构建项目</h3><p>一切准备就绪之后，开始构建项目，进入到根节点目录的<code>build 目录</code>中，执行cmake 命令，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- The C compiler identification is GNU 5.4.0</span><br><span class="line">-- The CXX compiler identification is GNU 5.4.0</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc</span><br><span class="line">-- Check for working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - done</span><br><span class="line">-- Detecting C compile features</span><br><span class="line">-- Detecting C compile features - done</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++</span><br><span class="line">-- Check for working CXX compiler: /usr/bin/c++ -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - done</span><br><span class="line">-- Detecting CXX compile features</span><br><span class="line">-- Detecting CXX compile features - done</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/robin/abc/cmake/calc/build</span><br></pre></td></tr></table></figure><p>可以看到在build目录中生成了一些文件和目录，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree build -L 1</span>     </span><br><span class="line">build</span><br><span class="line">├── calc                  # 目录</span><br><span class="line">├── CMakeCache.txt        # 文件</span><br><span class="line">├── CMakeFiles            # 目录</span><br><span class="line">├── cmake_install.cmake   # 文件</span><br><span class="line">├── Makefile              # 文件</span><br><span class="line">├── sort                  # 目录</span><br><span class="line">├── test1                 # 目录</span><br><span class="line">└── test2                 # 目录</span><br></pre></td></tr></table></figure><p>然后在<code>build 目录下执行make</code> 命令:</p><p><img src="/img/cmake2.png"></p><p>通过上图可以得到如下信息：</p><ol><li>在项目根目录的lib目录中生成了静态库<code>libcalc.a</code></li><li>在项目根目录的lib目录中生成了动态库<code>libsort.so</code></li><li>在项目根目录的bin目录中生成了可执行程序<code>test1</code></li><li>在项目根目录的bin目录中生成了可执行程序<code>test2</code></li></ol><p>最后再来看一下上面提到的这些文件是否真的被生成到对应的目录中了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree bin/ lib/</span></span><br><span class="line">bin/</span><br><span class="line">├── test1</span><br><span class="line">└── test2</span><br><span class="line">lib/</span><br><span class="line">├── libcalc.a</span><br><span class="line">└── libsort.so</span><br></pre></td></tr></table></figure><p>由此可见，真实不虚，至此，项目构建完毕。</p><blockquote><p>写在最后：<br>在项目中，如果将程序中的某个模块制作成了动态库或者静态库并且在<code>CMakeLists.txt</code> 中指定了库的输出目录，而后其它模块又需要加载这个生成的库文件，此时直接使用就可以了，如果没有指定库的输出路径或者需要直接加载外部提供的库文件，此时就需要使用 <code>link_directories</code> 将库文件路径指定出来。</p></blockquote><hr><h1 id="5-流程控制"><a href="#5-流程控制" class="headerlink" title="5. 流程控制"></a>5. 流程控制</h1><p>在 CMake 的 CMakeLists.txt 中也可以进行流程控制，也就是说可以像写 shell 脚本那样进行<code>条件判断</code>和<code>循环</code>。</p><h2 id="5-1-条件判断"><a href="#5-1-条件判断" class="headerlink" title="5.1 条件判断"></a>5.1 条件判断</h2><p>关于条件判断其语法格式如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;condition&gt;)</span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">elseif</span>(&lt;condition&gt;) <span class="comment"># 可选快, 可以重复</span></span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">else</span>()              <span class="comment"># 可选快</span></span><br><span class="line">  &lt;commands&gt;</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>在进行条件判断的时候，如果有多个条件，那么可以写多个<code>elseif</code>，最后一个条件可以使用<code>else</code>，<font color = red>但是开始和结束是必须要成对出现的 </font>，分别为：if和endif。</p><hr><h3 id="5-1-1-基本表达式"><a href="#5-1-1-基本表达式" class="headerlink" title="5.1.1 基本表达式"></a>5.1.1 基本表达式</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;expression&gt;)</span><br></pre></td></tr></table></figure><p>如果是基本表达式，<code>expression</code> 有以下三种情况：<code>常量、变量、字符串。</code></p><ul><li>如果是<code>1</code>, <code>ON</code>, <code>YES</code>, <code>TRUE</code>, <code>Y</code>, <code>非零值</code>，<code>非空字符串时</code>，条件判断返回True</li><li>如果是 <code>0</code>, <code>OFF</code>, <code>NO</code>, <code>FALSE</code>, <code>N</code>, <code>IGNORE</code>, <code>NOTFOUND</code>，<code>空字符串</code>时，条件判断返回False</li></ul><hr><h3 id="5-1-2-逻辑判断"><a href="#5-1-2-逻辑判断" class="headerlink" title="5.1.2 逻辑判断"></a>5.1.2 逻辑判断</h3><ul><li>NOT</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> &lt;condition&gt;)</span><br></pre></td></tr></table></figure><p>其实这就是一个取反操作，如果条件<code>condition</code>为<code>True</code>将返回<code>False</code>，如果条件<code>condition</code>为<code>False</code>将返回<code>True</code>。</p><ul><li>AND</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;cond1&gt; <span class="keyword">AND</span> &lt;cond2&gt;)</span><br></pre></td></tr></table></figure><p>如果<code>cond1</code>和<code>cond2</code>同时为<code>True</code>，返回<code>True</code>否则返回False。</p><ul><li>OR</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;cond1&gt; <span class="keyword">OR</span> &lt;cond2&gt;)</span><br></pre></td></tr></table></figure><p>如果<code>cond1</code>和<code>cond2</code>两个条件中至少有一个为<code>True</code>，返回<code>True</code>，如果两个条件都为<code>False</code>则返回<code>False</code>。</p><hr><h3 id="5-1-3-比较"><a href="#5-1-3-比较" class="headerlink" title="5.1.3 比较"></a>5.1.3 比较</h3><p><strong>基于数值的比较</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">LESS</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">GREATER</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">EQUAL</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">LESS_EQUAL</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">GREATER_EQUAL</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>LESS</code>：如果左侧数值<code>小于</code>右侧，返回<code>True</code></li><li><code>GREATER</code>：如果左侧数值<code>大于</code>右侧，返回<code>True</code></li><li><code>EQUAL</code>：如果左侧数值<code>等于</code>右侧，返回<code>True</code></li><li><code>LESS_EQUAL</code>：如果左侧数值<code>小于等于</code>右侧，返回<code>True</code></li><li><code>GREATER_EQUAL</code>：如果左侧数值<code>大于等于</code>右侧，返回<code>True</code></li></ul><p><strong>基于字符串的比较</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">STRLESS</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">STRGREATER</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">STREQUAL</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">STRLESS_EQUAL</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">STRGREATER_EQUAL</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>STRLESS</code>：如果左侧字符串<code>小于</code>右侧，返回<code>True</code></li><li><code>STRGREATER</code>：如果左侧字符串<code>大于</code>右侧，返回<code>True</code></li><li><code>STREQUAL</code>：如果左侧字符串<code>等于</code>右侧，返回<code>True</code></li><li><code>STRLESS_EQUAL</code>：如果左侧字符串<code>小于等于</code>右侧，返回<code>True</code><br><code>STRGREATER_EQUAL</code>：如果左侧字符串<code>大于等于</code>右侧，返回<code>True</code></li></ul><hr><h3 id="5-1-4-文件操作"><a href="#5-1-4-文件操作" class="headerlink" title="5.1.4 文件操作"></a>5.1.4 文件操作</h3><p><strong>判断文件或者目录是否存在</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">EXISTS</span> path-to-<span class="keyword">file</span>-<span class="keyword">or</span>-directory)</span><br></pre></td></tr></table></figure><p>如果文件或者目录存在返回True，否则返回False。</p><p><strong>判断是不是目录</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">IS_DIRECTORY</span> path)</span><br></pre></td></tr></table></figure><ul><li><font color = red> 此处目录的 path 必须是绝对路径</font></li><li>如果目录存在返回True，目录不存在返回False。</li></ul><p><strong>判断是不是软连接</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">IS_SYMLINK</span> <span class="keyword">file</span>-name)</span><br></pre></td></tr></table></figure><ul><li><font color = red>此处的 file-name 对应的路径必须是绝对路径</font></li><li>如果软链接存在返回True，软链接不存在返回False。</li><li>软链接相当于 Windows 里的快捷方式</li></ul><p><strong>判断是不是绝对路径</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">IS_ABSOLUTE</span> path)</span><br></pre></td></tr></table></figure><ul><li>关于绝对路径:<ul><li>如果是Linux，该路径需要从根目录开始描述</li><li>如果是Windows，该路径需要从盘符开始描述</li></ul></li><li>如果是绝对路径返回True，如果不是绝对路径返回False。</li></ul><hr><h3 id="5-1-5-其它"><a href="#5-1-5-其它" class="headerlink" title="5.1.5 其它"></a>5.1.5 其它</h3><p><strong>判断某个元素是否在列表中</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">IN_LIST</span> &lt;variable&gt;)</span><br></pre></td></tr></table></figure><ul><li><font color = red>CMake 版本要求：大于等于3.3</font></li><li>如果这个元素在列表中返回True，否则返回False。</li></ul><p><strong>比较两个路径是否相等</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; PATH_EQUAL &lt;variable|<span class="keyword">string</span>&gt;)</span><br></pre></td></tr></table></figure><ul><li><font color = red> CMake 版本要求：大于等于3.24</font></li><li>如果这个元素在列表中返回True，否则返回False。</li></ul><p>关于路径的比较其实就是另个字符串的比较，如果路径格式书写没有问题也可以通过下面这种方式进行比较：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(&lt;variable|<span class="keyword">string</span>&gt; <span class="keyword">STREQUAL</span> &lt;variable|<span class="keyword">string</span>&gt;)</span><br></pre></td></tr></table></figure><p>我们在书写某个路径的时候，可能由于误操作会多写几个分隔符，比如把<code>/a/b/c写成/a//b///c</code>，此时通过<code>STREQUAL</code>对这两个字符串进行比较肯定是不相等的，但是通过<code>PATH_EQUAL</code>去比较两个路径，得到的结果确实相等的，可以看下面的例子：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.26</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;/home//robin///Linux&quot;</span> PATH_EQUAL <span class="string">&quot;/home/robin/Linux&quot;</span>)</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;路径相等&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;路径不相等&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;/home//robin///Linux&quot;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;/home/robin/Linux&quot;</span>)</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;路径相等&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(<span class="string">&quot;路径不相等&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>输出的日志信息如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">路径相等</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">路径不相等</span><br></pre></td></tr></table></figure><p><font color = red>在进行路径比较的时候，如果使用 PATH_EQUAL 可以自动剔除路径中多余的分割线然后再进行路径的对比，使用 STREQUAL 则只能进行字符串比较。</font></p><hr><h2 id="5-2-循环"><a href="#5-2-循环" class="headerlink" title="5.2 循环"></a>5.2 循环</h2><p>在 CMake 中循环有两种方式，分别是：<code>foreach</code>和<code>while</code>。</p><h3 id="5-2-1-foreach"><a href="#5-2-1-foreach" class="headerlink" title="5.2.1 foreach"></a>5.2.1 foreach</h3><p>使用 foreach 进行循环，语法格式如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; &lt;items&gt;)</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure><p>通过<code>foreach</code>我们就可以对<code>items</code>中的数据进行遍历，然后通过<code>loop_var</code>将遍历到的当前的值取出，在取值的时候有以下几种用法：</p><p><strong>方法1</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; RANGE &lt;stop&gt;)</span><br></pre></td></tr></table></figure><ul><li><code>RANGE</code>：关键字，表示要遍历范围</li><li><code>stop</code>：这是一个正整数，表示范围的结束值，在遍历的时候从 0 开始，最大值为 stop。</li><li><code>loop_var</code>：存储每次循环取出的值</li></ul><p>举例说明：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line"><span class="keyword">foreach</span>(item RANGE <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure><p>输出的日志信息是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- 当前遍历的值为: 0</span><br><span class="line">-- 当前遍历的值为: 1</span><br><span class="line">-- 当前遍历的值为: 2</span><br><span class="line">-- 当前遍历的值为: 3</span><br><span class="line">-- 当前遍历的值为: 4</span><br><span class="line">-- 当前遍历的值为: 5</span><br><span class="line">-- 当前遍历的值为: 6</span><br><span class="line">-- 当前遍历的值为: 7</span><br><span class="line">-- 当前遍历的值为: 8</span><br><span class="line">-- 当前遍历的值为: 9</span><br><span class="line">-- 当前遍历的值为: 10</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure><p><font color = red>再次强调：在对一个整数区间进行遍历的时候，得到的范围是这样的 【0，stop】，右侧是闭区间包含 stop 这个值。</font></p><p><strong>方法2</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; RANGE &lt;start&gt; &lt;stop&gt; [&lt;step&gt;])</span><br></pre></td></tr></table></figure><p>这是上面<code>方法1</code>的加强版，我们在遍历一个整数区间的时候，除了可以指定起始范围，还可以指定步长。</p><ul><li><code>RANGE</code>：关键字，表示要遍历范围</li><li><code>start</code>：这是一个正整数，表示范围的起始值，也就是说最小值为 <code>start</code></li><li><code>stop</code>：这是一个正整数，表示范围的结束值，也就是说最大值为 <code>stop</code></li><li><code>step</code>：控制每次遍历的时候以怎样的步长增长，默认为1，可以不设置</li><li><code>loop_var</code>：存储每次循环取出的值</li></ul><p>举例说明：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(item RANGE <span class="number">10</span> <span class="number">30</span> <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure><p>输出的结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- 当前遍历的值为: 10</span><br><span class="line">-- 当前遍历的值为: 12</span><br><span class="line">-- 当前遍历的值为: 14</span><br><span class="line">-- 当前遍历的值为: 16</span><br><span class="line">-- 当前遍历的值为: 18</span><br><span class="line">-- 当前遍历的值为: 20</span><br><span class="line">-- 当前遍历的值为: 22</span><br><span class="line">-- 当前遍历的值为: 24</span><br><span class="line">-- 当前遍历的值为: 26</span><br><span class="line">-- 当前遍历的值为: 28</span><br><span class="line">-- 当前遍历的值为: 30</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure><p><font color = red>再次强调：在使用上面的方式对一个整数区间进行遍历的时候，得到的范围是这样的 【start，stop】，左右两侧都是闭区间，包含 start 和 stop 这两个值，步长 step 默认为1，可以不设置。</font></p><p><strong>方法3</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt; IN [LISTS [&lt;lists&gt;]] [ITEMS [&lt;items&gt;]])</span><br></pre></td></tr></table></figure><p>这是<code>foreach</code>的另一个变体，通过这种方式我们可以对更加复杂的数据进行遍历，前两种方式只适用于对某个正整数范围内的遍历。</p><ul><li><p><code>IN</code>：关键字，表示在 xxx 里边</p></li><li><p><code>LISTS</code>：关键字，对应的是列表<code>list</code>，通过<code>set</code>、<code>list</code>可以获得</p></li><li><p><code>ITEMS</code>：关键字，对应的也是列表</p></li><li><p><code>loop_var</code>：存储每次循环取出的值</p></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 创建 list</span></span><br><span class="line"><span class="keyword">set</span>(WORD a b c d)</span><br><span class="line"><span class="keyword">set</span>(NAME ace sabo luffy)</span><br><span class="line"><span class="comment"># 遍历 list</span></span><br><span class="line"><span class="keyword">foreach</span>(item IN LISTS WORD NAME)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure><p>在上面的例子中，创建了两个 <code>list</code> 列表，在遍历的时候对它们两个都进行了遍历（<code>可以根据实际需求选择同时遍历多个或者只遍历一个</code>）。输出的日志信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- 当前遍历的值为: a</span><br><span class="line">-- 当前遍历的值为: b</span><br><span class="line">-- 当前遍历的值为: c</span><br><span class="line">-- 当前遍历的值为: d</span><br><span class="line">-- 当前遍历的值为: ace</span><br><span class="line">-- 当前遍历的值为: sabo</span><br><span class="line">-- 当前遍历的值为: luffy</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure><p>一共输出了7个字符串，说明遍历是没有问题的。接下来看另外一种方式：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.2</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(WORD a b c <span class="string">&quot;d e f&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(NAME ace sabo luffy)</span><br><span class="line"><span class="keyword">foreach</span>(item IN ITEMS <span class="variable">$&#123;WORD&#125;</span> <span class="variable">$&#123;NAME&#125;</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: $&#123;item&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure><p>在上面的例子中，遍历过程中将关键字<code>LISTS</code>改成了<code>ITEMS</code>，后边跟的还是一个或者多个列表，只不过此时需要通过<code>$&#123;&#125;</code>将列表中的值取出。其输出的信息和上一个例子是一样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- 当前遍历的值为: a</span><br><span class="line">-- 当前遍历的值为: b</span><br><span class="line">-- 当前遍历的值为: c</span><br><span class="line">-- 当前遍历的值为: d e f</span><br><span class="line">-- 当前遍历的值为: ace</span><br><span class="line">-- 当前遍历的值为: sabo</span><br><span class="line">-- 当前遍历的值为: luffy</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure><p><font color = red>细节：在通过 set 组织列表的时候，如果某个字符串中有空格，可以通过双引号将其包裹起来，具体的操作方法可以参考上面的例子。</font></p><p><strong>方法4</strong><br><font color = red>注意事项：这种循环方式要求CMake的版本大于等于 3.17。</font></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(&lt;loop_var&gt;... IN ZIP_LISTS &lt;lists&gt;)</span><br></pre></td></tr></table></figure><p>通过这种方式，遍历的还是一个或多个列表，可以理解为是<code>方式3</code>的加强版。因为通过上面的方式遍历多个列表，但是又想把指定列表中的元素取出来使用是做不到的，在这个加强版中就可以轻松实现。</p><ul><li><code>loop_var</code>：存储每次循环取出的值，可以根据要遍历的列表的数量指定多个变量，用于存储对应的列表当前取出的那个值。<ul><li><code>如果指定了多个变量名，它们的数量应该和列表的数量相等</code></li><li><code>如果只给出了一个 loop_var，那么它将一系列的 loop_var_N 变量来存储对应列表中的当前项，也就是说 loop_var_0 对应第一个列表，loop_var_1 对应第二个列表，以此类推......</code></li><li><code>如果遍历的多个列表中一个列表较短，当它遍历完成之后将不会再参与后续的遍历（因为其它列表还没有遍历完）。</code></li></ul></li><li><code>IN</code>：关键字，表示在 xxx 里边</li><li><code>ZIP_LISTS</code>：关键字，对应的是列表<code>list</code>，通过<code>set</code> 、<code>list</code>可以获得</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 通过list给列表添加数据</span></span><br><span class="line"><span class="keyword">list</span>(APPEND WORD hello world <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="keyword">list</span>(APPEND NAME ace sabo luffy zoro sanji)</span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line"><span class="keyword">foreach</span>(item1 item2 IN ZIP_LISTS WORD NAME)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: item1 = $&#123;item1&#125;, item2=$&#123;item2&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;=============================&quot;</span>)</span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line"><span class="keyword">foreach</span>(item  IN ZIP_LISTS WORD NAME)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;当前遍历的值为: item1 = $&#123;item_0&#125;, item2=$&#123;item_1&#125;&quot;</span> )</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure><p>在这个例子中关于列表数据的添加是通过<code>list</code>来实现的。在遍历列表的时候一共使用了两种方式，一种提供了多个变量来存储当前列表中的值，另一种只有一个变量，但是实际取值的时候需要通过<code>变量名_0、变量名_1、变量名_N</code> 的方式来操作，<font color = red>注意事项：第一个列表对应的编号是0，第一个列表对应的编号是0，第一个列表对应的编号是0。</font></p><p>上面的例子输出的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- 当前遍历的值为: item1 = hello, item2=ace</span><br><span class="line">-- 当前遍历的值为: item1 = world, item2=sabo</span><br><span class="line">-- 当前遍历的值为: item1 = hello world, item2=luffy</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=zoro</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=sanji</span><br><span class="line">=============================</span><br><span class="line">-- 当前遍历的值为: item1 = hello, item2=ace</span><br><span class="line">-- 当前遍历的值为: item1 = world, item2=sabo</span><br><span class="line">-- 当前遍历的值为: item1 = hello world, item2=luffy</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=zoro</span><br><span class="line">-- 当前遍历的值为: item1 = , item2=sanji</span><br><span class="line">-- Configuring done (0.0s)</span><br><span class="line">-- Generating done (0.0s)</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure><hr><h3 id="5-2-2-while"><a href="#5-2-2-while" class="headerlink" title="5.2.2 while"></a>5.2.2 while</h3><p>除了使用<code>foreach</code>也可以使用 <code>while</code> 进行循环，关于循环结束对应的条件判断的书写格式和<code>if/elseif</code> 是一样的。<code>while</code>的语法格式如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(&lt;condition&gt;)</span><br><span class="line">    &lt;commands&gt;</span><br><span class="line"><span class="keyword">endwhile</span>()</span><br></pre></td></tr></table></figure><p><code>while</code>循环比较简单，只需要指定出循环结束的条件即可：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span>)</span><br><span class="line"><span class="comment"># 创建一个列表 NAME</span></span><br><span class="line"><span class="keyword">set</span>(NAME luffy sanji zoro nami robin)</span><br><span class="line"><span class="comment"># 得到列表长度</span></span><br><span class="line"><span class="keyword">list</span>(LENGTH NAME LEN)</span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$&#123;LEN&#125;</span> <span class="keyword">GREATER</span>  <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;names = $&#123;NAME&#125;&quot;</span>)</span><br><span class="line">    <span class="comment"># 弹出列表头部元素</span></span><br><span class="line">    <span class="keyword">list</span>(POP_FRONT NAME)</span><br><span class="line">    <span class="comment"># 更新列表长度</span></span><br><span class="line">    <span class="keyword">list</span>(LENGTH NAME LEN)</span><br><span class="line"><span class="keyword">endwhile</span>()</span><br></pre></td></tr></table></figure><p>输出的结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line">-- names = luffy;sanji;zoro;nami;robin</span><br><span class="line">-- names = sanji;zoro;nami;robin</span><br><span class="line">-- names = zoro;nami;robin</span><br><span class="line">-- names = nami;robin</span><br><span class="line">-- names = robin</span><br><span class="line">-- Configuring done (0.0s)</span><br><span class="line">-- Generating done (0.0s)</span><br><span class="line">-- Build files have been written to: /home/robin/abc/a/build</span><br></pre></td></tr></table></figure><p>可以看到当列表中的元素全部被弹出之后，列表的长度变成了0，此时<code>while</code>循环也就退出了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-CMake概述&quot;&gt;&lt;a href=&quot;#1-CMake概述&quot; class=&quot;headerlink&quot; title=&quot;1. CMake概述&quot;&gt;&lt;/a&gt;1. CMake概述&lt;/h1&gt;&lt;p&gt;CMake 是一个项目构建工具，并且是跨平台的。关于项目构建我们所熟知的还有Ma</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="CMake" scheme="http://example.com/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>回溯贪心算法篇</title>
    <link href="http://example.com/2023/10/22/%E5%9B%9E%E6%BA%AF%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%AF%87/"/>
    <id>http://example.com/2023/10/22/%E5%9B%9E%E6%BA%AF%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E7%AF%87/</id>
    <published>2023-10-22T01:56:20.000Z</published>
    <updated>2023-10-23T03:58:51.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-回溯算法"><a href="#1-回溯算法" class="headerlink" title="1.回溯算法"></a>1.回溯算法</h1><h2 id="1-1-77-组合"><a href="#1-1-77-组合" class="headerlink" title="1.1 77-组合"></a>1.1 77-组合</h2><p><a href="https://leetcode.cn/problems/combinations/description/">77</a></p><p><img src="/img/e.1.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="comment">//组合抽象为一个泡泡树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == k)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path); <span class="comment">//将泡泡数据加入结果</span></span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//返回去等待删除一个泡泡</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startIndex; i &lt;= n-(k-path.<span class="built_in">size</span>())+<span class="number">1</span>; ++i )</span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);  <span class="comment">//加入一个泡泡</span></span><br><span class="line">            <span class="built_in">backtracking</span>(n,k,i+<span class="number">1</span>); <span class="comment">//负责剩下的泡泡处理</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">//删除一个泡泡</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>画的巨抽象的图<br><img src="/img/e.2.png" alt="在这里插入图片描述"><br><img src="/img/e.3.png" alt="在这里插入图片描述"></p></blockquote><hr><h2 id="1-2-216-组合的综合III"><a href="#1-2-216-组合的综合III" class="headerlink" title="1.2 216-组合的综合III"></a>1.2 216-组合的综合III</h2><p><a href="https://leetcode.cn/problems/combination-sum-iii/">216</a></p><p><img src="/img/e.4.png" alt="在这里插入图片描述"></p><blockquote><p>注意剪枝</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> k , <span class="type">int</span> n, <span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : path)</span><br><span class="line">                sum+=e;</span><br><span class="line">            <span class="keyword">if</span>(sum == n)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex; i &lt;= <span class="number">9</span> - (k-path.<span class="built_in">size</span>()) +<span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backtracking</span>(k,n,i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(k,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-17-电话号码的字母组合"><a href="#1-3-17-电话号码的字母组合" class="headerlink" title="1.3 17-电话号码的字母组合"></a>1.3 17-电话号码的字母组合</h2><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17</a></p><p><img src="/img/e.5.png" alt="在这里插入图片描述"><br><img src="/img/e.6.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string path;</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    vector&lt;string&gt; dir=&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>,<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqrs&quot;</span>,<span class="string">&quot;tuv&quot;</span>,<span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string digits,<span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(startindex==digits.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num=digits[startindex]-<span class="string">&#x27;0&#x27;</span>; <span class="comment">//字符串转整形</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; dir[num].<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(dir[num][i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(digits,startindex+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.<span class="built_in">size</span>()==<span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">backtracking</span>(digits,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4-39-组合总和"><a href="#1-4-39-组合总和" class="headerlink" title="1.4 39-组合总和"></a>1.4 39-组合总和</h2><p><a href="https://leetcode.cn/problems/combination-sum/">39</a></p><p><img src="/img/e.7.png" alt="在这里插入图片描述"><br><img src="/img/e.8.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target,<span class="type">int</span> sum,<span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex; i &lt; candidates.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=candidates[i];</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(candidates,target,sum,i);</span><br><span class="line">            sum-=candidates[i];</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(candidates,target,sum,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>然而还需要优化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target,<span class="type">int</span> sum,<span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将sum&gt;target的if移入至for中,由于已经排序,如果发生了,直接当作for的判断条件跳出循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex; i &lt; candidates.<span class="built_in">size</span>() &amp;&amp; </span><br><span class="line">            sum+candidates[i] &lt;= target; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=candidates[i];</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(candidates,target,sum,i);</span><br><span class="line">            sum-=candidates[i];</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(),candidates.<span class="built_in">end</span>()); <span class="comment">//排序一下</span></span><br><span class="line">        <span class="built_in">backtracking</span>(candidates,target,sum,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-5-40-组合总和II"><a href="#1-5-40-组合总和II" class="headerlink" title="1.5 40-组合总和II"></a>1.5 40-组合总和II</h2><p><a href="https://leetcode.cn/problems/combination-sum-ii/solutions/857552/dai-ma-sui-xiang-lu-dai-ni-xue-tou-hui-s-ig29/">40</a></p><p><img src="/img/e.9.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target,<span class="type">int</span> sum, <span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex; i &lt; candidates.<span class="built_in">size</span>() &amp;&amp; sum+candidates[i] &lt;= target;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//防止candidates中有重复元素的影响,重复开始算入答案,导致结果有重复</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; startindex &amp;&amp; candidates[i] == candidates[i<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            sum+=candidates[i];</span><br><span class="line">            path.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(candidates,target,sum,i+<span class="number">1</span>);</span><br><span class="line">            sum-=candidates[i];</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(),candidates.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">backtracking</span>(candidates,target,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/img/e.10.png" alt="在这里插入图片描述"></p><hr><h2 id="1-6-131-分割回文串"><a href="#1-6-131-分割回文串" class="headerlink" title="1.6 131-分割回文串"></a>1.6 131-分割回文串</h2><p><a href="https://leetcode.cn/problems/palindrome-partitioning/description/">131</a></p><p><img src="/img/e.11.png" alt="在这里插入图片描述"><br><img src="/img/e.12.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">    vector&lt;string&gt; path;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_back</span><span class="params">(<span class="type">const</span> string&amp; str,<span class="type">int</span> start,<span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[start] != str[end])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string s,<span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(startindex == s.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex; i &lt; s.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">is_back</span>(s,startindex,i))</span><br><span class="line">            &#123;</span><br><span class="line">                string tmp = s.<span class="built_in">substr</span>(startindex,i-startindex+<span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">backtracking</span>(s,i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>优化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; result;</span><br><span class="line">    vector&lt;string&gt; path;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; isPalindrome; <span class="comment">// 放事先计算好的是否回文子串的结果</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span> <span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> startIndex)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.<span class="built_in">size</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; s.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome[startIndex][i]) </span><br><span class="line">            &#123;   </span><br><span class="line">                string str = s.<span class="built_in">substr</span>(startIndex, i - startIndex + <span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">push_back</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>         </span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">backtracking</span>(s, i + <span class="number">1</span>); <span class="comment">// 寻找i+1为起始位置的子串</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯过程，弹出本次已经填在的子串</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">computePalindrome</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123; <span class="comment">//aab </span></span><br><span class="line">        <span class="comment">// true  true  false  j--i 为回文串?</span></span><br><span class="line">        <span class="comment">// false true  false</span></span><br><span class="line">        <span class="comment">// false false true</span></span><br><span class="line">        isPalindrome.<span class="built_in">resize</span>(s.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(s.<span class="built_in">size</span>(), <span class="literal">false</span>)); </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == i) </span><br><span class="line">                    isPalindrome[i][j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j - i == <span class="number">1</span>) </span><br><span class="line">                    isPalindrome[i][j] = (s[i] == s[j]);</span><br><span class="line">                <span class="keyword">else</span>    <span class="comment">//如果中间隔的多,只需判断首尾和通过表中的判断</span></span><br><span class="line">                    isPalindrome[i][j] = (s[i] == s[j] &amp;&amp; isPalindrome[i+<span class="number">1</span>][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        <span class="built_in">computePalindrome</span>(s);</span><br><span class="line">        <span class="built_in">backtracking</span>(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-7-93-复原IP地址"><a href="#1-7-93-复原IP地址" class="headerlink" title="1.7 93-复原IP地址"></a>1.7 93-复原IP地址</h2><p><a href="https://leetcode.cn/problems/restore-ip-addresses/description/">93</a></p><p><img src="/img/e.13.png" alt="在这里插入图片描述"><br><img src="/img/e.14.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isvalid</span><span class="params">(string&amp; s,<span class="type">int</span> start,<span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[start] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end) <span class="comment">//头部为0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">//统计三个数是否合法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = start; i &lt;=end ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &gt;<span class="string">&#x27;9&#x27;</span> || s[i] &lt; <span class="string">&#x27;0&#x27;</span>) <span class="comment">//非法字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            sum = sum*<span class="number">10</span>+s[i]-<span class="string">&#x27;0&#x27;</span>; <span class="comment">//超过255</span></span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">255</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(string&amp; s,<span class="type">int</span> startindex,<span class="type">int</span> pointnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pointnum == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将最后一组全部放进去,还可以避免切的太小而导致的没有用完</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isvalid</span>(s,startindex,s.<span class="built_in">size</span>()<span class="number">-1</span>)) </span><br><span class="line">                ans.<span class="built_in">push_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex;i&lt;s.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isvalid</span>(s,startindex,i))</span><br><span class="line">            &#123;</span><br><span class="line">                s.<span class="built_in">insert</span>(s.<span class="built_in">begin</span>()+i+<span class="number">1</span>,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                pointnum++;</span><br><span class="line">                <span class="built_in">backtracking</span>(s,i+<span class="number">2</span>,pointnum); <span class="comment">//i跳两格,因为有.</span></span><br><span class="line">                s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()+i+<span class="number">1</span>); <span class="comment">//删除.</span></span><br><span class="line">                pointnum--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//不合法直接跳出去(递归中出去)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">restoreIpAddresses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() &lt; <span class="number">4</span> || s.<span class="built_in">size</span>()&gt;<span class="number">12</span>)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">backtracking</span>(s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-8-78-子集"><a href="#1-8-78-子集" class="headerlink" title="1.8 78-子集"></a>1.8 78-子集</h2><p><a href="https://leetcode.cn/problems/subsets/">78</a></p><p><img src="/img/e.15.png" alt="在这里插入图片描述"><br><img src="/img/e.16.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsets</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-9-90-子集II"><a href="#1-9-90-子集II" class="headerlink" title="1.9 90-子集II"></a>1.9 90-子集II</h2><p><a href="https://leetcode.cn/problems/subsets-ii/description/">90</a></p><p><img src="/img/e.17.png" alt="在这里插入图片描述"></p><blockquote><p>相较于上一题,只是多了一步去重</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> startindex)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = startindex; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;startindex &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]) <span class="comment">//去重</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>()); <span class="comment">//先排序以便去重</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-10-491-递增子序列"><a href="#1-10-491-递增子序列" class="headerlink" title="1.10 491-递增子序列"></a>1.10 491-递增子序列</h2><p><a href="https://leetcode.cn/problems/non-decreasing-subsequences/description/">491</a></p><p><img src="/img/e.18.png" alt="在这里插入图片描述"></p><blockquote><p>利用哈希来去重</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> startIndex)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() &gt; <span class="number">1</span>) </span><br><span class="line">            result.<span class="built_in">push_back</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> used[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 这里使用数组来进行去重操作，题目说数值范围[-100, 100]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt; nums.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((!path.<span class="built_in">empty</span>() &amp;&amp; nums[i] &lt; path.<span class="built_in">back</span>()) <span class="comment">//不满足递增</span></span><br><span class="line">                    || used[nums[i] + <span class="number">100</span>] == <span class="number">1</span>) <span class="comment">//有重复</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            used[nums[i] + <span class="number">100</span>] = <span class="number">1</span>; <span class="comment">// 记录这个元素在本层用过了，本层后面不能再用了</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-11-46-全排列"><a href="#1-11-46-全排列" class="headerlink" title="1.11 46-全排列"></a>1.11 46-全排列</h2><p><a href="https://leetcode.cn/problems/permutations/">46</a></p><p><img src="/img/e.19.png" alt="在这里插入图片描述"></p><blockquote><p>利用used数组和for的从0开始</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,vector&lt;<span class="type">bool</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i] == <span class="literal">true</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">backtracking</span>(nums,used);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">used</span><span class="params">(nums.size(),<span class="literal">false</span>)</span></span>; <span class="comment">//记录元素是否被使用过</span></span><br><span class="line">        <span class="built_in">backtracking</span>(nums,used);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-12-47-全排列II"><a href="#1-12-47-全排列II" class="headerlink" title="1.12 47-全排列II"></a>1.12 47-全排列II</h2><p><a href="https://leetcode.cn/problems/permutations-ii/solutions/418230/47-quan-pai-lie-iiche-di-li-jie-pai-lie-zhong-de-q/">47</a></p><p><img src="/img/e.20.png" alt="在这里插入图片描述"></p><blockquote><p>相较于上一题多出了,树枝去重</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,vector&lt;<span class="type">bool</span>&gt;&amp; used)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//i&gt;0 且 有重复的数据时,判断used[i-1]</span></span><br><span class="line">            <span class="keyword">if</span>((i&gt;<span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &amp;&amp; used[i<span class="number">-1</span>] == <span class="literal">false</span>) <span class="comment">//树枝去重</span></span><br><span class="line">                || used[i] == <span class="literal">true</span>) <span class="comment">//树层去重</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">backtracking</span>(nums,used);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">used</span><span class="params">(nums.size(),<span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="built_in">backtracking</span>(nums,used);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-13-51-N皇后"><a href="#1-13-51-N皇后" class="headerlink" title="1.13* 51-N皇后"></a>1.13* 51-N皇后</h2><p><a href="https://leetcode.cn/problems/n-queens/description/">51</a><br><img src="/img/e.21.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isvalid</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,vector&lt;string&gt;&amp; chessboard,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//check col</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(chessboard[i][col] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//check lefter</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = row<span class="number">-1</span>,j = col<span class="number">-1</span>;i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>; --j,--i )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//check righter</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = row<span class="number">-1</span>, j = col+<span class="number">1</span>; j &lt; n &amp;&amp; i&gt;=<span class="number">0</span>; ++j,--i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> n , <span class="type">int</span> row,vector&lt;string&gt;&amp; chessboard)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row == n)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(chessboard);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isvalid</span>(row,i,chessboard,n))</span><br><span class="line">            &#123;</span><br><span class="line">                chessboard[row][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                <span class="built_in">backtracking</span>(n,row+<span class="number">1</span>,chessboard);</span><br><span class="line">                chessboard[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">chessboard</span><span class="params">(n,string(n,<span class="string">&#x27;.&#x27;</span>))</span></span>; <span class="comment">//初始化棋盘</span></span><br><span class="line">        <span class="built_in">backtracking</span>(n,<span class="number">0</span>,chessboard);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="2-贪心算法"><a href="#2-贪心算法" class="headerlink" title="2. 贪心算法"></a>2. 贪心算法</h1><h2 id="2-1-455-分发饼干"><a href="#2-1-455-分发饼干" class="headerlink" title="2.1 455-分发饼干"></a>2.1 455-分发饼干</h2><p><a href="https://leetcode.cn/problems/assign-cookies/description/">455</a></p><p><img src="/img/e.22.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; g, vector&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(),g.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> index = s.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">//最大饼干坐标</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = g.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) <span class="comment">//从最大胃口开始遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(index &gt;= <span class="number">0</span> &amp;&amp; s[index] &gt;= g[i])</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                index--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-376-摆动序列"><a href="#2-2-376-摆动序列" class="headerlink" title="2.2 376-摆动序列"></a>2.2 376-摆动序列</h2><p><a href="https://leetcode.cn/problems/wiggle-subsequence/description/">376</a></p><p><img src="/img/e.23.png" alt="在这里插入图片描述"><br><img src="/img/e.24.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">wiggleMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> curdif = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> prevdif = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>; <span class="comment">//第一个数没有比较,直接算上</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() <span class="number">-1</span>;++i) <span class="comment">//最后一个数据不算入(i+1)</span></span><br><span class="line">        &#123;</span><br><span class="line">            curdif = nums[i+<span class="number">1</span>] - nums[i];</span><br><span class="line">            <span class="keyword">if</span>((prevdif &lt;= <span class="number">0</span> &amp;&amp; curdif&gt;<span class="number">0</span>) || (prevdif &gt;=<span class="number">0</span> &amp;&amp; curdif&lt;<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                prevdif = curdif;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-53-最大数组和"><a href="#2-3-53-最大数组和" class="headerlink" title="2.3 53-最大数组和"></a>2.3 53-最大数组和</h2><p><a href="https://leetcode.cn/problems/maximum-subarray/description/">53</a></p><p><img src="/img/e.25.png" alt="在这里插入图片描述"><br><img src="/img/e.26.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = INT_MIN;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            count+=nums[i];</span><br><span class="line">            <span class="keyword">if</span>(count &gt; ans) <span class="comment">//记录小段中的最大值,即答案</span></span><br><span class="line">                ans = count;</span><br><span class="line">            <span class="keyword">if</span>(count &lt;= <span class="number">0</span>) <span class="comment">//小段中如果小于0,累加之后就是亏,直接置0重新开始</span></span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-122-买股票的最佳时机II"><a href="#2-4-122-买股票的最佳时机II" class="headerlink" title="2.4 122-买股票的最佳时机II"></a>2.4 122-买股票的最佳时机II</h2><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/">122</a></p><p><img src="/img/e.27.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp = prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; <span class="number">0</span>) </span><br><span class="line">                profit += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-5-55-跳跃游戏"><a href="#2-5-55-跳跃游戏" class="headerlink" title="2.5 55-跳跃游戏"></a>2.5 55-跳跃游戏</h2><p><a href="https://leetcode.cn/problems/jump-game/description/">55</a></p><p><img src="/img/e.28.png" alt="在这里插入图片描述"><br><img src="/img/e.29.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cover = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cover; i++) </span><br><span class="line">        &#123; </span><br><span class="line">            cover = <span class="built_in">max</span>(i + nums[i], cover);</span><br><span class="line">            <span class="keyword">if</span> (cover &gt;= nums.<span class="built_in">size</span>() - <span class="number">1</span>) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6-45-跳跃游戏II"><a href="#2-6-45-跳跃游戏II" class="headerlink" title="2.6 45-跳跃游戏II"></a>2.6 45-跳跃游戏II</h2><p><a href="https://leetcode.cn/problems/jump-game-ii/description/">45</a></p><p><img src="/img/e.30.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> maxPos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (end &lt; nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; end; i++)</span><br><span class="line">                maxPos = <span class="built_in">max</span>(maxPos, i + nums[i]);</span><br><span class="line">                </span><br><span class="line">            start = end;      <span class="comment">// 下一次起跳点范围开始的格子</span></span><br><span class="line">            end = maxPos + <span class="number">1</span>; <span class="comment">// 下一次起跳点范围结束的格子</span></span><br><span class="line">            ans++;            <span class="comment">// 跳跃次数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-7-1005-K次取反后最大化的数组和"><a href="#2-7-1005-K次取反后最大化的数组和" class="headerlink" title="2.7 1005-K次取反后最大化的数组和"></a>2.7 1005-K次取反后最大化的数组和</h2><p><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/description/">1005</a></p><p><img src="/img/e.31.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestSumAfterKNegations</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; <span class="number">0</span> &amp;&amp; k &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[i] *= <span class="number">-1</span>;</span><br><span class="line">                k--;</span><br><span class="line">                index = i + <span class="number">1</span>; <span class="comment">// 最后一个取反的元素的下标+1，也就是第一个没被取反的元素的下标&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到对所有负数取反后的最小非负数的下标,分别考虑原数组全正、全负、有正有负的情况</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; index &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[index] &gt; nums[index - <span class="number">1</span>])</span><br><span class="line">            index = index - <span class="number">1</span>;<span class="comment">//对比正负交界处,如果原本是全正,根本就进不去</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) <span class="comment">//即原本是全负</span></span><br><span class="line">            index = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            ans -= nums[index] * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-8-134-加油站"><a href="#2-8-134-加油站" class="headerlink" title="2.8 134-加油站"></a>2.8 134-加油站</h2><p><a href="https://leetcode.cn/problems/gas-station/description/">134</a><br><img src="/img/e.32.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> curSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> totalSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; gas.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            curSum += gas[i] - cost[i]; <span class="comment">//计算起点</span></span><br><span class="line">            totalSum += gas[i] - cost[i]; <span class="comment">//计算是否可以跑完</span></span><br><span class="line">            <span class="keyword">if</span> (curSum &lt; <span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                start = i + <span class="number">1</span>;  <span class="comment">// 起始位置更新为i+1</span></span><br><span class="line">                curSum = <span class="number">0</span>;     <span class="comment">// curSum从0开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (totalSum &lt; <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 说明怎么走都不可能跑一圈了</span></span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-9-135-分发糖果"><a href="#2-9-135-分发糖果" class="headerlink" title="2.9* 135-分发糖果"></a>2.9* 135-分发糖果</h2><p><a href="https://leetcode.cn/problems/candy/">135</a></p><p><img src="/img/e.33.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">candyVec</span><span class="params">(ratings.size(), <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 从前向后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; ratings.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) </span><br><span class="line">                candyVec[i] = candyVec[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从后向前</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = ratings.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i + <span class="number">1</span>] ) </span><br><span class="line">                candyVec[i] = <span class="built_in">max</span>(candyVec[i], candyVec[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计结果</span></span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; candyVec.<span class="built_in">size</span>(); i++) </span><br><span class="line">            result += candyVec[i];</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-10-860-柠檬水找零"><a href="#2-10-860-柠檬水找零" class="headerlink" title="2.10 860-柠檬水找零"></a>2.10 860-柠檬水找零</h2><p><a href="https://leetcode.cn/problems/lemonade-change/description/">860</a></p><p><img src="/img/e.34.png" alt="在这里插入图片描述"><br><img src="/img/e.35.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">lemonadeChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; bills)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> five = <span class="number">0</span>, ten = <span class="number">0</span>, twenty = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> bill : bills) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (bill == <span class="number">5</span>) </span><br><span class="line">                five++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bill == <span class="number">10</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (five &lt;= <span class="number">0</span>) </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                ten++;</span><br><span class="line">                five--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (five &gt; <span class="number">0</span> &amp;&amp; ten &gt; <span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    five--;</span><br><span class="line">                    ten--;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (five &gt;= <span class="number">3</span>) <span class="comment">//三个五块也能找零</span></span><br><span class="line">                    five -= <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> </span><br><span class="line">                    <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-11-406-根据身高重建队列"><a href="#2-11-406-根据身高重建队列" class="headerlink" title="2.11 406-根据身高重建队列"></a>2.11 406-根据身高重建队列</h2><p><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/description/">406</a></p><p><img src="/img/e.36.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,vector&lt;<span class="type">int</span>&gt;&amp; b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; people) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(people.<span class="built_in">begin</span>(),people.<span class="built_in">end</span>(),cmp);</span><br><span class="line">        list&lt;vector&lt;<span class="type">int</span>&gt;&gt; que; <span class="comment">//链表插入效率高</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; people.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> position = people[i][<span class="number">1</span>];</span><br><span class="line">            list&lt;vector&lt;<span class="type">int</span>&gt;&gt;::iterator it = que.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">while</span>(position--)</span><br><span class="line">                it++;</span><br><span class="line">            que.<span class="built_in">insert</span>(it,people[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(que.<span class="built_in">begin</span>(),que.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-12-452-用最少数量的箭引爆气球"><a href="#2-12-452-用最少数量的箭引爆气球" class="headerlink" title="2.12 452-用最少数量的箭引爆气球"></a>2.12 452-用最少数量的箭引爆气球</h2><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/description/">452</a><br><img src="/img/e.37.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMinArrowShots</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points.<span class="built_in">size</span>() == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = <span class="number">1</span>; <span class="comment">// points 不为空至少需要一支箭</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; points.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">0</span>] &gt; points[i - <span class="number">1</span>][<span class="number">1</span>])   <span class="comment">// 气球i和气球i-1不挨着，注意这里不是&gt;=</span></span><br><span class="line">                result++; <span class="comment">// 需要一支箭</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// 气球i和气球i-1挨着</span></span><br><span class="line">                points[i][<span class="number">1</span>] = <span class="built_in">min</span>(points[i - <span class="number">1</span>][<span class="number">1</span>], points[i][<span class="number">1</span>]); <span class="comment">// 更新重叠气球最小右边界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-13-435-无重叠区间"><a href="#2-13-435-无重叠区间" class="headerlink" title="2.13 435-无重叠区间"></a>2.13 435-无重叠区间</h2><p><a href="https://leetcode.cn/problems/non-overlapping-intervals/">435</a></p><p><img src="/img/e.38.png" alt="在这里插入图片描述"></p><blockquote><p>用引爆气球的方式可以通过</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 按照区间右边界排序</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span> <span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]; <span class="comment">// 右边界排序 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.<span class="built_in">size</span>() == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = <span class="number">1</span>; <span class="comment">// points 不为空至少需要一支箭</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; intervals.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= intervals[i - <span class="number">1</span>][<span class="number">1</span>]) </span><br><span class="line">                result++; <span class="comment">// 需要一支箭</span></span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// 气球i和气球i-1挨着</span></span><br><span class="line">                intervals[i][<span class="number">1</span>] = <span class="built_in">min</span>(intervals[i - <span class="number">1</span>][<span class="number">1</span>], intervals[i][<span class="number">1</span>]); <span class="comment">// 更新重叠气球最小右边界</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intervals.<span class="built_in">size</span>() - result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>另外</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span> <span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>]; <span class="comment">// 改为左边界排序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.<span class="built_in">size</span>() == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 注意这里从0开始，因为是记录重叠区间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; intervals.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt; intervals[i - <span class="number">1</span>][<span class="number">1</span>]) </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="comment">//重叠情况</span></span><br><span class="line">                intervals[i][<span class="number">1</span>] = <span class="built_in">min</span>(intervals[i - <span class="number">1</span>][<span class="number">1</span>], intervals[i][<span class="number">1</span>]);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-14-763-划分字母区间"><a href="#2-14-763-划分字母区间" class="headerlink" title="2.14 763-划分字母区间"></a>2.14 763-划分字母区间</h2><p><a href="https://leetcode.cn/problems/partition-labels/description/">763</a></p><p><img src="/img/e.39.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">27</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// i为字符，hash[i]为字符出现的最后位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; S.<span class="built_in">size</span>(); i++)  <span class="comment">// 统计每一个字符最后出现的位置</span></span><br><span class="line">            hash[S[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; S.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            right = <span class="built_in">max</span>(right, hash[S[i] - <span class="string">&#x27;a&#x27;</span>]); <span class="comment">// 找到字符出现的最远边界</span></span><br><span class="line">            <span class="keyword">if</span> (i == right) </span><br><span class="line">            &#123;</span><br><span class="line">                result.<span class="built_in">push_back</span>(right - left + <span class="number">1</span>);</span><br><span class="line">                left = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-15-56-合并区间"><a href="#2-15-56-合并区间" class="headerlink" title="2.15 56-合并区间"></a>2.15 56-合并区间</h2><p><a href="https://leetcode.cn/problems/merge-intervals/description/">56</a></p><p><img src="/img/e.40.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">if</span> (intervals.<span class="built_in">size</span>() == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> result; <span class="comment">// 区间集合为空直接返回</span></span><br><span class="line">        <span class="comment">// 排序的参数使用了lambda表达式</span></span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)&#123;<span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个区间就可以放进结果集里，后面如果重叠，在result上直接合并</span></span><br><span class="line">        result.<span class="built_in">push_back</span>(intervals[<span class="number">0</span>]); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; intervals.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.<span class="built_in">back</span>()[<span class="number">1</span>] &gt;= intervals[i][<span class="number">0</span>]) </span><br><span class="line">            <span class="comment">// 发现重叠区间</span></span><br><span class="line">            <span class="comment">// 合并区间，只更新右边界就好，因为result.back()的左边界一定是最小值，因为我们按照左边界排序的</span></span><br><span class="line">                result.<span class="built_in">back</span>()[<span class="number">1</span>] = <span class="built_in">max</span>(result.<span class="built_in">back</span>()[<span class="number">1</span>], intervals[i][<span class="number">1</span>]); </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                result.<span class="built_in">push_back</span>(intervals[i]); <span class="comment">// 区间不重叠 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-16-738-单调递增的数字"><a href="#2-16-738-单调递增的数字" class="headerlink" title="2.16 738-单调递增的数字"></a>2.16 738-单调递增的数字</h2><p><a href="https://leetcode.cn/problems/monotone-increasing-digits/description/">738</a></p><p><img src="/img/e.41.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        string strNum = <span class="built_in">to_string</span>(N);</span><br><span class="line">        <span class="comment">// flag用来标记赋值9从哪里开始</span></span><br><span class="line">        <span class="comment">// 设置为这个默认值，为了防止第二个for循环在flag没有被赋值的情况下执行</span></span><br><span class="line">        <span class="type">int</span> flag = strNum.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = strNum.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strNum[i - <span class="number">1</span>] &gt; strNum[i] ) </span><br><span class="line">            &#123;</span><br><span class="line">                flag = i;</span><br><span class="line">                strNum[i - <span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = flag; i &lt; strNum.<span class="built_in">size</span>(); i++)</span><br><span class="line">            strNum[i] = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stoi</span>(strNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-17-968-监控二叉树"><a href="#2-17-968-监控二叉树" class="headerlink" title="2.17* 968-监控二叉树"></a>2.17* 968-监控二叉树</h2><p><a href="https://leetcode.cn/problems/binary-tree-cameras/description/">968</a></p><p><img src="/img/e.42.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">traversal</span><span class="params">(TreeNode* cur)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 空节点，该节点有覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">traversal</span>(cur-&gt;left);    <span class="comment">// 左</span></span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">traversal</span>(cur-&gt;right);  <span class="comment">// 右</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况1</span></span><br><span class="line">        <span class="comment">// 左右节点都有覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">2</span> &amp;&amp; right == <span class="number">2</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况2</span></span><br><span class="line">        <span class="comment">// left == 0 &amp;&amp; right == 0 左右节点无覆盖</span></span><br><span class="line">        <span class="comment">// left == 1 &amp;&amp; right == 0 左节点有摄像头，右节点无覆盖</span></span><br><span class="line">        <span class="comment">// left == 0 &amp;&amp; right == 1 左节点有无覆盖，右节点摄像头</span></span><br><span class="line">        <span class="comment">// left == 0 &amp;&amp; right == 2 左节点无覆盖，右节点覆盖</span></span><br><span class="line">        <span class="comment">// left == 2 &amp;&amp; right == 0 左节点覆盖，右节点无覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> || right == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            result++;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况3</span></span><br><span class="line">        <span class="comment">// left == 1 &amp;&amp; right == 2 左节点有摄像头，右节点有覆盖</span></span><br><span class="line">        <span class="comment">// left == 2 &amp;&amp; right == 1 左节点有覆盖，右节点有摄像头</span></span><br><span class="line">        <span class="comment">// left == 1 &amp;&amp; right == 1 左右节点都有摄像头</span></span><br><span class="line">        <span class="comment">// 其他情况前段代码均已覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">1</span> || right == <span class="number">1</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以上代码我没有使用else，主要是为了把各个分支条件展现出来，这样代码有助于读者理解</span></span><br><span class="line">        <span class="comment">// 这个 return -1 逻辑不会走到这里。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCameraCover</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 情况4</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">traversal</span>(root) == <span class="number">0</span>)  <span class="comment">// root 无覆盖</span></span><br><span class="line">            result++;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-回溯算法&quot;&gt;&lt;a href=&quot;#1-回溯算法&quot; class=&quot;headerlink&quot; title=&quot;1.回溯算法&quot;&gt;&lt;/a&gt;1.回溯算法&lt;/h1&gt;&lt;h2 id=&quot;1-1-77-组合&quot;&gt;&lt;a href=&quot;#1-1-77-组合&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="代码随想录" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
    <category term="贪心算法" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>视图,存储过程,触发器</title>
    <link href="http://example.com/2023/10/22/%E8%A7%86%E5%9B%BE-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B-%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://example.com/2023/10/22/%E8%A7%86%E5%9B%BE-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B-%E8%A7%A6%E5%8F%91%E5%99%A8/</id>
    <published>2023-10-22T01:56:06.000Z</published>
    <updated>2023-10-22T06:32:05.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-视图"><a href="#1-视图" class="headerlink" title="1. 视图"></a>1. 视图</h1><p>视图（View）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。<br>通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上</p><p>作用:</p><ul><li>简单<br>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。</li><li>安全<br>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</li><li>数据独立<br>视图可帮助用户屏蔽真实表结构变化带来的影响</li></ul><h2 id="1-1-视图的基本操作"><a href="#1-1-视图的基本操作" class="headerlink" title="1.1 视图的基本操作"></a>1.1 视图的基本操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] <span class="keyword">view</span> 视图名称[(列名列表)] <span class="keyword">as</span> <span class="keyword">select</span>语句 [<span class="keyword">with</span> [<span class="keyword">cascaded</span> <span class="operator">|</span> <span class="keyword">local</span>] <span class="keyword">check</span> option];</span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名称;  #查看创建视图语句 :</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 视图名称...;  #查看视图数据 : </span><br><span class="line"></span><br><span class="line">#修改(两种方案)</span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] <span class="keyword">view</span> 视图名称[(列名列表)] <span class="keyword">as</span> <span class="keyword">select</span>语句 [<span class="keyword">with</span> [<span class="keyword">cascaded</span> <span class="operator">|</span> <span class="keyword">local</span>] <span class="keyword">check</span> option];</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名称[(列名列表)] <span class="keyword">as</span> <span class="keyword">select</span>语句 [<span class="keyword">with</span> [<span class="keyword">cascaded</span> <span class="operator">|</span> <span class="keyword">local</span>] <span class="keyword">check</span> option];</span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> [if <span class="keyword">exists</span>] 视图名称 [,视图名称]..</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#创建视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_v_1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">#查询视图</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> stu_v_1;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_v_1;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_v_1 <span class="keyword">where</span> id<span class="operator">&lt;</span><span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line">#修改视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> stu_v_1 <span class="keyword">as</span> <span class="keyword">select</span> id,name,num <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> stu_v_1 <span class="keyword">as</span> <span class="keyword">select</span> id,name,num <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">#删除视图</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> if <span class="keyword">exists</span> stu_v_1;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-视图的检查选项"><a href="#1-2-视图的检查选项" class="headerlink" title="1.2 视图的检查选项"></a>1.2 视图的检查选项</h2><p>当使用<code>with check option</code>子句创建视图时，MySOL会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的定义。<br>MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项：<br><code>cascaded</code>和<code>local</code>，<code>默认值为CASCADED</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">20</span> <span class="keyword">with</span> <span class="keyword">cascaded</span> <span class="keyword">check</span> option;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v1 <span class="keyword">as</span> <span class="keyword">select</span> id,name <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">20</span> <span class="keyword">with</span> <span class="keyword">local</span> <span class="keyword">check</span> option;</span><br></pre></td></tr></table></figure><blockquote><p>cascaded 的有向上传递性,即a2基于a1创建,a1没有check option ,a2 有, 那么a1也会变得拥有这个属性<br>local 并没有<br>检查的时候都会递归检查是否有check option并服从条件</p></blockquote><hr><h2 id="1-3-视图的更新"><a href="#1-3-视图的更新" class="headerlink" title="1.3 视图的更新"></a>1.3 视图的更新</h2><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：</p><ol><li><code>聚合函数或窗口函数</code> : SUM() 、MIN() 、MAX()、 COUNT() 等</li><li>distinct</li><li>group by</li><li>having</li><li>union或者union all</li></ol><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#创建视图，使用聚合函数</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> stu_v_count <span class="keyword">as</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_v_count <span class="keyword">vaLues</span>(<span class="number">10</span>); #报错</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>为了保证数据库表的安全性，开发人员在操作tb_user表时，只能看到的用户的基本字段，屏蔽手机号邮箱两个字段</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> tb_user_view <span class="keyword">as</span> <span class="keyword">select</span> id,name,profession,age,gender,status,createtime <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> tb_user_view;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>查询每个学生所选修的课程（三张表联查），这个功能在很多的业务中都有使用到，为了简化操作，定义一个视图。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> tb<span class="operator">-</span>stu_course_view <span class="keyword">as</span> <span class="keyword">select</span> S.name stu_name,S.no,c.name cou_name <span class="keyword">from</span> student S,student_course sc,course c <span class="keyword">where</span> S.id <span class="operator">=</span> Sc.studentid <span class="keyword">and</span> sc.courseid <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><hr><h1 id="2-存储过程"><a href="#2-存储过程" class="headerlink" title="2. 存储过程"></a>2. 存储过程</h1><p>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的.<br>存储过程思想上很简单  就是数据库SQL语言层面的代码封装与重用。</p><p>特点:</p><ul><li>封装,复用</li><li>可以接受参数,也可以返回数据</li><li>减少网络交互,效率提升</li></ul><h2 id="2-1-存储过程的基本语法"><a href="#2-1-存储过程的基本语法" class="headerlink" title="2.1 存储过程的基本语法"></a>2.1 存储过程的基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程的名称([参数列表])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">--SQL语句</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">call</span> 存储过程名称([参数]);</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_scheme.routines <span class="keyword">where</span> routine_scheme <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span>; #查询指定数据库的存储过程及状态信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称; #查询某个存储过程的定义</span><br><span class="line">#eg</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema <span class="operator">=</span> <span class="string">&#x27;9tse&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> [if <span class="keyword">exists</span>] 存储过程的名称;</span><br></pre></td></tr></table></figure><blockquote><p>如果在命令行中执行创建存储过程的SQL时,需要关键字<code>delimiter</code> 指定SQL语句的结束符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">end</span>$$;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><h3 id="2-2-1-系统变量"><a href="#2-2-1-系统变量" class="headerlink" title="2.2.1 系统变量"></a>2.2.1 系统变量</h3><blockquote><p>系统变量是MySQL服务器提供的,不是用户定义的,属于服务器层面,分为全局变量(<code>global</code>),会话变量(<code>session</code>)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查看系统变量</span><br><span class="line"><span class="keyword">show</span> [session <span class="operator">|</span> <span class="keyword">global</span>] variables; <span class="comment">--查看所有系统变量</span></span><br><span class="line"><span class="keyword">show</span> [session <span class="operator">|</span> <span class="keyword">global</span>] variables <span class="keyword">like</span> <span class="string">&#x27;....&#x27;</span>;<span class="comment">--可以通过like模糊匹配方式查找变量</span></span><br><span class="line"><span class="keyword">select</span> @@[session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名;<span class="comment">--查看指定变量的值</span></span><br><span class="line">#设置系统变量</span><br><span class="line"><span class="keyword">set</span> [session <span class="operator">|</span> <span class="keyword">global</span>] 系统变量名 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">set</span> @@[session <span class="operator">|</span> <span class="keyword">global</span>]系统变量名 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure><p>ps</p><ul><li>如果没有指定session&#x2F;global,<code>默认是session</code>,会话变量</li><li>MySQL服务器重新启动之后,所设置的全局参数会失效,要想不失校,可以在 <code>/etc/my.cnf</code> 中配置</li></ul><hr><h3 id="2-2-2-用户定义的变量"><a href="#2-2-2-用户定义的变量" class="headerlink" title="2.2.2 用户定义的变量"></a>2.2.2 用户定义的变量</h3><p>用户定义变量是用户根据需要自己定义的变量，<code>用户变量不用提前声明</code>，在用的时候直接用<code>@变量名</code> 使用就可以。其<code>作用域为当前连接</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#赋值</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> <span class="operator">=</span> expr;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span> :<span class="operator">=</span> expr;</span><br><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">into</span> <span class="variable">@var_name</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">#使用</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@var_name</span>;</span><br></pre></td></tr></table></figure><p>ps</p><ul><li>用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL</li><li>推荐使用 :&#x3D; 避免和&#x3D;(判相等)认混</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@mygender</span> :<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@mycolor</span> :<span class="operator">=</span> <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> <span class="variable">@mycount</span> <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-3-局部变量"><a href="#2-2-3-局部变量" class="headerlink" title="2.2.3 局部变量"></a>2.2.3 局部变量</h3><p>局部变量是根据<code>需要定义的在局部生效的变量</code>，访问之前，需要<code>DECLARE</code>声明。可用作存储过程内的局部变量和输入参数，<code>局部变量的范围是在其内声明的begin,end块</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#声明</span><br><span class="line"><span class="keyword">declare</span> 变量名 变量类型 [<span class="keyword">default</span> ...];</span><br><span class="line">变量类型就是数据库字段类型：<span class="type">INT</span>、<span class="type">BIGINT</span>、<span class="type">CHAR</span>、 <span class="type">VARCHAR</span>、 <span class="type">DATE</span>、 <span class="type">TIME</span>等。</span><br><span class="line"></span><br><span class="line">#赋值</span><br><span class="line"><span class="keyword">SET</span> 变量名<span class="operator">=</span>值；</span><br><span class="line"><span class="keyword">SET</span> 变量名：<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">INTO</span> 变量名 <span class="keyword">FROM</span> 表名...;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-关键字"><a href="#2-3-关键字" class="headerlink" title="2.3 关键字"></a>2.3 关键字</h2><p><strong>存储过程的参数</strong></p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>in(默认)</td><td>该类参数作为输入,也就是需要调用时传入值</td></tr><tr><td>out</td><td>该类参数作为输出,也就是该参数可以作为返回值</td></tr><tr><td>inout</td><td>既可以作为输入参数,也可以作为输出参数</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名称([ <span class="keyword">in</span><span class="operator">/</span><span class="keyword">out</span><span class="operator">/</span><span class="keyword">inout</span> 参数名 参数类型])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-判断"><a href="#2-3-1-判断" class="headerlink" title="2.3.1 判断"></a>2.3.1 判断</h3><p><strong>if</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line">if 条件<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">...</span><br><span class="line">elseif 条件<span class="number">2</span> <span class="keyword">then</span> <span class="comment">--可选</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span><span class="comment">--可选</span></span><br><span class="line">... </span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure><hr><p><strong>case</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> case_value</span><br><span class="line">        <span class="keyword">when</span> search_condition1 <span class="keyword">then</span> statement_List1</span><br><span class="line">        [<span class="keyword">when</span> search_condition2 <span class="keyword">then</span> statement_list2] ..</span><br><span class="line">        [<span class="keyword">else</span> statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p6(<span class="keyword">in</span> <span class="keyword">month</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line">      <span class="keyword">case</span></span><br><span class="line">            <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">               <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第1季度&#x27;</span>;</span><br><span class="line">            <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">               <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第2季度&#x27;</span>;</span><br><span class="line">            <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">and</span> month1<span class="operator">&lt;=</span><span class="number">9</span> <span class="keyword">then</span></span><br><span class="line">               <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第3季度&#x27;</span>;</span><br><span class="line">            <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span> <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line">               <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;第4季度&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;非法参数&#x27;</span>;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">case</span></span><br><span class="line">      <span class="keyword">select</span> concat(<span class="string">&#x27;您输入的月份为：&#x27;</span>,<span class="keyword">month</span>,<span class="string">&#x27;所属的季度为：&#x27;</span>,resut);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-2-循环"><a href="#2-3-2-循环" class="headerlink" title="2.3.2 循环"></a>2.3.2 循环</h3><p><strong>while</strong><br>while循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。<br>具体语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#先判定条件，如果条件为<span class="literal">true</span>，则执行逻辑，否则，不执行逻辑</span><br><span class="line">while 条件 do</span><br><span class="line">     <span class="keyword">SQL</span>逻辑.</span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">while n<span class="operator">&gt;</span><span class="number">0</span> do</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span>n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><hr><p>   <strong>repeat</strong><br>repeat是有条件的循环控制语句，当满足条件的时候退出循环。具体语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span><br><span class="line">repeat</span><br><span class="line">      SQL..</span><br><span class="line">      until 条件</span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">repeat</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total<span class="operator">+</span>n;</span><br><span class="line"><span class="keyword">set</span> n:<span class="operator">=</span> n<span class="number">-1</span>;</span><br><span class="line">until n<span class="operator">&lt;=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> repeat;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><hr><p>   <strong>loop</strong><br>LOOP实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。<br>LOOP可以配合以下两个语句使用：<br>   <code>LEAVE</code>：配合循环使用，退出循环。<br>    <code>TERATE</code>：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] loop</span><br><span class="line">      <span class="keyword">SQL</span>逻辑...</span><br><span class="line"><span class="keyword">end</span> loop [end_label];</span><br><span class="line"></span><br><span class="line">leave label   <span class="comment">--退出指定标记的循环体</span></span><br><span class="line">iterate label <span class="comment">--直接进入下一次循环</span></span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">sum: loop</span><br><span class="line">if n<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">leave sum;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total<span class="operator">+</span>n;</span><br><span class="line"><span class="keyword">set</span> n:<span class="operator">=</span>n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span> loop sum;</span><br><span class="line"><span class="keyword">select</span>  total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p(<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p2(<span class="keyword">in</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">sum:loop</span><br><span class="line">if n<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">leave sum;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line">if n<span class="operator">%</span><span class="number">2</span> <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n<span class="number">-1</span>;</span><br><span class="line">iterate sum;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span> loop sum;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-游标"><a href="#2-4-游标" class="headerlink" title="2.4 游标"></a>2.4 游标</h2><p>游标（CURSOR）是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。<br>游标的使用包括<code>游标的声明、OPEN、FETCH和CLOSE</code>，其语法分别如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#声明游标</span><br><span class="line"><span class="keyword">declare</span> 游标名称 <span class="keyword">cursor</span> <span class="keyword">for</span> 查询语句;</span><br><span class="line"> </span><br><span class="line">#打开游标</span><br><span class="line"><span class="keyword">open</span> 游标名称;</span><br><span class="line"> </span><br><span class="line">#获取游标记录</span><br><span class="line"><span class="keyword">fetch</span> 游标名称 <span class="keyword">into</span> 变量[,变量];</span><br><span class="line"> </span><br><span class="line">#关闭游标</span><br><span class="line"><span class="keyword">close</span> 游标名称;</span><br></pre></td></tr></table></figure><p><strong>条件处理程序</strong><br>可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> hander_action handler <span class="keyword">for</span> condition_value [,condition_value] ... statement;</span><br><span class="line"></span><br><span class="line">handler_action</span><br><span class="line">continue:继续执行当前程序</span><br><span class="line">exit : 种植执行当前程序</span><br><span class="line">condition_value</span><br><span class="line"><span class="keyword">sqlstate</span> sqlstate_value : 状态码,如<span class="number">02000</span></span><br><span class="line"><span class="keyword">sqlwarning</span> : 所有以<span class="number">01</span>开头的<span class="keyword">sqlstate</span>代码的简写</span><br><span class="line"><span class="keyword">not</span> found : 所有以<span class="number">02</span>开头的<span class="keyword">sqlstate</span>代码的简写</span><br><span class="line"><span class="keyword">sqlexception</span> : 所有没有被<span class="keyword">sqlwarning</span> 或 notfound 捕获的<span class="keyword">sqlstate</span>代码的简写</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p(<span class="keyword">in</span> uage <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> uname <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> upro <span class="type">varchar</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">declare</span> u_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name,profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> age <span class="operator">&lt;=</span> uage;</span><br><span class="line"><span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">close</span> u_cursor;</span><br><span class="line">#<span class="keyword">declare</span> exit handler <span class="keyword">for</span> <span class="keyword">not</span> found <span class="keyword">close</span> u_cursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user_pro;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tb_user_pro(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">profession <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> u_cursor;</span><br><span class="line">while <span class="literal">true</span> do</span><br><span class="line"><span class="keyword">fetch</span> u_cursor <span class="keyword">into</span> uname,upro;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_pro <span class="keyword">values</span>(<span class="keyword">null</span>,uname,upro);</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">close</span> u_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="2-5-存储函数"><a href="#2-5-存储函数" class="headerlink" title="2.5 存储函数"></a>2.5 存储函数</h2><p>存储函数在实际中应用不广泛,可以被存储过程代替<br><code>其参数只能时in类型</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 存储函数名称([参数列表])</span><br><span class="line"><span class="keyword">return</span> type [characteristic...]</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">return</span> ...;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">characteristic说明:</span><br><span class="line"><span class="keyword">deterministic</span> :相同的输入参数总是产生相同的结果</span><br><span class="line"><span class="keyword">no</span> <span class="keyword">sql</span> : 不包含<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">reads</span> <span class="keyword">sql</span> data : 包含读取数据的语句,但不包含写入数据的语句</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> fun(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="type">int</span> <span class="keyword">deterministic</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">while n<span class="operator">&gt;</span><span class="number">0</span> do</span><br><span class="line"><span class="keyword">set</span> total :<span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> fun(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="3-触发器"><a href="#3-触发器" class="headerlink" title="3. 触发器"></a>3. 触发器</h1><p>触发器是与表有关的数据库对象，指在<code>insert/update/delete</code>之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。<br>使用别名<code>old</code>和<code>new</code>来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。<br>现在触发器还<code>只支持行级触发，不支持语句级触发。</code></p><table><thead><tr><th>触发器类型</th><th>new和old</th></tr></thead><tbody><tr><td>insert 型触发器</td><td>new表示将要或已经新增的数据</td></tr><tr><td>update 型触发器</td><td>old表示修改之前的数据,new表示将要或已经修改后的数据</td></tr><tr><td>delete 型触发器</td><td>. old表示将要或者已经删除的数据</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line"><span class="keyword">create</span> tigger trigger_name</span><br><span class="line">before<span class="operator">/</span>after <span class="keyword">insert</span><span class="operator">/</span><span class="keyword">update</span><span class="operator">/</span><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> tb_name <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> <span class="comment">--行级触发器</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">trigger_stmt;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line"><span class="keyword">show</span> triggers;</span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name; <span class="comment">--如果没有指定schema_name 默认为当前数据库</span></span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#需求：通过发器记录<span class="keyword">user</span>表的数据变更日志（user_ogs），包含培加，修改，除；</span><br><span class="line">#准备工作：口志表userlogs</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_logs(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>） <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    operation <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment<span class="string">&#x27;操作类型，insert/update/delete&#x27;</span>,</span><br><span class="line">    operate_time datetime <span class="keyword">not</span> nul comment<span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">    operate_id <span class="type">int</span>(<span class="number">11</span>） <span class="keyword">not</span> <span class="keyword">null</span> comment<span class="string">&#x27;操作的ID&#x27;</span>,</span><br><span class="line">    operate_params <span class="type">varchar</span>(<span class="number">500</span>） comment<span class="string">&#x27;操作参数&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tb_user_insert_trigger</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> tb_user <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_logs(id,operation,operate_time,operate_id,operate_params)<span class="keyword">values</span></span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;insert&#x27;</span>,now(),new.id,concat(<span class="string">&#x27;insert msg : &#x27;</span> ,new.id,.....)</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-视图&quot;&gt;&lt;a href=&quot;#1-视图&quot; class=&quot;headerlink&quot; title=&quot;1. 视图&quot;&gt;&lt;/a&gt;1. 视图&lt;/h1&gt;&lt;p&gt;视图（View）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>存储引擎,索引,SQL优化</title>
    <link href="http://example.com/2023/10/22/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-%E7%B4%A2%E5%BC%95-SQL%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2023/10/22/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-%E7%B4%A2%E5%BC%95-SQL%E4%BC%98%E5%8C%96/</id>
    <published>2023-10-22T01:55:55.000Z</published>
    <updated>2023-10-22T06:31:05.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1. 存储引擎"></a>1. 存储引擎</h1><h2 id="1-1-MySQL体系结构"><a href="#1-1-MySQL体系结构" class="headerlink" title="1.1 MySQL体系结构"></a>1.1 MySQL体系结构</h2><p><img src="/img/c.6.png" alt="在这里插入图片描述"></p><blockquote><ul><li>连接层<br>最上层是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、及相关的安全方案。服务器也会为安全接入的每个客户<br>端验证它所具有的操作权限。</li><li>服务层<br>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。</li><li>引擎层<br>存储引擎真正的负责了MSQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我<br>们可以根据自己的需要，采选取合适的存储引擎。</li><li>存储层<br>主要是将数据存储在文件系统之上，并完成与存储引的交互</li></ul></blockquote><hr><h2 id="1-2-存储引擎简述"><a href="#1-2-存储引擎简述" class="headerlink" title="1.2 存储引擎简述"></a>1.2 存储引擎简述</h2><blockquote><p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> account; #查询建表语句,默认为innoDB</span><br><span class="line"><span class="keyword">show</span> engines; #查询当前数据库支持的搜索引擎</span><br><span class="line"></span><br><span class="line">#创建表时,指定存储引擎</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段<span class="number">1</span>,字段<span class="number">1</span>类型[comment 注释]</span><br><span class="line">) engine <span class="operator">=</span> innodb [comment 注释];</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-存储引擎的特点"><a href="#1-3-存储引擎的特点" class="headerlink" title="1.3 存储引擎的特点"></a>1.3 存储引擎的特点</h2><h3 id="1-3-1-innoDB"><a href="#1-3-1-innoDB" class="headerlink" title="1.3.1 innoDB"></a>1.3.1 innoDB</h3><ul><li>介绍<br>nnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL5.5之后，InnoDB是默认的MySOL存储引擎。</li><li>特点<br>DML操作遵循ACID模型，支持<code>事务</code>；<br><code>行级锁</code>，提高并发访问性能<br>支持<code>外键</code>FOREIGNKEY约束，保证数据的完整性和正确性</li><li>文件<br>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。参数：innodb_file_per_table</li></ul><p><img src="/img/c.7.png" alt="在这里插入图片描述"></p><hr><h3 id="1-3-2-MyISAM"><a href="#1-3-2-MyISAM" class="headerlink" title="1.3.2 MyISAM"></a>1.3.2 MyISAM</h3><ul><li>介绍<br> MyISAM是MySQL早期的默认存储引擎。</li><li>特点<br> 不支持事务，不支持外键<br> 支持表锁，不支持行锁<br> 访问速度快</li><li>文件<br>xxx.sdi：存储表结构信息<br>XXX.MYD：存储数据<br>XXX.MYI：存储索引</li></ul><hr><h3 id="1-3-3-Memory"><a href="#1-3-3-Memory" class="headerlink" title="1.3.3 Memory"></a>1.3.3 Memory</h3><ul><li>介绍<br>Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。</li><li>特点<br>内存存放<br>hash索引（默认）</li><li>文件<br>xxx.sdi：存储表结构信息</li></ul><hr><h3 id="1-3-4-存储引擎的选择"><a href="#1-3-4-存储引擎的选择" class="headerlink" title="1.3.4 存储引擎的选择"></a>1.3.4 存储引擎的选择</h3><ul><li><code>InnoDB</code>：是Mysl的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的</li><li>MEMORY：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>不支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><hr><h1 id="2-Linux下的MySQL"><a href="#2-Linux下的MySQL" class="headerlink" title="2. Linux下的MySQL"></a>2. Linux下的MySQL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先将MySQL导入至yum</span></span><br><span class="line">rpm -ivh https://dev.mysql.com/get/mysql80-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#MySQL下载至yum</span></span><br><span class="line">yum info mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过yum下载MySQL</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动MySQL</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到默认MySQL密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录MySQL</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#临时更改严格型密码</span></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;符合Linux检查的密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#改变Linux密码校验文件</span></span><br><span class="line"><span class="built_in">set</span> global validate_password.policy = 0; <span class="comment">#设置检查格式为0(默认1)</span></span><br><span class="line"><span class="built_in">set</span> global validate_password.length = 4; <span class="comment">#设置密码最短4个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置平常使用的密码</span></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;9tse&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建全域用户</span></span><br><span class="line">create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;9tse&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#授予该用户所有权限</span></span><br><span class="line">grant all on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#再登录即可</span></span><br></pre></td></tr></table></figure><p>如果数据库连接不到Linux中,则只需开放Linux3306端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开放端口</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新</span></span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查是否生效</span></span><br><span class="line">sudo firewall-cmd --list-all</span><br></pre></td></tr></table></figure><hr><h1 id="3-索引"><a href="#3-索引" class="headerlink" title="3. 索引"></a>3. 索引</h1><h2 id="3-1-索引概述"><a href="#3-1-索引概述" class="headerlink" title="3.1 索引概述"></a>3.1 索引概述</h2><blockquote><p>索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，  这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是案引</p></blockquote><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库的IO成本</td><td>索引列也是要占用空间的</td></tr><tr><td>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</td><td>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率降低。</td></tr></tbody></table><hr><h2 id="3-2-索引结构"><a href="#3-2-索引结构" class="headerlink" title="3.2 索引结构"></a>3.2 索引结构</h2><blockquote><p>MySQL的索引是在存储引擎层实现的,不同的存储引擎有不同的结构</p></blockquote><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>最常见的索引类型，大部分引擎都支持B+树索引。</td></tr><tr><td>Hash索引</td><td>数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询。</td></tr><tr><td>R-tree（空间索引）</td><td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少。</td></tr><tr><td>Full-text（全文索引）</td><td>是一种通过建立倒排索引快速匹配文档的方式。类似于Lucene、Solr、Elasticsearch。</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p><code>我们平常所说的索引,如果没有特别指明,都是指的B+树结构组织的索引</code></p><p>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能<br><img src="/img/c.8.png" alt="在这里插入图片描述"></p><p>Hash</p><ul><li>Hash索引特点<ol><li>Hash索引只能用于对等比较（&#x3D;，in），不支持范围查询（between，&gt;，&lt;，…)</li><li>无法利用素引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于B+tree索引</li></ol></li><li>存储引擎支持<br>在MySQL中，支持hash素引的是Memory引擎，而InnoDB中具有自适应hash功能，hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的。</li></ul><hr><h2 id="3-3-索引分类"><a href="#3-3-索引分类" class="headerlink" title="3.3 索引分类"></a>3.3 索引分类</h2><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>primary</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>unique</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td>-</td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词</td><td>可以有多个</td><td>fulltext</td></tr></tbody></table><p>InnoDB存储引擎中,根据索引的存储形式,又可以分为以下两种</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>聚集索引选取规则</p><ul><li>如果存在主键，主键引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一（unique）引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li></ul><blockquote><p>思考,innoDB主键索引的B+tree高度为多高呢？</p></blockquote><p>假设：<br>    一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB的指针占用6个字节的空间，主键即使为bigint，占用字节数为8<br>高度为2：<br>     n * 8+（n+1）* 6 &#x3D; 16 * 1024，算出n约为1170<br>     1171*16&#x3D;18736<br>高度为3<br>       1171 * 1171 * 16 &#x3D; 21939856</p><hr><h2 id="3-4-索引语法"><a href="#3-4-索引语法" class="headerlink" title="3.4 索引语法"></a>3.4 索引语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#创建索引</span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span> <span class="operator">|</span> fulltext] index index_name <span class="keyword">on</span> table_name(index_col_name,...);</span><br><span class="line"></span><br><span class="line">#查看索引</span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> table_name;</span><br><span class="line"></span><br><span class="line">#删除索引</span><br><span class="line"><span class="keyword">drop</span> index index_name <span class="keyword">on</span> <span class="keyword">table</span> name;</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>  name字段为姓名字段，该字段的值可能会重复，为该字段创建索引。</span><br><span class="line"><span class="keyword">create</span> index idx_user_name <span class="keyword">on</span> tb_user(name);</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>  phone手机号字段的值，是非空，且唯一的，为该字段创建唯一索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_user_phone <span class="keyword">on</span> tb_user(phone);</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>  profession、age、status创建联合索引</span><br><span class="line"><span class="keyword">create</span> index idx_user_pro_age_sta <span class="keyword">on</span> tb_user(profession,age,status);</span><br><span class="line"></span><br><span class="line">#<span class="number">4.</span>  为email建立合适的引来提升查询效率。</span><br><span class="line"><span class="keyword">create</span> index idx_user_email <span class="keyword">on</span> tb_user(email);</span><br></pre></td></tr></table></figure><hr><h2 id="3-5-索引性能分析"><a href="#3-5-索引性能分析" class="headerlink" title="3.5 索引性能分析"></a>3.5 索引性能分析</h2><p><strong>SQL执行频率</strong></p><blockquote><p>MySQL客户端连接成功后，通过<code>show[session | global] status</code>命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、 SELECT的访问频次：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Com_______&#x27;</span>; #七个_</span><br></pre></td></tr></table></figure><hr><p>  <strong>慢查询日志</strong></p><blockquote><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SOL语句的日志<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（<code>/etc/my.cnf</code>）中配置如下信息：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启MySQL慢日志查询开关</span></span><br><span class="line">slow_query_log=1</span><br><span class="line"><span class="comment">#设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span></span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure><p>配置完毕之后，重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息<code>/var/lib/mysql/localhost-slow.log</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看慢查询是否开启</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实时跟踪慢查询日志文件记录的信息</span></span><br><span class="line"><span class="built_in">tail</span> -f localhost-slow.log </span><br></pre></td></tr></table></figure><hr><p>   <strong>profile详情</strong></p><blockquote><p><code>show profiles</code> 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。<br>通过 <code>have_profiling</code> 参数，能够看到当前MySQL是否支持profile操作：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#是否支持profile</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@have_profiling</span>;</span><br><span class="line"></span><br><span class="line">#profiling是否开启</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@profiling</span>;</span><br></pre></td></tr></table></figure><blockquote><p>默认profiling是关闭的，可以通过<code>set</code>语句在session&#x2F;global级别开启profiling</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>执行一系列的业务SOL的操作，然后通过如下指令查看指令的执行耗时</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查看每一条<span class="keyword">SQL</span>的耗时基本情况</span><br><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"></span><br><span class="line">#查看指定queny_id的<span class="keyword">SQL</span>语句各个阶段的耗时情况</span><br><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query query_id;</span><br><span class="line"></span><br><span class="line">#查看指定queryid的<span class="keyword">SQL</span>语句CPU的使用情况</span><br><span class="line"><span class="keyword">show</span> profile cpu <span class="keyword">for</span> query query_id;</span><br></pre></td></tr></table></figure><hr><p> <strong>explain执行计划</strong></p><blockquote><p><code>EXPLAIN或者DESC</code>命令获取MySQL如何执行SELECT语句的信息，包括在SELECT语句执行过程中表如何连接和连接的顺序。语法：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#直接在<span class="keyword">select</span>语句之前加上关键字explain<span class="operator">/</span>des</span><br><span class="line">explain <span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><p>EXPLAIN执行计划各字段含义：</p><ol><li>id<br> select查询的序列号，表示查询中执行select子句或者是操作表的顺序（<code>id相同，执行顺序从上到下；id不同，值越大，越先执行</code>）。</li><li>select_type<br> 表示SELECT的类型，常见的取值有SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION （UNION中的第二个或者后面的查询语句）、SUBQUE（SELECT&#x2F;WHERE之后包含了子查询）等</li><li>type<br>表示连接类型，性能由好到差的连接类型为<code>NULL</code>、system、<code>const</code>、eq_ref、ref、range、index、<code>all</code> </li><li>possible_key<br> 显示可能应用在这张表上的索引，一个或多个。</li><li>Key<br> 实际使用的索引，如果为NULL，则没有使用索引</li><li>Key_Len<br>表示索引中使用的字节数，该值为索引字段最大可能长度，<code>并非实际使用长度</code>，在不损失精确性的前提下，<code>长度越短越好</code>。</li><li>rows<br>MySQL<code>认为</code>必须要执行查询的行数，在innodb引l擎的表中，是一个<code>估计值</code>，可能并不总是准确的</li><li>filtered<br>表示返回结果的行数占需读取行数的百分比，fitered的值<code>越大越好</code>。</li></ol><hr><h2 id="3-6-索引的使用"><a href="#3-6-索引的使用" class="headerlink" title="3.6 索引的使用"></a>3.6 索引的使用</h2><p>  验证索引效率,略知索引的重要性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#在未建立索引之前，执行如下SOL语句，查看SOL的耗时。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku <span class="keyword">where</span> sn <span class="operator">=</span> <span class="string">&#x27;100000003745001&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#针对字段创建索引</span><br><span class="line"><span class="keyword">create</span> index idx_sku_sn <span class="keyword">on</span> tb_sku(sn);</span><br><span class="line"></span><br><span class="line">#然后再次执行相同的<span class="keyword">SQL</span>语句，再次查看<span class="keyword">SQL</span>的耗时。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku <span class="keyword">where</span> sn <span class="operator">=</span> <span class="string">&#x27;100000003745001&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="3-6-1-索引失效"><a href="#3-6-1-索引失效" class="headerlink" title="3.6.1 索引失效"></a>3.6.1 索引失效</h3><p>  <strong>最左前法则</strong></p><blockquote><p>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，<code>索引将部分失效（后面的字段索引失效）</code>。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">3</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>; #以上索引都没有失效</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> age<span class="operator">=</span><span class="number">3</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>; #profession不在,由于最左前缀法,索引失效</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>; #profession,age的索引失效</span><br></pre></td></tr></table></figure><p>   <strong>范围查询</strong><br>联合索引中，出现范围查询（&gt;,&lt;），<code>范围查询右侧的列索引失效</code><br>而 &gt;&#x3D; &lt;&#x3D;就不会</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">##age索引失效</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">##不失效</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profassion<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">&gt;=</span> <span class="number">30</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p>  <strong>索引列运算</strong><br>不要在索引列上进行运算操作，索引将失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> <span class="built_in">substring</span>(phone,<span class="number">10</span>,<span class="number">2</span>) <span class="operator">=</span> <span class="string">&#x27;15&#x27;</span>;</span><br></pre></td></tr></table></figure><p>  <strong>字符串不加引号</strong><br>字符串类型字段使用时，不加引号，索引将失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span> <span class="number">3</span> <span class="keyword">and</span> status<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="number">17799990015</span>;</span><br></pre></td></tr></table></figure><p>   <strong>模糊查询</strong><br>如果仅仅是尾部模糊匹配，索引不会失效。如果是<code>头部模糊匹配，索引失效</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profssion <span class="keyword">like</span> <span class="string">&#x27;软件%&#x27;</span>; #不失效</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="keyword">like</span> <span class="string">&#x27;%工程&#x27;</span>; ##失效</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="keyword">like</span> <span class="string">&#x27;%工%&#x27;</span>; ##失效</span><br></pre></td></tr></table></figure><p>  <strong>or连接的条件</strong><br>用or分割开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> age<span class="operator">=</span><span class="number">23</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone<span class="operator">=</span> <span class="string">&#x27;7799990017&#x27;</span> <span class="keyword">or</span> age<span class="operator">=</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><p>由于age没有索引，所以即使id、phone有索引，索引也会失效。所以需要针对于age也要建立索引。</p><p>  <strong>数据分布影响</strong><br>如果MySOL评估使用索引比全表更慢，则不使用索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">&gt;=</span> <span class="string">&#x27;17799990005&#x27;</span>; #手机号码都<span class="operator">&gt;</span><span class="number">05</span> 使用全表</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">&gt;=</span> <span class="string">&#x27;17799990015&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="3-6-2-索引使用"><a href="#3-6-2-索引使用" class="headerlink" title="3.6.2 索引使用"></a>3.6.2 索引使用</h3><p>  <strong>SQL提示</strong><br>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#use index</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user use index(idx_user_pro）<span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span>;</span><br><span class="line">#ignore index</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user ignore index(idx_user_pro）<span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span>;</span><br><span class="line">#force index</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user force index(idx_user_pro）<span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>覆盖索引</strong><br><code>尽量使用覆盖引</code>（查询使用了索引，并且需要返回的列，在该引中已经全部能够找到），减少select*</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id,profession <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> id,profession,age,status <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> id,profession,age,status,name <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession<span class="operator">=</span><span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;0&#x27;</span>;</span><br></pre></td></tr></table></figure><p>using index condition 查找使用了素引，但是需要<code>回表查询</code>数据<br>using where;using index查找使用了引，但是<code>需要的数据都在引列中能找到</code>，所以不需要回表查询数据</p><p><code>虽然是二级索引中寻找,但并不需要去聚集索引中再寻找</code></p><p>  <strong>前缀索引</strong><br>当字段类型为字符串（varchar，text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的<code>一部分前缀，建立索引</code>，这样可以大大节约索引空间，从而提高索引效率，</p><ul><li>语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_xxxx <span class="keyword">on</span> tale name(<span class="keyword">column</span>(n));</span><br><span class="line"></span><br><span class="line">#eg</span><br><span class="line"><span class="keyword">create</span> index idx_email_5 <span class="keyword">on</span> tb_user(email(<span class="number">5</span>));</span><br></pre></td></tr></table></figure></li><li>前缀长度<br> 可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高<br>  唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> email)<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email,<span class="number">1</span>,<span class="number">5</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><p>  <strong>单列索引与联合索引</strong><br>单列索引：即一个索引只包含单个列。<br>联合案引：即一个引包含了多个列<br><code>如果存在多个查询条件,考虑针对于查询字段建立索引时,建议建立联合索引</code></p><p><strong>素引设计原则</strong></p><ol><li>针对于数据量较大，且查询比较频繁的表建立索引。</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率，</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。<br>当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li></ol><hr><h1 id="4-SQL优化"><a href="#4-SQL优化" class="headerlink" title="4. SQL优化"></a>4. SQL优化</h1><h2 id="4-1-插入数据"><a href="#4-1-插入数据" class="headerlink" title="4.1 插入数据"></a>4.1 插入数据</h2><p> <strong>insert优化</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#批量插入</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;lery&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#手动提交事务</span><br><span class="line">stat transaction; #<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;rom&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;sat&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;perry&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><blockquote><p>当大批量插入数据,使用insert语句插入性能较低,此时可以使用MySQL数据库提供的<code>load</code>插入</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#客户端连接服务器时,加上参数 <span class="comment">--loacl-infile</span></span><br><span class="line">mysql <span class="comment">--local-infile -u root -p  </span></span><br><span class="line"></span><br><span class="line">#设置全局参数 local_infile 为 <span class="number">1</span>,开启从本地加载文件导入数据的开关</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#执行load指令将准备好的数据加载到表结构中</span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="string">&#x27;tb_user&#x27;</span> fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>主键顺序插入效率大于主键乱序</code></p><hr><h2 id="4-2-主键优化"><a href="#4-2-主键优化" class="headerlink" title="4.2 主键优化"></a>4.2 主键优化</h2><p>数据组织方式<br>在innoDB引擎中,表数据都是根据主键顺序组织存放的,这种存储方式的表成为<code>索引组织表</code>(index organized table) <code>IOT</code></p><p><strong>页分裂</strong><br><img src="/img/c.9.png" alt="在这里插入图片描述"></p><p><img src="/img/c.10.png" alt="在这里插入图片描述"></p><p><strong>页合并</strong><br><img src="/img/c.11.png" alt="在这里插入图片描述"></p><p>ps:<br>    <code>merge_threshold</code>: 合并页的阈值,可以自己设置,在创建表或者创建索引时指定</p><p>主键设计原则</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。</li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号。(会导致非顺序)</li><li>业务操作时，避免对主键的修改</li></ul><hr><h2 id="4-3-order-by-优化"><a href="#4-3-order-by-优化" class="headerlink" title="4.3 order by 优化"></a>4.3 order by 优化</h2><ol><li><code>Using filesort</code>通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫FileSort排序</li><li><code>Using index</code>：通过有序索引顺序扫描直接返回有序数据，这种情况即为using index，不需要额外排序，操作效率高。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#以age,phone建立索引</span><br><span class="line">#不符合最左前缀法则</span><br><span class="line">explain <span class="keyword">select</span> id,age,phone <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> phone , age;</span><br><span class="line"></span><br><span class="line">#需要额外的排序,<span class="keyword">using</span> filesort</span><br><span class="line">explain <span class="keyword">select</span> id,age,phone <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>,phone <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#可以通过建立以下索引以使用<span class="keyword">using</span> index</span><br><span class="line"><span class="keyword">create</span> index idx_user_age_pho_ad <span class="keyword">on</span> tb_user(age <span class="keyword">asc</span>,phone <span class="keyword">desc</span>);</span><br></pre></td></tr></table></figure><p>原则</p><ul><li>据排序字段建立合适的索引，多字段排序时，也遵循最左前法则</li><li>尽量使用覆盖引。</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）</li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小sort_buffer_size（默认256K）</li></ul><hr><h2 id="4-4-limit优化"><a href="#4-4-limit优化" class="headerlink" title="4.4 limit优化"></a>4.4 limit优化</h2><p>imit 2000000 ,10，此时需要MySQL排序前20000 10记录，仅仅返回2000000-2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化思路：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过<code>覆盖索引加子查询形式</code>进行优化。</p><hr><h2 id="4-5-count优化"><a href="#4-5-count优化" class="headerlink" title="4.5 count优化"></a>4.5 count优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><ul><li>MyISAM引擎把一个表的总行数存在了磁盘上，因此执行count（*）的时候会直接返回这个数，效率很高</li><li>InnoDB引擎就麻烦了，它执行count（*）的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数</li></ul><p><strong>count的几种用法</strong><br>count是一个聚合函数，对于返回的结果集，一行行地判断，如果count函数的参数不是NULL，累计值就加1，否则不加，最后返回累计值。</p><p>用法：count（*）、count（主键）、count（字段）、count（1）</p><ul><li>count（主键）<br>  InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加（主键不可能为null）</li><li>count（字段）<br>没有not null约束：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加。<br>有not null约束：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加。</li><li>count （1）<br>InnoDB引擎遍历整张表，但<code>不取值</code>。服务层对于返回的每一行，放一个数字“1”进去，直接按行进行累加</li><li>count （*）<br>InnoDB引擎并不会把全部字段取出来，而是专门做了优化，<code>不取值</code>，服务层直接按行进行累加</li></ul><p><code>按照效率排序的话，count（字段）&lt; count（主键id）&lt; count（1）count（*），所以尽量使用count（*）</code></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-存储引擎&quot;&gt;&lt;a href=&quot;#1-存储引擎&quot; class=&quot;headerlink&quot; title=&quot;1. 存储引擎&quot;&gt;&lt;/a&gt;1. 存储引擎&lt;/h1&gt;&lt;h2 id=&quot;1-1-MySQL体系结构&quot;&gt;&lt;a href=&quot;#1-1-MySQL体系结构&quot; class=&quot;</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树篇</title>
    <link href="http://example.com/2023/10/22/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AF%87/"/>
    <id>http://example.com/2023/10/22/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AF%87/</id>
    <published>2023-10-22T01:55:23.000Z</published>
    <updated>2023-10-22T06:28:01.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-二叉树之层序遍历"><a href="#1-二叉树之层序遍历" class="headerlink" title="1. 二叉树之层序遍历"></a>1. 二叉树之层序遍历</h1><h2 id="1-1-144-二叉树的前序遍历"><a href="#1-1-144-二叉树的前序遍历" class="headerlink" title="1.1 144-二叉树的前序遍历"></a>1.1 144-二叉树的前序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/">144</a><br><img src="/img/d.1.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* root,vector&lt;<span class="type">int</span>&gt;&amp; ans)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,ans);</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>迭代难度更大</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(cur) <span class="comment">//第一趟把左列节点放入栈和ans</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode* tmp = st.<span class="built_in">top</span>(); <span class="comment">//对应着左下角的节点</span></span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            cur = tmp-&gt;right; <span class="comment">//开始右</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-94-二叉树的中序遍历"><a href="#1-2-94-二叉树的中序遍历" class="headerlink" title="1.2 94-二叉树的中序遍历"></a>1.2 94-二叉树的中序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94</a><br><img src="/img/d.2.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* root,vector&lt;<span class="type">int</span>&gt;&amp; ans)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,ans);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>迭代法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//ans.push_back(cur-&gt;val); 并不是最左边的数据放在第一个</span></span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode* tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(tmp-&gt;val); </span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            cur = tmp-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-145-二叉树的后序遍历"><a href="#1-3-145-二叉树的后序遍历" class="headerlink" title="1.3 145-二叉树的后序遍历"></a>1.3 145-二叉树的后序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145</a></p><p><img src="/img/d.3.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode*&amp; root,vector&lt;<span class="type">int</span>&gt;&amp; ans)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,ans);</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,ans);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>迭代法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        TreeNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur || !st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(cur);</span><br><span class="line">                cur=cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode* top = s.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span>(!top-&gt;right || top-&gt;right == prev)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(top-&gt;val);</span><br><span class="line">                prev = top;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cur = top-&gt;right; <span class="comment">//当左走完之后这一步可以走到右</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4-102-二叉树的层序遍历"><a href="#1-4-102-二叉树的层序遍历" class="headerlink" title="1.4 102-二叉树的层序遍历"></a>1.4 102-二叉树的层序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102</a></p><p><img src="/img/d.4.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ans,TreeNode* root,<span class="type">int</span> level)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>() &lt;= level) <span class="comment">//ans的层数不够,加层数</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        ans[level].<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">Recursion</span>(ans,root-&gt;left,level+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Recursion</span>(ans,root-&gt;right,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">Recursion</span>(ans,root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-5-107-二叉树的层序遍历II"><a href="#1-5-107-二叉树的层序遍历II" class="headerlink" title="1.5 107-二叉树的层序遍历II"></a>1.5 107-二叉树的层序遍历II</h2><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/description/">107</a></p><p><img src="/img/d.5.png" alt="在这里插入图片描述"></p><blockquote><p>上一题reverse一下就可以了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ans,TreeNode* root,<span class="type">int</span> level)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>() &lt;= level)</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        ans[level].<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">Recursion</span>(ans,root-&gt;left,level+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Recursion</span>(ans,root-&gt;right,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrderBottom</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">Recursion</span>(ans,root,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>也引入一下这题(上一题)的非递归写法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrderBottom</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) </span><br><span class="line">            que.<span class="built_in">push</span>(root); <span class="comment">//先放一个根节点</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) </span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">//从前往后一个一个取</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) </span><br><span class="line">                    que.<span class="built_in">push</span>(node-&gt;left); <span class="comment">//push进去当前层的下一层节点</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) </span><br><span class="line">                    que.<span class="built_in">push</span>(node-&gt;right); <span class="comment">//同理</span></span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec); <span class="comment">//加入一层</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>()); <span class="comment">// 在这里反转一下数组即可</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-6-199-二叉树的右视图"><a href="#1-6-199-二叉树的右视图" class="headerlink" title="1.6 199-二叉树的右视图"></a>1.6 199-二叉树的右视图</h2><p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199</a><br><img src="/img/d.6.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightSideView</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root) <span class="comment">//加入第一个节点</span></span><br><span class="line">            que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(i == (size<span class="number">-1</span>)) <span class="comment">//如果是位于尾部</span></span><br><span class="line">                    ans.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)</span><br><span class="line">                    que.<span class="built_in">push</span>(tmp-&gt;left);<span class="comment">//加入下一层数据</span></span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)</span><br><span class="line">                    que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-7-637-二叉树的层平均值"><a href="#1-7-637-二叉树的层平均值" class="headerlink" title="1.7* 637-二叉树的层平均值"></a>1.7* 637-二叉树的层平均值</h2><p><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/description/">637</a></p><p><img src="/img/d.7.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">            que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                sum+=tmp-&gt;val;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)</span><br><span class="line">                    que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)</span><br><span class="line">                    que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(sum/size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-8-429-N叉树的层序遍历"><a href="#1-8-429-N叉树的层序遍历" class="headerlink" title="1.8* 429-N叉树的层序遍历"></a>1.8* 429-N叉树的层序遍历</h2><p><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/">429</a></p><p><img src="/img/d.8.png" alt="在这里插入图片描述"><br><img src="/img/d.9.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(Node* root) &#123;</span><br><span class="line">        queue&lt;Node*&gt; que;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">            que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; tmp_v;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                Node* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                tmp_v.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; node-&gt;children.<span class="built_in">size</span>(); ++j) <span class="comment">//下一层节点加入que</span></span><br><span class="line">                    <span class="keyword">if</span>(node-&gt;children[j])</span><br><span class="line">                        que.<span class="built_in">push</span>(node-&gt;children[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(tmp_v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-9-515-在每个树行中找最大值"><a href="#1-9-515-在每个树行中找最大值" class="headerlink" title="1.9 515-在每个树行中找最大值"></a>1.9 515-在每个树行中找最大值</h2><p><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/description/">515</a></p><p><img src="/img/d.10.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">            que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> max = INT_MIN;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size;++i)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* tmp = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;val&gt;max)</span><br><span class="line">                    max = tmp-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;left)</span><br><span class="line">                    que.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;right)</span><br><span class="line">                    que.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-10-116-填充每个节点的下一个右侧节点指针"><a href="#1-10-116-填充每个节点的下一个右侧节点指针" class="headerlink" title="1.10* 116-填充每个节点的下一个右侧节点指针"></a>1.10* 116-填充每个节点的下一个右侧节点指针</h2><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/">116</a></p><p><img src="/img/d.11.png" alt="在这里插入图片描述"></p><p><img src="/img/d.12.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        Node* leftest = root;</span><br><span class="line">        <span class="keyword">while</span>(leftest-&gt;left) <span class="comment">//如果该节点还有子节点,则说明可以进入循环处理其孩子</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node* cur = leftest;</span><br><span class="line">            <span class="keyword">while</span>(cur) <span class="comment">//处理cur所有的子节点连接 </span></span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;left-&gt;next = cur-&gt;right; <span class="comment">//下一层的next连接</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;next)</span><br><span class="line">                    cur-&gt;right-&gt;next = cur-&gt;next-&gt;left; <span class="comment">//下一层隔支连接</span></span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            leftest = leftest-&gt;left; <span class="comment">//下一层最左边开始</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>若使用普通的层序遍历那么空间复杂度会达到N<br>而这种方式空间复杂度为1</p></blockquote><hr><h2 id="1-11-117-填充每个节点的下一个右侧节点指针II"><a href="#1-11-117-填充每个节点的下一个右侧节点指针II" class="headerlink" title="1.11 117-填充每个节点的下一个右侧节点指针II"></a>1.11 117-填充每个节点的下一个右侧节点指针II</h2><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/">117</a></p><p><img src="/img/d.13.png" alt="在这里插入图片描述"><br><img src="/img/d.14.png" alt="在这里插入图片描述"></p><blockquote><p>上一题是完全二叉树</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() : val(0), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right, Node* _next)</span></span><br><span class="line"><span class="comment">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root &amp;&amp; (root-&gt;left || root-&gt;right)) <span class="comment">//root存在并且必须有一个孩子</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left &amp;&amp; root-&gt;right) <span class="comment">//如果有左有右,则连接孩子</span></span><br><span class="line">                root-&gt;left-&gt;next = root-&gt;right;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//准备让孩子隔支连接</span></span><br><span class="line">            Node* child = root-&gt;right ? root-&gt;right : root-&gt;left;</span><br><span class="line">            Node* brodady = root-&gt;next; <span class="comment">//向右移动以便用孩子连接child</span></span><br><span class="line">            <span class="keyword">while</span>(brodady &amp;&amp; !(brodady-&gt;left||brodady-&gt;right)) <span class="comment">//直到brodady走到尽头,也要找到有孩子的brodady</span></span><br><span class="line">                brodady = brodady-&gt;next;</span><br><span class="line"></span><br><span class="line">            child-&gt;next = brodady ? (brodady-&gt;left ? brodady-&gt;left : brodady-&gt;right) : <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="built_in">connect</span>(root-&gt;right); <span class="comment">//先向右初始化出NULL</span></span><br><span class="line">            <span class="built_in">connect</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-12-104-二叉树的最大深度"><a href="#1-12-104-二叉树的最大深度" class="headerlink" title="1.12 104-二叉树的最大深度"></a>1.12 104-二叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">104</a></p><p><img src="/img/d.15.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left), <span class="built_in">maxDepth</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-13-111-二叉树的最小深度"><a href="#1-13-111-二叉树的最小深度" class="headerlink" title="1.13 111-二叉树的最小深度"></a>1.13 111-二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111</a><br><img src="/img/d.16.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> min_depth = INT_MAX;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)</span><br><span class="line">            min_depth = <span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;left),min_depth);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">            min_depth = <span class="built_in">min</span>(<span class="built_in">minDepth</span>(root-&gt;right),min_depth);</span><br><span class="line">        <span class="keyword">return</span> min_depth+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="2-二叉树之常见算法"><a href="#2-二叉树之常见算法" class="headerlink" title="2. 二叉树之常见算法"></a>2. 二叉树之常见算法</h1><h2 id="2-1-226-翻转二叉树"><a href="#2-1-226-翻转二叉树" class="headerlink" title="2.1 226-翻转二叉树"></a>2.1 226-翻转二叉树</h2><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">226</a><br><img src="/img/d.17.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-101-对称二叉树"><a href="#2-2-101-对称二叉树" class="headerlink" title="2.2 101-对称二叉树"></a>2.2 101-对称二叉树</h2><p><a href="https://leetcode.cn/problems/symmetric-tree/description/">101</a></p><p><img src="/img/d.18.png" alt="在这里插入图片描述"><br><img src="/img/d.19.png" alt="在这里插入图片描述"></p><blockquote><p>递归</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Recursion</span><span class="params">(TreeNode* left,TreeNode* right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left&amp;&amp;right || left&amp;&amp;!right) <span class="comment">//如果长短不一</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!left &amp;&amp; !right) <span class="comment">//如果都没有后续了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(left-&gt;val != right-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(left-&gt;left,right-&gt;right) &amp;&amp;</span><br><span class="line">                <span class="built_in">Recursion</span>(left-&gt;right,right-&gt;left); </span><br><span class="line">                <span class="comment">//对称的两个节点比较</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>迭代(栈)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        st.<span class="built_in">push</span>(root-&gt;left);</span><br><span class="line">        st.<span class="built_in">push</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* leftNode = st.<span class="built_in">top</span>(); </span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            TreeNode* rightNode = st.<span class="built_in">top</span>(); </span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (!leftNode &amp;&amp; !rightNode) <span class="comment">//左右节点都不存在,相当于对称,循环至下一次判断</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//左右不一样长 || 左右节点的值不一样</span></span><br><span class="line">            <span class="keyword">if</span> ((!leftNode || !rightNode || (leftNode-&gt;val != rightNode-&gt;val))) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            st.<span class="built_in">push</span>(leftNode-&gt;left);</span><br><span class="line">            st.<span class="built_in">push</span>(rightNode-&gt;right);</span><br><span class="line">            st.<span class="built_in">push</span>(leftNode-&gt;right);</span><br><span class="line">            st.<span class="built_in">push</span>(rightNode-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-222-完全二叉树的节点个数"><a href="#2-3-222-完全二叉树的节点个数" class="headerlink" title="2.3* 222-完全二叉树的节点个数"></a>2.3* 222-完全二叉树的节点个数</h2><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/">222</a></p><p><img src="/img/d.20.png" alt="在这里插入图片描述"><br><img src="/img/d.21.png" alt="在这里插入图片描述"></p><blockquote><p>递归遍历 O(N)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* root,<span class="type">int</span>&amp; count)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,count);</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,count);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>精简版递归</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">countNodes</span>(root-&gt;left) </span><br><span class="line">                + <span class="built_in">countNodes</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>最优</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> level = <span class="number">0</span>;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;left) </span><br><span class="line">        &#123;</span><br><span class="line">            level++;</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">1</span> &lt;&lt; level; <span class="comment">// 层序遍历第low位为最深层最左侧节点序号 4</span></span><br><span class="line">        <span class="type">int</span> high = (<span class="number">1</span> &lt;&lt; (level + <span class="number">1</span>)) - <span class="number">1</span>; <span class="comment">//层序遍历第high位为最深层最右侧节点序号 7</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (high - low + <span class="number">1</span>) / <span class="number">2</span> + low; <span class="comment">//+1防止low+0 ,mid为两节点中间部分一个节点,偏右</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">exists</span>(root, level, mid))</span><br><span class="line">                low = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exists</span><span class="params">(TreeNode* root, <span class="type">int</span> level, <span class="type">int</span> mid)</span> <span class="comment">//6</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> bits = <span class="number">1</span> &lt;&lt; (level - <span class="number">1</span>); <span class="comment">//上一层的第一位序列</span></span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur &amp;&amp; bits &gt; <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (bits &amp; mid)  <span class="comment">//0010 0110 0010 当不再同一树时判断后就进入循环</span></span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            bits &gt;&gt;= <span class="number">1</span>; <span class="comment">//bits是最左节点,往上靠</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur != <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度:O(logN*logN)<br>空间复杂度:O(1)</p></blockquote><hr><h2 id="2-4-110-平衡二叉树"><a href="#2-4-110-平衡二叉树" class="headerlink" title="2.4 110-平衡二叉树"></a>2.4 110-平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/description/">110</a><br><img src="/img/d.22.png" alt="在这里插入图片描述"><br><img src="/img/d.23.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Recursion</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">Recursion</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">Recursion</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(right == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(left-right) &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//执行后,以后的结果都为-1,递归其实已经可以看作结束了</span></span><br><span class="line">        <span class="keyword">return</span> left&gt;right?left+<span class="number">1</span>:right+<span class="number">1</span>; <span class="comment">//每一层都会记录层数+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Recursion</span>(root) == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-5-257-二叉树的所有路径"><a href="#2-5-257-二叉树的所有路径" class="headerlink" title="2.5 257-二叉树的所有路径"></a>2.5 257-二叉树的所有路径</h2><p><a href="https://leetcode.cn/problems/binary-tree-paths/description/">257</a><br><img src="/img/d.24.png" alt="在这里插入图片描述"><br><img src="/img/d.25.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* root,vector&lt;string&gt;&amp; vs,string s)</span> <span class="comment">//s传的是临时拷贝份</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root&amp;&amp;!root-&gt;left&amp;&amp;!root-&gt;right) <span class="comment">//无子,此时不加-&gt;</span></span><br><span class="line">        &#123;</span><br><span class="line">            s+=(<span class="built_in">to_string</span>(root-&gt;val));</span><br><span class="line">            vs.<span class="built_in">push_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        s+=(<span class="built_in">to_string</span>(root-&gt;val)+<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,vs,s); </span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,vs,s); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; vs;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,vs,s);</span><br><span class="line">        <span class="keyword">return</span> vs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6-404-左子叶之和"><a href="#2-6-404-左子叶之和" class="headerlink" title="2.6 404-左子叶之和"></a>2.6 404-左子叶之和</h2><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/description/">404</a><br><img src="/img/d.26.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> leftValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left &amp;&amp; !root-&gt;left-&gt;left &amp;&amp; !root-&gt;left-&gt;right) <span class="comment">//左子存在且为叶</span></span><br><span class="line">            leftValue = root-&gt;left-&gt;val;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> leftValue + <span class="built_in">sumOfLeftLeaves</span>(root-&gt;left) + <span class="built_in">sumOfLeftLeaves</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-7-513-找树左下角的值"><a href="#2-7-513-找树左下角的值" class="headerlink" title="2.7* 513-找树左下角的值"></a>2.7* 513-找树左下角的值</h2><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/description/">513</a></p><p><img src="/img/d.27.png" alt="在这里插入图片描述"><br><img src="/img/d.28.png" alt="在这里插入图片描述"></p><blockquote><p>dfs</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* cur,<span class="type">int</span> curdep,<span class="type">int</span>&amp; maxdep,<span class="type">int</span>&amp; ans)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur-&gt;left&amp;&amp;!cur-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(curdep&gt;maxdep)</span><br><span class="line">            &#123;</span><br><span class="line">                maxdep = dep;</span><br><span class="line">                ans = cur-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;left) <span class="comment">//cur-&gt;left在前面使得更早的占用ans,以防被right占用</span></span><br><span class="line">            <span class="built_in">Recursion</span>(cur-&gt;left,dep+<span class="number">1</span>,maxdep,ans);</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;right)</span><br><span class="line">            <span class="built_in">Recursion</span>(cur-&gt;right,dep+<span class="number">1</span>,maxdep,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = root-&gt;val;</span><br><span class="line">        <span class="type">int</span> maxdep = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,<span class="number">0</span>,maxdep,ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>bfs</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;right)</span><br><span class="line">                que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;left)</span><br><span class="line">                que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            ans = cur-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-8-112-路径总和"><a href="#2-8-112-路径总和" class="headerlink" title="2.8 112-路径总和"></a>2.8 112-路径总和</h2><p><a href="https://leetcode.cn/problems/path-sum/description/">112</a></p><p><img src="/img/d.29.png" alt="在这里插入图片描述"><br><img src="/img/d.30.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Recursion</span><span class="params">(TreeNode* cur,<span class="type">int</span> sum,<span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!cur-&gt;left&amp;&amp;!cur-&gt;right&amp;&amp;sum+cur-&gt;val == target)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(cur-&gt;left,sum+cur-&gt;val,target)</span><br><span class="line">            ||<span class="built_in">Recursion</span>(cur-&gt;right,sum+cur-&gt;val,target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="type">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(root,<span class="number">0</span>,targetSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-9-106-从中序与后续遍历序列构造二叉树"><a href="#2-9-106-从中序与后续遍历序列构造二叉树" class="headerlink" title="2.9* 106-从中序与后续遍历序列构造二叉树"></a>2.9* 106-从中序与后续遍历序列构造二叉树</h2><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/">106</a></p><p><img src="/img/d.31.png" alt="在这里插入图片描述"><br><img src="/img/d.32.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">Recursion</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder,vector&lt;<span class="type">int</span>&gt;&amp; postorder,<span class="type">int</span>&amp; rootindex,<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode* cur = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(postorder[rootindex]); <span class="comment">//cur为当前根节点</span></span><br><span class="line">        <span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(mid = inorder.<span class="built_in">size</span>()<span class="number">-1</span> ; mid &gt;=<span class="number">0</span> ; --mid)</span><br><span class="line">            <span class="keyword">if</span>(inorder[mid] == postorder[rootindex])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//此时mid为inorder的根坐标</span></span><br><span class="line">        rootindex--; <span class="comment">//跳到下一个根</span></span><br><span class="line">        <span class="comment">//因为是后序所以先right,否则会出现构建出相反的树,并且大概率导致rootindex&lt;0而导致的越栈</span></span><br><span class="line">        cur-&gt;right = <span class="built_in">Recursion</span>(inorder,postorder,rootindex,mid+<span class="number">1</span>,right);</span><br><span class="line">        cur-&gt;left = <span class="built_in">Recursion</span>(inorder,postorder,rootindex,left,mid<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; inorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootindex = postorder.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(inorder,postorder,rootindex,<span class="number">0</span>,rootindex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-10-105-从前序与中序遍历序列构造二叉树"><a href="#2-10-105-从前序与中序遍历序列构造二叉树" class="headerlink" title="2.10* 105-从前序与中序遍历序列构造二叉树"></a>2.10* 105-从前序与中序遍历序列构造二叉树</h2><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/">105</a><br><img src="/img/d.33.png" alt="在这里插入图片描述"><br><img src="/img/d.34.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">Recursion</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder,<span class="type">int</span>&amp; rootindex,<span class="type">int</span> left , <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode* cur = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[rootindex]);</span><br><span class="line">        <span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(mid = <span class="number">0</span> ; mid &lt; inorder.<span class="built_in">size</span>() ; ++mid)</span><br><span class="line">            <span class="keyword">if</span>(inorder[mid] == preorder[rootindex])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        rootindex++;</span><br><span class="line">        cur-&gt;left = <span class="built_in">Recursion</span>(preorder,inorder,rootindex,left,mid<span class="number">-1</span>);</span><br><span class="line">        cur-&gt;right = <span class="built_in">Recursion</span>(preorder,inorder,rootindex,mid+<span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootindex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(preorder,inorder,rootindex,<span class="number">0</span>,preorder.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-11-654-最大二叉树"><a href="#2-11-654-最大二叉树" class="headerlink" title="2.11* 654-最大二叉树"></a>2.11* 654-最大二叉树</h2><p><a href="https://leetcode.cn/problems/maximum-binary-tree/description/">654</a></p><p><img src="/img/d.35.png" alt="在这里插入图片描述"><br><img src="/img/d.36.png" alt="在这里插入图片描述"><br><img src="/img/d.37.png" alt="在这里插入图片描述"><br><img src="/img/d.37.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">Recursion</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> mid = left; <span class="comment">//坐标</span></span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;    <span class="comment">//最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = mid ; i &lt;= right ; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                mid = i;       <span class="comment">//mid就是根的坐标</span></span><br><span class="line">                max = nums[i]; <span class="comment">//最大值就是根</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* cur = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max); <span class="comment">//构建根</span></span><br><span class="line">        cur-&gt;left = <span class="built_in">Recursion</span>(nums,left,mid<span class="number">-1</span>);</span><br><span class="line">        cur-&gt;right = <span class="built_in">Recursion</span>(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-12-617-合并二叉树"><a href="#2-12-617-合并二叉树" class="headerlink" title="2.12 617-合并二叉树"></a>2.12 617-合并二叉树</h2><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/description/">617</a></p><p><img src="/img/d.39.png" alt="在这里插入图片描述"><br><img src="/img/d.40.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root1)</span><br><span class="line">            <span class="keyword">return</span> root2; <span class="comment">//如果两个节点都不存在,也会返回nullptr(root2)</span></span><br><span class="line">        <span class="keyword">if</span>(!root2)</span><br><span class="line">            <span class="keyword">return</span> root1;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(root1-&gt;val+root2-&gt;val);</span><br><span class="line">        root-&gt;left = <span class="built_in">mergeTrees</span>(root1-&gt;left,root2-&gt;left);</span><br><span class="line">        root-&gt;right = <span class="built_in">mergeTrees</span>(root1-&gt;right,root2-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-13-236-二叉树的最近公共祖先"><a href="#2-13-236-二叉树的最近公共祖先" class="headerlink" title="2.13* 236-二叉树的最近公共祖先"></a>2.13* 236-二叉树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/">236</a></p><p><img src="/img/d.41.png" alt="在这里插入图片描述"></p><p><img src="/img/d.42.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == p || root == q)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">            </span><br><span class="line">        TreeNode* left = <span class="built_in">lowestCommonAncestor</span>(root-&gt;left,p,q);</span><br><span class="line">        TreeNode* right = <span class="built_in">lowestCommonAncestor</span>(root-&gt;right,p,q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left&amp;&amp;right)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!left&amp;&amp;right)</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left&amp;&amp;!right)</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="3-二叉搜索树"><a href="#3-二叉搜索树" class="headerlink" title="3. 二叉搜索树"></a>3. 二叉搜索树</h1><h2 id="3-1-700-二叉搜索树中的搜索"><a href="#3-1-700-二叉搜索树中的搜索" class="headerlink" title="3.1 700-二叉搜索树中的搜索"></a>3.1 700-二叉搜索树中的搜索</h2><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/description/">700</a></p><p><img src="/img/d.43.png" alt="在这里插入图片描述"><br><img src="/img/d.44.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">searchBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; root-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">searchBST</span>(root-&gt;left,val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val &gt; root-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">searchBST</span>(root-&gt;right,val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-98-验证二叉搜索树"><a href="#3-2-98-验证二叉搜索树" class="headerlink" title="3.2* 98-验证二叉搜索树"></a>3.2* 98-验证二叉搜索树</h2><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/description/">98</a></p><p><img src="/img/d.45.png" alt="在这里插入图片描述"><br><img src="/img/d.46.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root,TreeNode* minNode = <span class="literal">nullptr</span>,TreeNode* maxNode = <span class="literal">nullptr</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>((minNode &amp;&amp; root-&gt;val &lt;= minNode-&gt;val) || <span class="comment">//右树用来判断是否比父小</span></span><br><span class="line">            (maxNode &amp;&amp; root-&gt;val &gt;= maxNode-&gt;val))  <span class="comment">//左树用来判断是否比父大</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;                            <span class="comment">//不符合就false</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root-&gt;left,minNode,root) &amp;&amp; <span class="comment">//对于左树,最大的就是根</span></span><br><span class="line">                <span class="built_in">isValidBST</span>(root-&gt;right,root,maxNode); <span class="comment">//对于右树,最小的就是根</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>更直观的方法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* tmp = root-&gt;left;</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;val&gt;=root-&gt;val) <span class="comment">//先判断和父的关系是否满足</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(tmp-&gt;right)       <span class="comment">//在判断自己的右孩子是否和自己对应</span></span><br><span class="line">            &#123;                       <span class="comment">//左孩子会通过递归(和父的关系)进行判断</span></span><br><span class="line">                tmp = tmp-&gt;right;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;val&gt;=root-&gt;val)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* tmp = root-&gt;right;</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;val&lt;=root-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(tmp-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = tmp-&gt;left;</span><br><span class="line">                <span class="keyword">if</span>(tmp-&gt;val&lt;=root-&gt;val)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isValidBST</span>(root-&gt;left) &amp;&amp; <span class="built_in">isValidBST</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-530-二叉搜索树的最小绝对差"><a href="#3-3-530-二叉搜索树的最小绝对差" class="headerlink" title="3.3 530-二叉搜索树的最小绝对差"></a>3.3 530-二叉搜索树的最小绝对差</h2><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/">530</a></p><p><img src="/img/d.47.png" alt="在这里插入图片描述"><br><img src="/img/d.48.png" alt="在这里插入图片描述"></p><blockquote><p>递归</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* root,TreeNode*&amp; prev,<span class="type">int</span>&amp; mindif)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,prev,mindif);</span><br><span class="line">        <span class="keyword">if</span>(prev)</span><br><span class="line">            mindif = <span class="built_in">min</span>(mindif,<span class="built_in">abs</span>(root-&gt;val-prev-&gt;val));</span><br><span class="line">            </span><br><span class="line">        prev = root; <span class="comment">//prev就是更深层的</span></span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,prev,mindif);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> mindif = INT_MAX;</span><br><span class="line">        TreeNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,prev,mindif); <span class="comment">//类似于采取中序遍历寻找mindif</span></span><br><span class="line">        <span class="keyword">return</span> mindif;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完全遍历</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* root,<span class="type">int</span>&amp; min)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* left = root-&gt;left;</span><br><span class="line">            <span class="keyword">while</span>(left)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp =<span class="built_in">abs</span>(root-&gt;val-left-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp&lt;min)</span><br><span class="line">                    min = tmp;</span><br><span class="line">                left = left-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* right = root-&gt;right;</span><br><span class="line">            <span class="keyword">while</span>(right)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = <span class="built_in">abs</span>(root-&gt;val-right-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(tmp&lt;min)</span><br><span class="line">                    min = tmp;</span><br><span class="line">                right = right-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,min);</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,min);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode* root)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> min = <span class="number">100000</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,min);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-4-501-二叉搜索树中的众数"><a href="#3-4-501-二叉搜索树中的众数" class="headerlink" title="3.4 501-二叉搜索树中的众数"></a>3.4 501-二叉搜索树中的众数</h2><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/description/">501</a></p><p><img src="/img/d.49.png" alt="在这里插入图片描述"><br><img src="/img/d.50.png" alt="在这里插入图片描述"></p><blockquote><p>hash通解,即非二叉树也可解</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Init_um_Recursion</span><span class="params">(TreeNode* root,unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp; um)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        um[root-&gt;val]++;</span><br><span class="line">        <span class="built_in">Init_um_Recursion</span>(root-&gt;left,um);</span><br><span class="line">        <span class="built_in">Init_um_Recursion</span>(root-&gt;right,um);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; um;</span><br><span class="line">        <span class="built_in">Init_um_Recursion</span>(root,um);</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> max = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : um) <span class="comment">//算出最多的出现次数</span></span><br><span class="line">            <span class="keyword">if</span>(e.second &gt; max)</span><br><span class="line">                max = e.second;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : um)</span><br><span class="line">            <span class="keyword">if</span>(e.second == max)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(e.first);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>针对</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> samenum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxcount = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Get_ret</span><span class="params">(TreeNode* root,vector&lt;<span class="type">int</span>&gt;&amp; ret)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Get_ret</span>(root-&gt;left,ret);</span><br><span class="line">        ret.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(samenum == root-&gt;val) <span class="comment">//即使samenum初始值就和val相同也无所谓</span></span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            samenum = root-&gt;val;</span><br><span class="line">            count=<span class="number">1</span>; <span class="comment">//避免samenum初始就和val相同而导致的错误计数,也方便使用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(maxcount &lt; count)</span><br><span class="line">            maxcount = count;</span><br><span class="line">        <span class="built_in">Get_ret</span>(root-&gt;right,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">        <span class="built_in">Get_ret</span>(root,ret);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = maxcount<span class="number">-1</span>; <span class="comment">//left到right 可看作是窗口</span></span><br><span class="line">        <span class="keyword">while</span>(right &lt; ret.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ret[left] == ret[right])</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(ret[left]);</span><br><span class="line">                left = right+<span class="number">1</span>;</span><br><span class="line">                right = left+maxcount<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                left++;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5-235-二叉搜索树的最近公共祖先"><a href="#3-5-235-二叉搜索树的最近公共祖先" class="headerlink" title="3.5* 235-二叉搜索树的最近公共祖先"></a>3.5* 235-二叉搜索树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/description/">235</a></p><p><img src="/img/d.51.png" alt="在这里插入图片描述"><br><img src="/img/d.52.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &gt; p-&gt;val &amp;&amp; root-&gt;val &gt; q-&gt;val) <span class="comment">//都在根右边</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;left,p,q);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val&lt;p-&gt;val&amp;&amp;root-&gt;val&lt;q-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;right,p,q);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-6-701-二叉搜索树中的插入操作"><a href="#3-6-701-二叉搜索树中的插入操作" class="headerlink" title="3.6* 701-二叉搜索树中的插入操作"></a>3.6* 701-二叉搜索树中的插入操作</h2><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/description/">701</a></p><p><img src="/img/d.53.png" alt="在这里插入图片描述"><br><img src="/img/d.54.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoBST</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">if</span>(val &gt; root-&gt;val)</span><br><span class="line">            root-&gt;right = <span class="built_in">insertIntoBST</span>(root-&gt;right,val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(val &lt; root-&gt;val)</span><br><span class="line">            root-&gt;left = <span class="built_in">insertIntoBST</span>(root-&gt;left,val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-7-450-删除二叉搜索树中的节点"><a href="#3-7-450-删除二叉搜索树中的节点" class="headerlink" title="3.7* 450-删除二叉搜索树中的节点"></a>3.7* 450-删除二叉搜索树中的节点</h2><p><a href="https://leetcode.cn/problems/delete-node-in-a-bst/description/">450</a></p><p><img src="/img/d.55.png" alt="在这里插入图片描述"><br><img src="/img/d.56.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">findMin</span><span class="params">(TreeNode* node)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node-&gt;left) </span><br><span class="line">            node = node-&gt;left;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deleteNode</span><span class="params">(TreeNode* root, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) </span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt; root-&gt;val) </span><br><span class="line">            root-&gt;left = <span class="built_in">deleteNode</span>(root-&gt;left, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root-&gt;val) </span><br><span class="line">            root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, key);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!root-&gt;left) </span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* temp = root-&gt;right;</span><br><span class="line">                <span class="keyword">delete</span> root;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!root-&gt;right) </span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode* temp = root-&gt;left;</span><br><span class="line">                <span class="keyword">delete</span> root;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TreeNode* temp = <span class="built_in">findMin</span>(root-&gt;right); <span class="comment">//temp就是要替代的节点</span></span><br><span class="line">            root-&gt;val = temp-&gt;val;</span><br><span class="line">            root-&gt;right = <span class="built_in">deleteNode</span>(root-&gt;right, temp-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-8-669-修剪二叉搜索树"><a href="#3-8-669-修剪二叉搜索树" class="headerlink" title="3.8* 669-修剪二叉搜索树"></a>3.8* 669-修剪二叉搜索树</h2><p><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/description/">669</a></p><p><img src="/img/d.57.png" alt="在这里插入图片描述"><br><img src="/img/d.58.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">trimBST</span><span class="params">(TreeNode* root, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">//间接删除</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val&lt;low) <span class="comment">//范围全在右子树上</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">trimBST</span>(root-&gt;right,low,high);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val&gt;high)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">trimBST</span>(root-&gt;left,low,high);</span><br><span class="line">            </span><br><span class="line">        root-&gt;left = <span class="built_in">trimBST</span>(root-&gt;left,low,high);</span><br><span class="line">        root-&gt;right = <span class="built_in">trimBST</span>(root-&gt;right,low,high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-9-108-将有序数组转换为二叉搜索树"><a href="#3-9-108-将有序数组转换为二叉搜索树" class="headerlink" title="3.9 108-将有序数组转换为二叉搜索树"></a>3.9 108-将有序数组转换为二叉搜索树</h2><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/description/">108</a></p><p><img src="/img/d.59.png" alt="在这里插入图片描述"><br><img src="/img/d.60.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">Recursion</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> mid = left+((right-left)&gt;&gt;<span class="number">1</span>); <span class="comment">// &gt;&gt;1 可看作是 /2,默认左偏</span></span><br><span class="line">        TreeNode* newnode = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[mid]);</span><br><span class="line">        newnode-&gt;left = <span class="built_in">Recursion</span>(nums,left,mid<span class="number">-1</span>);</span><br><span class="line">        newnode-&gt;right = <span class="built_in">Recursion</span>(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> newnode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Recursion</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-10-538-把二叉搜索树转换为累加树"><a href="#3-10-538-把二叉搜索树转换为累加树" class="headerlink" title="3.10 538-把二叉搜索树转换为累加树"></a>3.10 538-把二叉搜索树转换为累加树</h2><p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/description/">538</a></p><p><img src="/img/d.61.png" alt="在这里插入图片描述"><br><img src="/img/d.62.png" alt="在这里插入图片描述"><br><img src="/img/d.63.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(TreeNode* root,<span class="type">int</span>&amp; val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;right,val);</span><br><span class="line">        val+=root-&gt;val;</span><br><span class="line">        root-&gt;val = val;</span><br><span class="line">        <span class="built_in">Recursion</span>(root-&gt;left,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">convertBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(root,val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-二叉树之层序遍历&quot;&gt;&lt;a href=&quot;#1-二叉树之层序遍历&quot; class=&quot;headerlink&quot; title=&quot;1. 二叉树之层序遍历&quot;&gt;&lt;/a&gt;1. 二叉树之层序遍历&lt;/h1&gt;&lt;h2 id=&quot;1-1-144-二叉树的前序遍历&quot;&gt;&lt;a href=&quot;#1-1</summary>
      
    
    
    
    <category term="代码随想录" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>tips</title>
    <link href="http://example.com/2023/10/22/tips-1/"/>
    <id>http://example.com/2023/10/22/tips-1/</id>
    <published>2023-10-22T01:55:13.000Z</published>
    <updated>2023-10-22T06:11:02.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MySQL基本使用"><a href="#1-MySQL基本使用" class="headerlink" title="1. MySQL基本使用"></a>1. MySQL基本使用</h1><hr><h2 id="1-1-MySQL的启动和登录"><a href="#1-1-MySQL的启动和登录" class="headerlink" title="1.1 MySQL的启动和登录"></a>1.1 MySQL的启动和登录</h2><hr><h3 id="1-1-1-MySQL的启动"><a href="#1-1-1-MySQL的启动" class="headerlink" title="1.1.1 MySQL的启动"></a>1.1.1 MySQL的启动</h3><p><strong>1. 管理员身份打开cmd</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql80 ##启动MySQL</span><br><span class="line">net stop mysql80 ##关闭MySQL</span><br></pre></td></tr></table></figure><hr><h3 id="1-1-2-MySQL的客户端连接"><a href="#1-1-2-MySQL的客户端连接" class="headerlink" title="1.1.2 MySQL的客户端连接"></a>1.1.2 MySQL的客户端连接</h3><p><strong>1. 管理员身份打开cmd</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql [<span class="operator">-</span>h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>] [<span class="operator">-</span>P <span class="number">3306</span>] <span class="operator">-</span>u root <span class="operator">-</span>p </span><br></pre></td></tr></table></figure><p><code>使用这种方法需要配置环境变量,MySQL的bin目录</code></p><p><strong>2. 打开mysql命令行客户端,输入密码以打开</strong></p><hr><h2 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h2><blockquote><p>关系型数据库 (RDBMS)</p><ul><li>概念 : 建立在关系模型基础上,由多张相互连接的二维表组成的数据库</li><li>特点 : <ol><li>使用表存储数据,格式同意,便于维护</li><li>使用SQL语言操作,标准统一,使用方便</li></ol></li></ul></blockquote><hr><h1 id="2-SQL"><a href="#2-SQL" class="headerlink" title="2. SQL"></a>2. SQL</h1><blockquote><p>SQL通用语法</p><ol><li>SQL语句可以单行或多行书写,<code>以分号结尾</code></li><li>SQL依据可以使用空格&#x2F;TAB增强可读</li><li>MySQL数据库的SQL语句<code>不区分大小写</code>,<code>关键字建议大写</code></li><li>注释:<ul><li>单行注释 : –注释内容 &#x2F; # 注释内容(MySQL特有)</li><li>多行注释: &#x2F;*注释内容*&#x2F;</li></ul></li></ol></blockquote><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象（数据库，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><p>如果您需要其他格式或有其他问题，请随时告诉我。</p><h2 id="2-1-SQL类型"><a href="#2-1-SQL类型" class="headerlink" title="2.1 SQL类型"></a>2.1 SQL类型</h2><h3 id="2-1-1-数值类型"><a href="#2-1-1-数值类型" class="headerlink" title="2.1.1 数值类型"></a>2.1.1 数值类型</h3><table><thead><tr><th>类型</th><th>大小</th><th>有符号范围</th><th>无符号范围</th><th>描述</th></tr></thead><tbody><tr><td>tinyint</td><td>1 byte</td><td>(-128，127)</td><td>(0, 255)</td><td>小整数值</td></tr><tr><td>smallint</td><td>2 bytes</td><td>(-32768，32767)</td><td>(0, 65535)</td><td>大整数值</td></tr><tr><td>mediumint</td><td>3 bytes</td><td>(-8388608，8388607)</td><td>(0, 16777215)</td><td>大整数值</td></tr><tr><td>int&#x2F;integer</td><td>4 bytes</td><td>(-2147483648，2147483647)</td><td>(0, 4294967295)</td><td>大整数值</td></tr><tr><td>bigint</td><td>8 bytes</td><td>(-2^63，2^63-1)</td><td>(0, 2^64-1)</td><td>极大整数值</td></tr><tr><td>float</td><td>4 bytes</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>(0, 3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>double</td><td>8 bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>(0, 1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>decimal</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值(精确定点数)</td></tr></tbody></table><p>ps : </p><ul><li>decimal : 123.45 精度(M)为5,标度(D)为2</li><li>无符号类型写法: tinyint unsigned</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>4代表整体长度,1代表小数点后的位数</p><hr><h3 id="2-1-2-字符串类型"><a href="#2-1-2-字符串类型" class="headerlink" title="2.1.2 字符串类型"></a>2.1.2 字符串类型</h3><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>varchar</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>tinytext</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65,535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>text</td><td>0-65,535 bytes</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16,777,215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumtext</td><td>0-16,777,215 bytes</td><td>中等长度文本数据</td></tr><tr><td>longblob</td><td>0-4,294,967,295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0-4,294,967,295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>ps :</p><ul><li>char性能优与varchar<br>变长是指,在不超过最大容量时,1就是1,2就是2<br>定长是指,哪怕是1,也要占用最大容量</li></ul><hr><h3 id="2-1-3-日期类型"><a href="#2-1-3-日期类型" class="headerlink" title="2.1.3 日期类型"></a>2.1.3 日期类型</h3><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th></tr></thead><tbody><tr><td>date</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td></tr><tr><td>time</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td></tr><tr><td>year</td><td>1</td><td>1901 至 2155</td><td>YYYY</td></tr><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td></tr><tr><td>timestamp</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td></tr></tbody></table><hr><h2 id="2-2-DDL"><a href="#2-2-DDL" class="headerlink" title="2.2 DDL"></a>2.2 DDL</h2><h3 id="2-2-1-数据库操作"><a href="#2-2-1-数据库操作" class="headerlink" title="2.2.1 数据库操作"></a>2.2.1 数据库操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#查询</span><br><span class="line"><span class="keyword">show</span> databases; # 查询所有数据库</span><br><span class="line"><span class="keyword">select</span> database(); #查询当前数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建</span><br><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名 [<span class="keyword">default</span> charset 字符集] [<span class="keyword">collate</span> 排序规则];</span><br><span class="line"></span><br><span class="line">#eg:</span><br><span class="line">creat datebase if <span class="keyword">not</span> <span class="keyword">exists</span> emp <span class="keyword">default</span> charset utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] 数据库名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#使用</span><br><span class="line">use 数据库名</span><br></pre></td></tr></table></figure><p><code>MySQL里实现的utf8最长使用3个字节,utf8mb4 是 utf8 的超集并完全兼容utf8，能够用四个字节存储更多的字符。</code></p><p>比如:最常见的就算现在手机端常用的表情字符 emoji和一些不常用的汉字，如 “墅” ，这些需要四个字节才能编码出来。</p><hr><h3 id="2-2-2-表操作-查询"><a href="#2-2-2-表操作-查询" class="headerlink" title="2.2.2 表操作 - 查询"></a>2.2.2 表操作 - 查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables; # 查询当前数据库的所有表</span><br><span class="line"></span><br><span class="line"><span class="keyword">desc</span> 表名; # 查询表结构</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名; # 查询指定表的建表语句</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-3-表操作-创建表"><a href="#2-2-3-表操作-创建表" class="headerlink" title="2.2.3 表操作 - 创建表"></a>2.2.3 表操作 - 创建表</h3><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>的类型 [comment <span class="string">&#x27;注释内容&#x27;</span>], #逗号</span><br><span class="line">...</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>的类型 [comment <span class="string">&#x27;注释内容&#x27;</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>eg:创建一个如下表<br><img src="/img/c.1.png" alt="在这里插入图片描述"></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">)comment <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><blockquote><p>eg: 根据需求创建表<br>员工信息表,要求:</p><ol><li>编号(纯数字)</li><li>员工工号(字符串类型,长度不超过10位)</li><li>员工姓名(字符串类型,长度不超过10位)</li><li>性别</li><li>年龄</li><li>身份证号</li><li>入职时间(取值年月日即可)</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> comment<span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">worknum <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">age tinyint unsigned,</span><br><span class="line">idcard <span class="type">char</span>(<span class="number">18</span>),</span><br><span class="line">entrydate <span class="type">date</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-4-表操作-修改"><a href="#2-2-4-表操作-修改" class="headerlink" title="2.2.4 表操作 - 修改"></a>2.2.4 表操作 - 修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#添加字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型(长度) [comment 注释] [约束]; #添加字段</span><br><span class="line"></span><br><span class="line">#eg : 为emp表增加一个新的字段 &quot;昵称&quot; 为nickname,类型为<span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型(长度) # 修改数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束]; #修改字段名和字段类型</span><br><span class="line"></span><br><span class="line">#eg : 将emp表的nickname字段修改为username,类型为<span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp change nickname username <span class="type">varchar</span>(<span class="number">30</span>) comment<span class="string">&#x27;昵称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br><span class="line"></span><br><span class="line">#eg : 将emp表的字段username删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> username;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;</span><br><span class="line"></span><br><span class="line">#eg : 将emp表的表名修改为employee</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp rename <span class="keyword">to</span> employee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名; ##删除指定表,并重新创建该表</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-DML"><a href="#2-3-DML" class="headerlink" title="2.3 DML"></a>2.3 DML</h2><h3 id="2-3-1-添加数据"><a href="#2-3-1-添加数据" class="headerlink" title="2.3.1 添加数据"></a>2.3.1 添加数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...); #给指定字段添加数据</span><br><span class="line">#eg:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,worknum,name,gender,age) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;9tse&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...); #给全部字段添加数据</span><br><span class="line">#eg:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;sewerperson&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...)...;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...)...;</span><br><span class="line">#eg:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;9tse&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span>),(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;sewerperson&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>ps: </p><ol><li>插入数据时,指定的字段顺序需要与值的顺序对应</li><li>字符串和日期数据应该包含在引号中</li><li>插入数据大小,应在字段的规定范围内</li></ol><hr><h3 id="2-3-2-修改数据"><a href="#2-3-2-修改数据" class="headerlink" title="2.3.2 修改数据"></a>2.3.2 修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>,字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>,... [<span class="keyword">where</span> 条件];</span><br><span class="line"></span><br><span class="line">#eg: 修改id为<span class="number">1</span>的数据,将name修改为<span class="number">9</span>tse</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;9tse&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># 修改id为<span class="number">1</span>的数据,将name修改为 sewer,gender修改为 女</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;sewer&#x27;</span>,gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># 将所有员工的入职日期修改为<span class="number">2008</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> entrydate <span class="operator">=</span> <span class="string">&#x27;2008-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>ps: </p><ul><li>修改语句的条件如果没有,默认修改整张表的所有数据</li></ul><hr><h3 id="2-3-3-删除数据"><a href="#2-3-3-删除数据" class="headerlink" title="2.3.3 删除数据"></a>2.3.3 删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br><span class="line">#eg:删除gender为女的员工</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"># 删除所有员工</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>ps:</p><ol><li>delete语句的条件如果没有,默认作用于整张表的所有数据</li><li>delete语句不能删除某一个字段的值(可以使用update)</li></ol><hr><h2 id="2-4-DQL"><a href="#2-4-DQL" class="headerlink" title="2.4 DQL"></a>2.4 DQL</h2><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件判断</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序字段列表</span><br><span class="line">limit</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><ul><li>基本查询</li><li>条件查询(where)</li><li>聚合函数(count,max,min,avg,sum)</li><li>分组查询(group by)</li><li>排序查询(order by)</li><li>分页查询(limit)</li></ul><h3 id="2-4-1-基本查询"><a href="#2-4-1-基本查询" class="headerlink" title="2.4.1 基本查询"></a>2.4.1 基本查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#查询多个字段</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,... <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名; #效率较低</span><br><span class="line"></span><br><span class="line">#设置别名</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>[<span class="keyword">as</span>] 别名<span class="number">1</span>,字段<span class="number">2</span>[<span class="keyword">as</span>] 别名<span class="number">2</span> ... <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">#去除重复记录</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#查询指定字段返回</span><br><span class="line"><span class="keyword">select</span> name,worknum,age <span class="keyword">from</span> emp; </span><br><span class="line"></span><br><span class="line">#查询所有字段返回</span><br><span class="line"><span class="keyword">select</span> id,worknum,name,gender,age;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp; #尽量不写<span class="operator">*</span>,影响效率</span><br><span class="line"></span><br><span class="line">#查询所有员工工作地址,起别名</span><br><span class="line"><span class="keyword">select</span> workaddress <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">#查询工作员工的上班地址(不要重复)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><hr><h3 id="2-4-2-条件查询"><a href="#2-4-2-条件查询" class="headerlink" title="2.4.2 条件查询"></a>2.4.2 条件查询</h3><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br></pre></td></tr></table></figure><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between…and…</td><td>在某范围内(含最小,最大)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值,多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单字符,%匹配任意个字符)</td></tr><tr><td>is null</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且(多个条件同时成立)</td></tr><tr><td>OR 或 |\</td><td></td></tr><tr><td>NOT 或 !</td><td>非不是</td></tr></tbody></table><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#查询年龄等于<span class="number">88</span>的员工</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line"></span><br><span class="line">#小于<span class="number">20</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">#查询没有身份证号的员工</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">#有身份证号的员工</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">#年龄在<span class="number">15</span>到<span class="number">20</span>(包含)的员工</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">15</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"># 性别女且小于<span class="number">25</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">#<span class="number">18</span> <span class="number">20</span> <span class="number">40</span> 的</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span> <span class="operator">||</span> age <span class="operator">=</span> <span class="number">20</span> <span class="operator">||</span> age <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">in</span>(<span class="number">18</span>,<span class="number">20</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">#名字是两个字的</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#身份证号最后一位为X的</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> emp <span class="keyword">where</span> idcard <span class="keyword">like</span> <span class="string">&#x27;%X&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="2-4-3-聚合函数"><a href="#2-4-3-聚合函数" class="headerlink" title="2.4.3 聚合函数"></a>2.4.3 聚合函数</h3><blockquote><p>介绍: 将一列数据作为一个整体,进行纵向计算</p></blockquote><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数(字段列表) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><p><strong>ps : null值不参与聚合函数的运算</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#统计员工数量</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(idcard) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">#统计平均年龄</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">#最大年龄</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">#最小</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(age) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">#西安地区员工年龄之和</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="keyword">from</span> emp <span class="keyword">where</span> workaddress <span class="operator">=</span> <span class="string">&#x27;西安&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="2-4-4-分组查询"><a href="#2-4-4-分组查询" class="headerlink" title="2.4.4 分组查询"></a>2.4.4 分组查询</h3><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组后过滤条件];</span><br></pre></td></tr></table></figure><blockquote><p><code>where</code>和<code>having</code>的区别</p><ul><li>执行实际不同:<br>where是分组之前进行过滤,不满足where条件,不参与分组;<br>having是分组后对结果进行过滤</li><li>判断条件不同<br>where不能对聚合函数进行判断<br>having可以</li></ul><p>执行顺序 : where &gt; 聚合函数 &gt; having<br>分组后,查询的字段一般为聚合函数和分组字段,查询其他字段无意义</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#根据性别分组,统计男性员工和女性员工的数量</span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line">#根据性别分组,统计男女平均年龄</span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">avg</span>(age) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line">#查询年龄小于<span class="number">45</span>,根据工作地址分组,获取员工数量大于<span class="number">3</span>的工作地址</span><br><span class="line"><span class="keyword">select</span> workaddress,<span class="built_in">count</span>(<span class="operator">*</span>) address_count <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="2-4-5-排序查询"><a href="#2-4-5-排序查询" class="headerlink" title="2.4.5 排序查询"></a>2.4.5 排序查询</h3><blockquote><p>语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>, 字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>排序方式:</p><ol><li>asc : 升序(默认值)</li><li>desc : 降序</li></ol><p><strong>ps: 如果是多字段排序,当第一个字段值相同时,才会根据第二个字段进行排序;</strong></p><blockquote><p>eg:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#根据年龄升序</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"></span><br><span class="line">#入职时间降序</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#年龄升序,相同则入职时间降序</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> , entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="2-4-6-分页查询"><a href="#2-4-6-分页查询" class="headerlink" title="2.4.6 分页查询"></a>2.4.6 分页查询</h3><blockquote><p>语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p>ps:</p><ol><li>起始索引从0开始,<code>起始索引 = (查询页码-1) * 每页显示记录数</code></li><li>分页查询时数据库方言,不同数据库由不同的实现,MySQL时limit</li><li>如果查询的是第一页数据,起始索引可以省略,直接简写为 limit 10</li></ol><blockquote><p>eg:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#查询第一页员工数据,每页<span class="number">10</span>条</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">#查询第二页,每页<span class="number">10</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">#查询年龄为<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>岁的女性员工信息。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span><span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> age <span class="keyword">in</span>(<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">#查询性别为 男 ，并且年龄在 <span class="number">20</span><span class="number">-40</span> 岁(含)以内的姓名为三个字的员工。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">and</span> ( age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">40</span> ) <span class="keyword">and</span> name <span class="keyword">like</span> <span class="string">&#x27;___&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#统计员工表中，年龄小于<span class="number">60</span>岁的 ，男性员工和女性员工的人数。</span><br><span class="line"><span class="keyword">select</span> gender，<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line">#查询所有年龄小于等于<span class="number">35</span>岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序</span><br><span class="line"><span class="keyword">select</span> name , age <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">35</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> , entrydate <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">#查询男，<span class="number">20</span><span class="number">-40</span> 岁(含)以内的前<span class="number">5</span>个员工信息 按年龄升序，相同按入职时间升序排序。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">and</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">40</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> , entrydate <span class="keyword">asc</span> limit <span class="number">5</span> ;</span><br></pre></td></tr></table></figure><h3 id="2-4-7-执行顺序"><a href="#2-4-7-执行顺序" class="headerlink" title="2.4.7 执行顺序"></a>2.4.7 执行顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#查询年龄大于<span class="number">15</span>的员工的姓名、年龄，并根据年龄进行升序排序</span><br><span class="line">#通过设置别名和使用别名的方法进行验证</span><br><span class="line"><span class="keyword">select</span> e.name ename , e.age eage <span class="keyword">from</span> emp e <span class="keyword">where</span> e.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#编写顺序</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件判断</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序字段列表</span><br><span class="line">limit</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#执行顺序,selec跑到<span class="keyword">having</span>后</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件判断</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序字段列表</span><br><span class="line">limit</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><hr><h2 id="2-5-DCL"><a href="#2-5-DCL" class="headerlink" title="2.5 DCL"></a>2.5 DCL</h2><h3 id="2-5-1-管理用户"><a href="#2-5-1-管理用户" class="headerlink" title="2.5.1 管理用户"></a>2.5.1 管理用户</h3><blockquote><p>语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查询用户</span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line">#创建用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#修改用户密码</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">with</span> mysal_native_password <span class="keyword">by</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#删除用户</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br></pre></td></tr></table></figure><p>ps : </p><ul><li>主机名可以使用 % 通配<br> 使用这类SQL开发人员操作的比较少，主要是DBA (Database Administrator数据库管理员)</li></ul><blockquote><p>eg:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#创建用户 <span class="number">9</span>tse ，只能够在当前主机Localhost访间，密码<span class="number">123456</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;9tse&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>:</span><br><span class="line"></span><br><span class="line">#创建用户 sewer ，可以在任意主机访问该数据库，密码<span class="number">123456</span> ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;sewer&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#修改用户 <span class="number">9</span>tse 的访问密码为 <span class="number">1234</span> ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;9tse&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#删除<span class="number">9</span>tse<span class="variable">@localhost</span>用户</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span><span class="string">&#x27;9tse&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-5-2-权限控制"><a href="#2-5-2-权限控制" class="headerlink" title="2.5.2 权限控制"></a>2.5.2 权限控制</h3><p>常用权限如下</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td>CREATE</td><td>创建数据库&#x2F;表</td></tr></tbody></table><blockquote><p>语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查询权限</span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#授予权限</span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#撤销权限</span><br><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>ps:</p><ol><li>多个授权之间逗号隔开</li><li>授权时,数据库名和表名可以用通配符*表示所有;</li></ol><blockquote><p>eg:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;9tse&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> sewerperson.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;9tse&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> sewerperson.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;9tse&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h1><h2 id="3-1-字符串函数"><a href="#3-1-字符串函数" class="headerlink" title="3.1 字符串函数"></a>3.1 字符串函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>concat(s1, s2, … sn)</td><td>字符串拼接，将s1，s2，… sn拼接成一个字符串</td></tr><tr><td>lower(str)</td><td>将字符串str全部转为小写</td></tr><tr><td>upper(str)</td><td>将字符串str全部转为大写</td></tr><tr><td>lpad(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>rpad(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>trim(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>substring(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><blockquote><p>字符串函数的基本使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- concat</span></span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;Hello&#x27;&#x27;MysQL&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Tower</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;Hello&#x27;</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment">-- upper</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- lpad</span></span><br><span class="line"><span class="keyword">select</span> Lpad(<span class="string">&#x27;01&#x27;</span>，<span class="number">5</span>,<span class="string">&#x27;-&#x27;</span>); # <span class="comment">---01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- rpad</span></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;01&#x27;</span>，<span class="number">5</span>,<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- trim</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27; HelloMysQL&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- substring</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;Hello MySL&#x27;</span>,<span class="number">1</span>,<span class="number">5</span>); # Hello</span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 业务需求变更，员工的工号统一5位数，不足5位数的全部在前面补0。比如: 1号员工的工号应该为00001.</span></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> workno <span class="operator">=</span> lpad(workno,<span class="number">5</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-数值函数"><a href="#3-2-数值函数" class="headerlink" title="3.2 数值函数"></a>3.2 数值函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>ceil(x)</td><td>向上取整</td></tr><tr><td>floor(x)</td><td>向下取整</td></tr><tr><td>mod(x; y)</td><td>返回 x&#x2F;y 的模</td></tr><tr><td>rand()</td><td>返回 0~1 内的随机数</td></tr><tr><td>round(x; y)</td><td>求参数 x 的四舍五入的值，保留 y 位小数</td></tr></tbody></table><blockquote><p>数值函数的基本利用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ceil</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.1</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment">-- floor</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- mod</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">7</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- rand</span></span><br><span class="line"><span class="keyword">select</span> rand();</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> round</span><br><span class="line"><span class="keyword">select</span> round(<span class="number">2.344</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：通过数据库的函数，生成一个六位数的随机验证码。select</span></span><br><span class="line">lpad(round(rand()<span class="operator">*</span><span class="number">1000000</span>, <span class="number">0</span>), <span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>); </span><br></pre></td></tr></table></figure><hr><h2 id="3-3-日期函数"><a href="#3-3-日期函数" class="headerlink" title="3.3 日期函数"></a>3.3 日期函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>curdate()</td><td>返回当前日期</td></tr><tr><td>curtime()</td><td>返回当前时间</td></tr><tr><td>now()</td><td>返回当前日期和时间</td></tr><tr><td>year(date)</td><td>获取指定 date 的年份</td></tr><tr><td>month(date)</td><td>获取指定 date 的月份</td></tr><tr><td>day(date)</td><td>获取指定 date 的日期</td></tr><tr><td>date_add(date, interval expr type)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔 expr 后的时间值</td></tr><tr><td>datediff(date1, date2)</td><td>返回起始时间 date1 和结束时间 date2 之间的天数</td></tr></tbody></table><blockquote><p>日期函数的基本使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- curtime()</span></span><br><span class="line"><span class="keyword">select</span> curtime();</span><br><span class="line"></span><br><span class="line"> <span class="comment">-- now()</span></span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- YEAR,MONTH,DAY </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">YEAR</span>(now());</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">MONTH</span>(now()); </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DAY</span>(now()); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_add</span></span><br><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">interval</span> <span class="number">70</span> <span class="keyword">year</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- datediff</span></span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2021-10-01&#x27;</span>, <span class="string">&#x27;2021-12-01&#x27;</span>); </span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询所有员工的入职天数，并根据入职天数倒序排序。</span></span><br><span class="line"><span class="keyword">select</span> name, datediff(curdate(), entrydate) <span class="keyword">as</span> <span class="string">&#x27;entrydays&#x27;</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> entrydays <span class="keyword">desc</span>; </span><br></pre></td></tr></table></figure><hr><h2 id="3-4-流程控制函数"><a href="#3-4-流程控制函数" class="headerlink" title="3.4 流程控制函数"></a>3.4 流程控制函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>if(value , t, f)</td><td>如果 value 为 true，则返回 t，否则返回 f</td></tr><tr><td>ifnull(value1, value2)</td><td>如果 value1 不为空，返回 value1，否则返回 value2</td></tr><tr><td>case when [val1] then [res1] … else [default] end</td><td>如果 val1 为 true，则返回 res1，… 否则返回 default 默认值</td></tr><tr><td>case [expr] when [val1] then [res1] … else [default] end</td><td>如果 expr 的值等于 val1，则返回 res1，… 否则返回 default 默认值</td></tr></tbody></table><blockquote><p>流程控制函数的基本使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--if</span></span><br><span class="line"><span class="keyword">select</span> if(<span class="literal">false</span>, <span class="string">&#x27;0k&#x27;</span>, <span class="string">&#x27;Error&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- ifnull</span></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;0k&#x27;</span>,<span class="string">&#x27;Default&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;Default&#x27;</span>); </span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="keyword">null</span>,<span class="string">&#x27;Default&#x27;</span>); </span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- case when then elserend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 需求：查询emp表的员工姓名和工作地址（北京／上海————＞一线城市，其他————＞二线城市）</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> workaddress <span class="keyword">when</span> ＇北京＇ <span class="keyword">then</span> ＇一线城市＇ <span class="keyword">when</span>＇上海＇ <span class="keyword">then</span> ＇一线城市＇ <span class="keyword">else</span> ＇二线城市＇<span class="keyword">end</span>)<span class="keyword">as</span>＇工作地址＇ </span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--案例: 统计班级各个学员的成绩，展示的规则如下:</span></span><br><span class="line"><span class="comment">--&gt;= 85,展示松秀</span></span><br><span class="line"><span class="comment">--&gt;= 60，展示及格</span></span><br><span class="line"><span class="comment">--否则，展示不及格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">id,</span><br><span class="line">name,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span>)<span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span>)<span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span>)<span class="string">&#x27;语文&#x27;</span>,</span><br><span class="line"><span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure><hr><h1 id="4-约束"><a href="#4-约束" class="headerlink" title="4. 约束"></a>4. 约束</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><blockquote><p>概念 : 约束时作用于表中字段上的规则,用于限制存储在表中的数据<br>目的 : 保证数据库中数据的正确,有效性和完整性<br><code>注意</code> : 约束时作用于表中的字段上的,可以在创建表&#x2F;修改表的时候添加约束. </p></blockquote><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为 null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>default</td></tr><tr><td>检查约束</td><td>检查约束 (8.0.16 版本之后) 保证字段值满足某一个条件</td><td>check</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><hr><h2 id="4-2-案例"><a href="#4-2-案例" class="headerlink" title="4.2 案例"></a>4.2 案例</h2><p>建表要求:</p><table><thead><tr><th>字段名</th><th>字段含义</th><th>字段类型</th><th>约束条件</th><th>约束关键字</th></tr></thead><tbody><tr><td>id</td><td>ID唯一标识</td><td>int</td><td>主键，并且自动增长</td><td>primary key auto increment</td></tr><tr><td>name</td><td>姓名</td><td>varchar(10)</td><td>不为空，并且唯一</td><td>not null, unique</td></tr><tr><td>age</td><td>年龄</td><td>int</td><td>大于0，并且小于等于120</td><td>check (age &gt; 0 and age &lt;&#x3D; 120)</td></tr><tr><td>status</td><td>状态</td><td>char(1)</td><td>如果没有指定该值，默认为1</td><td>default ‘1’</td></tr><tr><td>gender</td><td>性别</td><td>char(1)</td><td>无</td><td></td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;姓名&#x27;</span> ,</span><br><span class="line">age <span class="type">int</span> <span class="keyword">check</span> ( age <span class="operator">&gt;</span>  <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">120</span> ) comment<span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> comment<span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">)comment<span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom1&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>),(<span class="string">&#x27;Tom2&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>,<span class="number">19</span>,<span class="number">1</span><span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,status,gender) <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>，<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;1&#x27;</span>，<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom4&#x27;</span>,<span class="number">80</span>,<span class="number">1</span><span class="string">&#x27;，男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">-1</span>,<span class="number">1</span><span class="string">&#x27;，男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,status,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">121</span>,<span class="string">&#x27;1&#x27;</span>，<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name,age,gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>,<span class="number">120</span>，<span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>当不满足建表约束时就会报错 : 无法插入数据</code></p><hr><h2 id="4-3-外键约束"><a href="#4-3-外键约束" class="headerlink" title="4.3 外键约束"></a>4.3 外键约束</h2><blockquote><p>语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#添加外键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">constraint</span>] [外键名称] <span class="keyword">foreign</span> key(外键字段名) <span class="keyword">references</span> 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key(外键字段名) <span class="keyword">references</span> 主表(主表列名);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名称;</span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> dept(id);</span><br><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_dept_id;</span><br></pre></td></tr></table></figure><p><code>实际中并不常用外键,会导致耦合度较高</code></p><blockquote><p>删除更新行为的函数</p></blockquote><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>no action</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。(与restrict一致)</td></tr><tr><td>restrict</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。(与no action 一致)</td></tr><tr><td>cascade</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录。</td></tr><tr><td>set null</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null (这就要求该外键允许取null)。</td></tr><tr><td>set default</td><td>父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段) <span class="keyword">references</span> 主表名(主表字段名) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br></pre></td></tr></table></figure><blockquote><p>案例</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外键的删除和更新行为</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> dept(id) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> dept(id) <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">set</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="5-多表查询"><a href="#5-多表查询" class="headerlink" title="5. 多表查询"></a>5. 多表查询</h1><p><strong>先拿一段案例展示一下表之间的外键连接</strong></p><blockquote><p>多对多 中间以外键相连</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_course(</span><br><span class="line">id <span class="type">int</span> auto increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">studentid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">courseid  <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;课程ID&#x27;</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_courseid <span class="keyword">foreign</span> key (courseid) <span class="keyword">references</span> counse (id),</span><br><span class="line"><span class="keyword">constraint</span> fk_studentid <span class="keyword">foreign</span> key (studentid) <span class="keyword">references</span> student (id)</span><br><span class="line">)comment <span class="string">&#x27;学生课程中间表&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_course <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">2</span>),(<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">3</span>),(<span class="keyword">null</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="keyword">null</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="keyword">null</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>一对一 中间多创建一个表(tb_user_edu) 相连两个表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;1: 男 ，2: 女&#x27;</span>，</span><br><span class="line">phone <span class="type">char</span>(<span class="number">11</span>) comment <span class="string">&#x27;手机号&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;用户基本信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user_edu(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">degree <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;学历&#x27;</span>,</span><br><span class="line">major <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;专业&#x27;</span>,</span><br><span class="line">primaryschool <span class="type">varchar</span>(<span class="number">50</span>) comment<span class="string">&#x27;小学&#x27;</span></span><br><span class="line">middleschool <span class="type">varchar</span>(<span class="number">50</span>) comment<span class="string">&#x27;中学&#x27;</span></span><br><span class="line">university <span class="type">varchar</span>(<span class="number">50</span>) comment<span class="string">&#x27;大学&#x27;</span>,</span><br><span class="line">userid <span class="type">int</span> <span class="keyword">unique</span> comment<span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_userid <span class="keyword">foreign</span> key (userid) <span class="keyword">references</span> tb_user(id)</span><br><span class="line">)comment<span class="string">&#x27;用户教育信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>多表查询概述</strong></p><ul><li>概述：指从多张表中查询数据</li><li>笛卡尔积：笛卡尔乘积是指在数学中，两个集合A集合和B集合的所有组合情况。（在多表查询时，需要消除无效的笛卡尔积）</li></ul><blockquote><p><img src="/img/c.2.png" alt="在这里插入图片描述"></p></blockquote><p><code>可以通过where来消除笛卡尔积</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure><p>多表查询可以分为</p><ul><li>连接查询<ul><li>内连接</li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li><li>自连接</li></ul></li><li>子查询</li></ul><p>具体含义在小章节会简述</p><hr><h2 id="5-1-连接查询"><a href="#5-1-连接查询" class="headerlink" title="5.1 连接查询"></a>5.1 连接查询</h2><h3 id="5-1-1-内连接"><a href="#5-1-1-内连接" class="headerlink" title="5.1.1 内连接"></a>5.1.1 内连接</h3><p> <code>内连接查询的是两张表交集的部分</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#内连接查询语法</span><br><span class="line"><span class="comment">-- 隐式内连接</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 条件...；</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 显式内连接</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [<span class="keyword">inner</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件...；</span><br></pre></td></tr></table></figure><blockquote><p>eg:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询每一个员工的姓名，及关联的部门的名称（隐式内连接实现）</span></span><br><span class="line"><span class="comment">-- 表结构：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id=dept.id</span></span><br><span class="line"><span class="keyword">select</span> emp.name，dept.name <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line"><span class="keyword">select</span> e.name,d.name <span class="keyword">from</span> emp e , dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.查询每一个员工的姓名，及关联的部门的名称（显式内连接实现）---- INNER JOIN..ON//</span></span><br><span class="line"><span class="comment">-- 表结构：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id=dept.id</span></span><br><span class="line"><span class="keyword">select</span> e.name，d.name <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept done.dept_id <span class="operator">=</span>d.id;</span><br><span class="line"><span class="keyword">select</span> e.name，d.name <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><hr><h3 id="5-1-2-外连接"><a href="#5-1-2-外连接" class="headerlink" title="5.1.2 外连接"></a>5.1.2 外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#外连接查询语法</span><br><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br><span class="line">#相当于查询表<span class="number">1</span>（左表）的所有数据包含表<span class="number">1</span>和表<span class="number">2</span>交集部分的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件...;</span><br><span class="line">#相当于查询表<span class="number">2</span>（右表）的所有数据包含表<span class="number">1</span>和表<span class="number">2</span>交集部分的数据</span><br></pre></td></tr></table></figure><blockquote><p>eg</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1 查询emp表的所有数据，和对应的部门信息（左外连接</span></span><br><span class="line"><span class="comment">-- 表结构：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id=dept.id</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>，d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id；</span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>，d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span>d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2 查询dept表的所有数据，和对应的员工信息（右外连接）</span></span><br><span class="line"><span class="keyword">select</span> d.<span class="operator">*</span> , e. <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"><span class="keyword">select</span> d.<span class="operator">*</span> , e. <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><hr><h3 id="5-1-3-自连接"><a href="#5-1-3-自连接" class="headerlink" title="5.1.3 自连接"></a>5.1.3 自连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#自连接查询语法：</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表A 别名A <span class="keyword">join</span> 表A 别名B <span class="keyword">on</span> 条件...;</span><br><span class="line">#自连接查询，可以是内连接查询，也可以是外连接查询</span><br></pre></td></tr></table></figure><blockquote><p>eg:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询员工及其所属领导的名字</span></span><br><span class="line"><span class="comment">-- 表结构：emp</span></span><br><span class="line"><span class="keyword">select</span> a.name , b.name <span class="keyword">from</span> emp a , emp b <span class="keyword">where</span> a.managerid <span class="operator">=</span> b.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2，查询所有员工emp及其领导的名字emp，如果员工没有领导，也需要查询出来</span></span><br><span class="line"><span class="comment">-- 表结构：emp a，emp b</span></span><br><span class="line"><span class="keyword">select</span> a.name  <span class="string">&#x27;员工&#x27;</span> , b.name <span class="string">&#x27;领导&#x27;</span> <span class="keyword">from</span> emp a <span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> a.managerid <span class="operator">=</span> b.id；</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-联合查询"><a href="#5-2-联合查询" class="headerlink" title="5.2 联合查询"></a>5.2 联合查询</h2><p><code>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表a ...</span><br><span class="line"><span class="keyword">union</span> [<span class="keyword">all</span>]</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表b ...;</span><br></pre></td></tr></table></figure><p>ps : </p><ul><li>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</li><li><strong>unionall会将全部的数据直接合并在一起， union会对合并之后的数据去重。</strong></li></ul><blockquote><p>eg : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- union all , union</span></span><br><span class="line"><span class="comment">-- 1.将薪资低于50的员工，和年龄大于50岁的员工全部查询出来。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">Where</span> salary<span class="operator">&lt;</span><span class="number">500</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">50</span>;</span><br><span class="line"># 查询出的结果有可能出现重复的行</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary<span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br><span class="line">#去掉 <span class="keyword">all</span> 就可以去重</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-子查询"><a href="#5-3-子查询" class="headerlink" title="5.3 子查询"></a>5.3 子查询</h2><h3 id="5-3-1-标量子查询"><a href="#5-3-1-标量子查询" class="headerlink" title="5.3.1 标量子查询"></a>5.3.1 标量子查询</h3><blockquote><p>标量子查询<br>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为<code>标量子查询</code><br>常用的操作符：&#x3D;  ,&lt;&gt; ,  &gt; , &lt; , &gt;&#x3D;  , &lt;&#x3D; </p></blockquote><blockquote><p>eg : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标量子查询</span></span><br><span class="line"><span class="comment">-- 1. 查询“销售部”的所有员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询“销售部”部门ID</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name  <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 根据销售部部门ID， 查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询在“方东白”入职之后的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询方东白的入职日期</span></span><br><span class="line"><span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b.查询指定入职日期之后入职的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span>（<span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="5-3-2-列子查询"><a href="#5-3-2-列子查询" class="headerlink" title="5.3.2 列子查询"></a>5.3.2 列子查询</h3><blockquote><p>子查询返回的结果是一列（可以是多行），这种子查询称为<code>列子查询</code><br>常用的操作符：IN、NOT IN、ANY、SOME、ALL</p></blockquote><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>not in</td><td>不在指定的集合范围之内</td></tr><tr><td>any</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>some</td><td>与 any 等同，使用 some 的地方都可以使用 any</td></tr><tr><td>all</td><td>子查询返回列表的所有值都必须满足 in</td></tr></tbody></table><blockquote><p>eg : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列子查询</span></span><br><span class="line"><span class="comment">-- 1. 查询“销售部”和“市场部”的所有员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询“销售部”和“市场部”的部门ID</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br><span class="line"><span class="comment">-- b. 根据部门ID，查询员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询比财务部所有工资都高的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询所有财务部人员工资</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span>（<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>);</span><br><span class="line"><span class="comment">-- b.比财务部所有人工资都高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询比研发部其中任意一人工资高的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询研发部所有人工资</span></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> （<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>);</span><br><span class="line"><span class="comment">-- b. 比研发部其中任意一人工资高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">Where</span> salary <span class="operator">&gt;</span> <span class="keyword">some</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="string">&#x27;研发部&#x27;</span>));</span><br></pre></td></tr></table></figure><hr><h3 id="5-3-3-行子查询"><a href="#5-3-3-行子查询" class="headerlink" title="5.3.3 行子查询"></a>5.3.3 行子查询</h3><blockquote><p>子查询返回的结果是一行（可以是多列），这种子查询称为<code>行子查询</code><br>常用的操作符：&#x3D; , &lt;&gt; , in , not in</p></blockquote><blockquote><p>eg : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询与“张无”的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询“张无”的薪资及直属领导</span></span><br><span class="line"><span class="keyword">select</span> salary，managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无&#x27;</span></span><br><span class="line"><span class="comment">-- b. 查询与“张无”的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary，managerid)<span class="operator">=</span>( <span class="keyword">select</span> salary， managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="5-3-4-表子查询"><a href="#5-3-4-表子查询" class="headerlink" title="5.3.4 表子查询"></a>5.3.4 表子查询</h3><blockquote><p>子查询返回的结果是多行多列，这种子查询称为<code>表子查询</code><br>常用的操作符：IN</p></blockquote><blockquote><p>eg : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表子查询</span></span><br><span class="line"><span class="comment">-- 1. 查询与“鹿客”“宋远桥”的职位和薪资相同的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询“鹿枝客”，“宋远桥”的职位和薪资</span></span><br><span class="line"><span class="keyword">select</span> job，salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;鹿客&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;宋远桥&#x27;</span>;</span><br><span class="line"><span class="comment">-- b. 查询与“鹿客”，“宋远桥”的职位和薪资相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (job,salary) <span class="keyword">in</span> (<span class="keyword">select</span> job，salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;鹿杖客&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;宋远桥&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询入职日期是“2086-01-01之后的员工信息，及其部门信息</span></span><br><span class="line"><span class="comment">-- a. 入职日期是“206-1-01”之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>;</span><br><span class="line"><span class="comment">-- b. 查询这部分员工，对应的部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>,d.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>）e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id; </span><br></pre></td></tr></table></figure><hr><h2 id="5-4-多表查询案例"><a href="#5-4-多表查询案例" class="headerlink" title="5.4 多表查询案例"></a>5.4 多表查询案例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询员工的姓名、年龄、职位、部门信息 （隐式内连接）</span></span><br><span class="line"><span class="comment">-- 表：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id = dept.id</span></span><br><span class="line"><span class="keyword">select</span> e.name , e.age , e.job , d.name <span class="keyword">from</span> emp e , dept d <span class="keyword">where</span> e.dept_id<span class="operator">=</span>d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询年龄小于3岁的员工的姓名、年龄、职位、部门信息（显式内连接）</span></span><br><span class="line"><span class="comment">-- 表：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id=dept.id</span></span><br><span class="line"><span class="keyword">select</span> e.name , e.age , e.job , d.name <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">where</span> e.age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.查询拥有员工的部门ID、部门名称</span></span><br><span class="line"><span class="comment">-- 表：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id=dept.i</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> d.id , d.name <span class="keyword">from</span> emp e , dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询所有年龄大于4岁的员工，及其归属的部门名称；如果员工没有分配部门，也需要展示出来</span></span><br><span class="line"><span class="comment">-- 表：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.dept_id=dept.id</span></span><br><span class="line"><span class="comment">-- 外连接</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> , d.name <span class="keyword">from</span> emp e <span class="keyword">Left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">where</span> e.age <span class="operator">&gt;</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 查询所有员工的工资等级</span></span><br><span class="line"><span class="comment">-- 表：emp，sagrade</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.salary&gt;= salgrade.losal and demp.salary &lt;= sagrade.hisal</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> , s.grade , s.losal , s.hisal <span class="keyword">from</span> emp e , salgrade s <span class="keyword">where</span> e.salary <span class="operator">&gt;=</span> s.losa <span class="keyword">and</span> e.salary <span class="operator">&lt;=</span> s.hisal;</span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> , s.grade , s.losal , s.hisal <span class="keyword">from</span> emp e , salgrade s <span class="keyword">where</span> e.salary <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 查询“研发部”所有员工的信息及工资等级</span></span><br><span class="line"><span class="comment">-- 表：emp，salgrade，dept</span></span><br><span class="line"><span class="comment">-- 连接条件：emp.salary between salgrade.losal and salgrade.hisal , emp.dept_id = dept.id</span></span><br><span class="line"><span class="comment">-- 查询条件：dept.name= &#x27;研发部&#x27;</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> ,  s.grade <span class="keyword">from</span> emp e , dept d , salgrade s <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">and</span> (e.salary <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)  <span class="keyword">and</span> d.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7. 查询“研发部”员工的平均工资</span></span><br><span class="line"><span class="comment">-- 表：emp，dept</span></span><br><span class="line"><span class="comment">-- 连接条件： emp.dept_id = dept.id</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(e.salary) <span class="keyword">from</span> emp e , dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">and</span> d.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8. 查询工资比“灭绝”高的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询“灭绝”的薪资</span></span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;灭绝&#x27;</span>;</span><br><span class="line"><span class="comment">-- b. 查询比她工资高的员工数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;灭绝&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9. 查询比平均薪资高的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询员工的平均薪资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- b. 查询比平均薪资高的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 10. 查询低于本部门平均工资的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询指定部门平均薪资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(e1.salary) <span class="keyword">from</span> emp e1 <span class="keyword">Where</span> e1.dept_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(e1.salary) <span class="keyword">from</span> emp e1 <span class="keyword">where</span> e1.dept_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- b. 查询低于本部门平均工资的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.salary <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(e1.salary) <span class="keyword">from</span> emp e1 <span class="keyword">where</span> e1.dept_id <span class="operator">=</span> e2.dept_id );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 11. 查询所有的部门信息，并统计部门的员工人数</span></span><br><span class="line"><span class="keyword">select</span> d.id , d.name , (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp e <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id) <span class="string">&#x27;人数&#x27;</span> <span class="keyword">from</span> dept d;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 12. 查询所有学生的选课情况，展示出学生名称，学号，课程名称</span></span><br><span class="line"><span class="comment">-- 表 : student , course , student_course</span></span><br><span class="line"><span class="comment">-- 连接条件：student.id = student_course.studentid , course.id = student_course.courseid</span></span><br><span class="line"><span class="keyword">select</span> s.name , s.no , c.name <span class="keyword">from</span> student s , student_course sc , course c <span class="keyword">where</span> s.id <span class="operator">=</span> sc.studentid <span class="keyword">and</span> sc.courseid <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure><hr><h1 id="6-事务"><a href="#6-事务" class="headerlink" title="6. 事务"></a>6. 事务</h1><p>事务的四大特性(ACID)</p><ul><li>原子性(<code>A</code>tomicity) : 事务是不可分割的最小操作单元,要么全部成功,要么全部失败.</li><li>一致性(<code>C</code>onsistency) : 事务完成时,必须使所有的数据都保持一致状态.</li><li>隔离性(<code>I</code>solation) : 数据库系统提供的隔离机制,保证事务在不受外部并发操作影响的独立环境下运行.</li><li>持久性(<code>D</code>urability) : 事务一旦提交或回滚,他对数据库中的数据的改变就是永久的.</li></ul><h2 id="6-1-事务的基本操作"><a href="#6-1-事务的基本操作" class="headerlink" title="6.1 事务的基本操作"></a>6.1 事务的基本操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#查看<span class="operator">/</span>设置事务提交方式</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autoccommit</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">--0是自动提交,1是手动提交,即使用commit</span></span><br><span class="line"></span><br><span class="line">#提交事务</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">#回滚事务</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><blockquote><p>eg : 方式一</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>； <span class="comment">--设置为手动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账操作（张三给李四转账1088）</span></span><br><span class="line"><span class="comment">-- 1.查询张三账户余额</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.将张三账户余额-1080</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line">程执行报错... #手动报错</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.将李四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money<span class="operator">+</span><span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><blockquote><p>eg : 方式二</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line"><span class="keyword">start</span> transaction 或 <span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line">#提交事务</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">#回滚事务</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p><code>已经设置为自动提交</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式二</span></span><br><span class="line"><span class="comment">-- 转账操作（张三给李四转账1000</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询张三账户余额</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 将张三账户余额-18</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line">手动执行报错...</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.将季四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="6-2-并发事务问题"><a href="#6-2-并发事务问题" class="headerlink" title="6.2 并发事务问题"></a>6.2 并发事务问题</h2><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另外一个事务还没有提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 “幻影”。</td></tr></tbody></table><ul><li>脏读<br>B事务读取到了A事务还没有提交的数据<blockquote><p><img src="/img/c.3.png" alt="在这里插入图片描述"></p></blockquote></li><li>不可重复读<br>事务A用同样的方法读到了不一样的数据<blockquote><p><img src="/img/c.4.png" alt="在这里插入图片描述"></p></blockquote></li><li>幻读<br>事务A插入不进去,也读不出来,可以理解为,脏写,hhh<blockquote><p><img src="/img/c.5.png" alt="在这里插入图片描述"></p></blockquote></li></ul><hr><h2 id="6-3-事务的隔离级别"><a href="#6-3-事务的隔离级别" class="headerlink" title="6.3 事务的隔离级别"></a>6.3 事务的隔离级别</h2><table><thead><tr><th>隔离级别</th><th>读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>false</td><td>false</td><td>false</td></tr><tr><td>read committed  (oracle 的默认)</td><td>true</td><td>false</td><td>false</td></tr><tr><td>repeatable read (默认)</td><td>true</td><td>true</td><td>false</td></tr><tr><td>serializable</td><td>true</td><td>true</td><td>true</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看事务隔离级别</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction_isolation</span>;</span><br><span class="line"></span><br><span class="line">#是指事务隔离级别</span><br><span class="line"><span class="keyword">set</span> [session<span class="operator">|</span><span class="keyword">global</span>] transaction isolation level [read uncommitted <span class="operator">|</span> read committed <span class="operator">|</span> repeatable read <span class="operator">|</span> serializable ];</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看事务隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@atransaction_isoation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置事务隔离级别</span></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level read uncommitted ;</span><br><span class="line"><span class="keyword">set</span> session transaction isolation Level repeatable read ;</span><br></pre></td></tr></table></figure><p>需要注意的是 : <code>事务隔离级别越高,数据越安全,但是性能会越低</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-MySQL基本使用&quot;&gt;&lt;a href=&quot;#1-MySQL基本使用&quot; class=&quot;headerlink&quot; title=&quot;1. MySQL基本使用&quot;&gt;&lt;/a&gt;1. MySQL基本使用&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1-MySQL的启动和登录&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="MySQL" scheme="http://example.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>基本数据结构篇</title>
    <link href="http://example.com/2023/10/22/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/"/>
    <id>http://example.com/2023/10/22/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87/</id>
    <published>2023-10-22T01:55:06.000Z</published>
    <updated>2023-10-23T04:00:38.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数组篇"><a href="#1-数组篇" class="headerlink" title="1.数组篇"></a>1.数组篇</h1><hr><h2 id="1-1-704-二分查找"><a href="#1-1-704-二分查找" class="headerlink" title="1.1 704-二分查找"></a>1.1 704-二分查找</h2><p><a href="https://leetcode.cn/problems/binary-search/description/">704</a></p><p><img src="/img/b.41.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> begin =<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span>(begin &lt;= end)  <span class="comment">// -1,0,3,5,9,12</span></span><br><span class="line">        &#123;</span><br><span class="line">            mid = begin+(end - begin)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">                begin = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">                end = mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;          </span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-27-移除数组"><a href="#1-2-27-移除数组" class="headerlink" title="1.2 27-移除数组"></a>1.2 27-移除数组</h2><p><a href="https://leetcode.cn/problems/remove-element/description/">27</a></p><p><img src="/img/b.42.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">0</span>,slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast != nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] == val)</span><br><span class="line">            &#123;</span><br><span class="line">                fast++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                fast++;</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-3-977-有序数组的平方"><a href="#1-3-977-有序数组的平方" class="headerlink" title="1.3 977-有序数组的平方"></a>1.3 977-有序数组的平方</h2><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">977</a></p><p><img src="/img/b.43.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> flag = right;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(right+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> leftq = nums[left]*nums[left] ;</span><br><span class="line">            <span class="type">int</span> rightq = nums[right]*nums[right];</span><br><span class="line">            <span class="keyword">if</span>(rightq &gt;= leftq)</span><br><span class="line">            &#123;</span><br><span class="line">                v[flag--] = rightq;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                v[flag--] = leftq;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="1-4-209–长度最小的子数组-滑动窗口"><a href="#1-4-209–长度最小的子数组-滑动窗口" class="headerlink" title="1.4* 209–长度最小的子数组(滑动窗口)"></a>1.4* 209–长度最小的子数组(滑动窗口)</h2><p><a href="https://gitee.com/link?target=https://leetcode.cn/problems/minimum-size-subarray-sum/">209</a><br><img src="/img/b.44.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>,right = <span class="number">0</span>,sum = <span class="number">0</span>,min = INT_MAX;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=nums[right]; <span class="comment">//统计左右指针之间的数据和</span></span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target) <span class="comment">//当期间数据大于等于target时进入,左指针向右移动</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> newmin = right - left + <span class="number">1</span>;</span><br><span class="line">                min = newmin &lt; min ? newmin : min; <span class="comment">//期间数据个数</span></span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min==INT_MAX ? <span class="number">0</span> : min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度为 O(N)</p></blockquote><hr><h2 id="1-5-59-螺旋矩阵II"><a href="#1-5-59-螺旋矩阵II" class="headerlink" title="1.5* 59-螺旋矩阵II"></a>1.5* 59-螺旋矩阵II</h2><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59</a></p><p><img src="/img/b.45.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vv</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>; <span class="comment">//计数</span></span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>; <span class="comment">//活跃数字(填数坐标)</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//k依附坐标</span></span><br><span class="line">        <span class="type">int</span> j = n - <span class="number">1</span>; <span class="comment">//k依附坐标</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j) <span class="comment">//当为奇数时会k == i == j,循环进入却没有填入操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            k = i;</span><br><span class="line">            <span class="keyword">while</span>(k &lt; j)</span><br><span class="line">                vv[i][k++] = ++num;</span><br><span class="line">            </span><br><span class="line">            k = i;</span><br><span class="line">            <span class="keyword">while</span>(k &lt; j)</span><br><span class="line">                vv[k++][j] = ++num;</span><br><span class="line"></span><br><span class="line">            k = j;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; i)</span><br><span class="line">                vv[j][k--] = ++num;</span><br><span class="line"></span><br><span class="line">            k = j;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; i)</span><br><span class="line">                vv[k--][i] = ++num;</span><br><span class="line"></span><br><span class="line">            ++i;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>)</span><br><span class="line">            vv[(n<span class="number">-1</span>)/<span class="number">2</span>][(n<span class="number">-1</span>)/<span class="number">2</span>] = ++num;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="2-链表篇"><a href="#2-链表篇" class="headerlink" title="2. 链表篇"></a>2. 链表篇</h1><h2 id="2-1-203-移除链表元素"><a href="#2-1-203-移除链表元素" class="headerlink" title="2.1 203-移除链表元素"></a>2.1 203-移除链表元素</h2><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">203</a></p><p><img src="/img/b.46.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(ListNode* prev,ListNode* cur,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(cur,cur-&gt;next,val);</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val == val)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* tmp = cur;</span><br><span class="line">            prev-&gt;next = cur-&gt;next;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;val == val)</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">Recursion</span>(head,head-&gt;next,val);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-707-设计链表"><a href="#2-2-707-设计链表" class="headerlink" title="2.2 707-设计链表"></a>2.2 707-设计链表</h2><p><a href="https://leetcode.cn/problems/design-linked-list/description/">707</a></p><p><img src="/img/b.47.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode* next;</span><br><span class="line">        <span class="built_in">ListNode</span>(<span class="type">int</span> val)</span><br><span class="line">            :<span class="built_in">val</span>(val)</span><br><span class="line">            ,<span class="built_in">next</span>(<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= index) <span class="comment">//判断是否可以进行循环</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index--)</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">addAtIndex</span>(<span class="number">0</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">addAtIndex</span>(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &lt; index) <span class="comment">//判断是否可以进行循环</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ListNode* newnode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(index--)</span><br><span class="line">            cur = cur-&gt;next; <span class="comment">//cur 在index前</span></span><br><span class="line">        newnode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newnode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= index)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(index--)</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        ListNode* del = cur-&gt;next;</span><br><span class="line">        ListNode* delnext = del-&gt;next;</span><br><span class="line">        cur-&gt;next = delnext;</span><br><span class="line">        <span class="keyword">delete</span> del;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ListNode* head; <span class="comment">//头节点</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(index);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-206-反转链表"><a href="#2-3-206-反转链表" class="headerlink" title="2.3 206-反转链表"></a>2.3 206-反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">206</a></p><p><img src="/img/b.48.png" alt="在这里插入图片描述"><br><img src="/img/b.49.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(ListNode*&amp;head,ListNode* prev,ListNode* cur)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cur-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            head = cur;</span><br><span class="line">            head-&gt;next = prev;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Recursion</span>(head,cur,cur-&gt;next);</span><br><span class="line">        cur-&gt;next = prev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head || !head-&gt;next)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="built_in">Recursion</span>(head,<span class="literal">nullptr</span>,head);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-24-两两交换链表中的节点-跳针"><a href="#2-4-24-两两交换链表中的节点-跳针" class="headerlink" title="2.4* 24-两两交换链表中的节点(跳针)"></a>2.4* 24-两两交换链表中的节点(跳针)</h2><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">24</a></p><p><img src="/img/b.50.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Recursion</span><span class="params">(ListNode*&amp; head,ListNode* prev,ListNode* cur,ListNode* next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">nullptr</span> || cur-&gt;next == <span class="literal">nullptr</span>) <span class="comment">//当到头时,也就是cur在倒数第二个</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">Recursion</span>(head,cur-&gt;next,cur-&gt;next-&gt;next,next); <span class="comment">//next一直停留,为第一组第二个</span></span><br><span class="line">        next = cur-&gt;next; <span class="comment">//next置为未交换前的后一组的第二个,隔指</span></span><br><span class="line">        <span class="keyword">if</span>(prev == <span class="literal">nullptr</span>) <span class="comment">//执行初始最后一次递归</span></span><br><span class="line">            head = next;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev-&gt;next = next;</span><br><span class="line">            </span><br><span class="line">        cur-&gt;next = next-&gt;next;</span><br><span class="line">        next-&gt;next = cur;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="comment">//如果只有&lt;两个直接return</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="built_in">Recursion</span>(head,<span class="literal">nullptr</span>,head,head-&gt;next); <span class="comment">//prev当作空</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-5-19-删除链表的倒数第N个节点-快慢指针"><a href="#2-5-19-删除链表的倒数第N个节点-快慢指针" class="headerlink" title="2.5* 19-删除链表的倒数第N个节点(快慢指针)"></a>2.5* 19-删除链表的倒数第N个节点(快慢指针)</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19</a></p><p><img src="/img/b.51.png" alt="在这里插入图片描述"><br><img src="/img/b.52.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//void Reucursion(ListNode* prev,ListNode* cur)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    </span></span><br><span class="line">    <span class="comment">//&#125; 1 2 3 4 5 6 7 8</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span>(n--) </span><br><span class="line">            fast = fast-&gt;next; <span class="comment">//fast先走,然后再走</span></span><br><span class="line">        <span class="keyword">if</span>(!fast) <span class="comment">//fast如果走到头了,倒过来就说明等同于头删</span></span><br><span class="line">        &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> slow;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next) <span class="comment">//fast第二次行动,直到走到尾</span></span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时slow位置就是要删除节点的上一位</span></span><br><span class="line">        <span class="comment">//开始删除</span></span><br><span class="line">        ListNode* tmp = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = tmp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6-链表相交"><a href="#2-6-链表相交" class="headerlink" title="2.6* 链表相交"></a>2.6* 链表相交</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">链表相交</a></p><p><img src="/img/b.53.png" alt="在这里插入图片描述"><br><img src="/img/b.54.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!headA || !headB)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pa = headA,* pb = headB;</span><br><span class="line">        <span class="keyword">while</span>(pa!=pb)</span><br><span class="line">        &#123;</span><br><span class="line">            pa = pa==<span class="literal">nullptr</span>? headB : pa-&gt;next;</span><br><span class="line">            pb = pb==<span class="literal">nullptr</span>? headA : pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2-7-142-环形链表II"><a href="#2-7-142-环形链表II" class="headerlink" title="2.7 142-环形链表II"></a>2.7 142-环形链表II</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142</a></p><p><img src="/img/b.55.png" alt="在这里插入图片描述"><br><img src="/img/b.56.png" alt="在这里插入图片描述"></p><p><strong>方法一:哈希表</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode*&gt; circle;</span><br><span class="line">        <span class="keyword">while</span>(head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(circle.<span class="built_in">count</span>(head))</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            circle.<span class="built_in">insert</span>(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：O(N)，其中 N 为链表中节点的数目。我们恰好需要访问链表中的每一个节点。<br>空间复杂度：O(N)，其中 N 为链表中节点的数目。我们需要将链表中的每个节点都保存在哈希表当中。</p></blockquote><p><strong>方法二:快慢指针</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast) </span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!fast-&gt;next)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* cmcross = head;</span><br><span class="line">                <span class="keyword">while</span>(cmcross != slow)</span><br><span class="line">                &#123;</span><br><span class="line">                    slow = slow-&gt;next;</span><br><span class="line">                    cmcross = cmcross-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> cmcross;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：O(N)<br>空间复杂度：O(1)</p></blockquote><blockquote><p>fast走两步,slow走一步,相遇后:头节点和slow一起向前走,相遇即为循环节点</p></blockquote><hr><h1 id="3-哈希篇"><a href="#3-哈希篇" class="headerlink" title="3. 哈希篇"></a>3. 哈希篇</h1><h2 id="3-1-242-有效的字母异位词"><a href="#3-1-242-有效的字母异位词" class="headerlink" title="3.1 242-有效的字母异位词"></a>3.1 242-有效的字母异位词</h2><p><a href="https://leetcode.cn/problems/valid-anagram/submissions/437204993/">242</a></p><p><img src="/img/b.57.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> record[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : s)</span><br><span class="line">            record[e-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : t)</span><br><span class="line">            record[e-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : record)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e &gt; <span class="number">0</span> || e &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：O(n)，其中 n 为 s的长度。<br>空间复杂度：O(S)，其中 S 为字符集大小，此处 S&#x3D;26</p></blockquote><hr><h2 id="3-2-1002-查找共用字符"><a href="#3-2-1002-查找共用字符" class="headerlink" title="3.2* 1002-查找共用字符"></a>3.2* 1002-查找共用字符</h2><p><a href="https://leetcode.cn/problems/find-common-characters/">1002</a></p><p><img src="/img/b.58.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">commonChars</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> record[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> size = words.<span class="built_in">size</span>(); <span class="comment">// 判断几个字符串</span></span><br><span class="line">        vector&lt;string&gt; vs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : words[<span class="number">0</span>])</span><br><span class="line">            record[e - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; ++i) <span class="comment">// 修改为从1遍历到size-1</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 用临时数组存储当前单词中字符的出现次数</span></span><br><span class="line">            <span class="type">int</span> temp[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> e : words[i])</span><br><span class="line">                temp[e - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// 更新record数组，保留每个字符在所有单词中的最小出现次数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">                record[j] = <span class="built_in">min</span>(record[j], temp[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (record[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 将字符插入到vs中，出现次数由record[i]控制</span></span><br><span class="line">                vs.<span class="built_in">push_back</span>(<span class="built_in">string</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> + i));</span><br><span class="line">                record[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-349-两个数组的交集"><a href="#3-3-349-两个数组的交集" class="headerlink" title="3.3 349-两个数组的交集"></a>3.3 349-两个数组的交集</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349</a></p><p><img src="/img/b.59.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">start</span><span class="params">(nums1.begin(),nums1.end())</span></span>;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; result; <span class="comment">//去重</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(start.<span class="built_in">find</span>(num) != start.<span class="built_in">end</span>())</span><br><span class="line">                result.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当数组数据确认量少时</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; result_set; <span class="comment">// 存放结果，之所以用set是为了给结果集去重</span></span><br><span class="line">        <span class="type">int</span> hash[<span class="number">1005</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 默认数值为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums1) <span class="comment">// nums1中出现的字母在hash数组中做记录</span></span><br><span class="line">            hash[num] = <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2)  <span class="comment">// nums2中出现话，result记录</span></span><br><span class="line">            <span class="keyword">if</span> (hash[num] == <span class="number">1</span>) </span><br><span class="line">                result_set.<span class="built_in">insert</span>(num);</span><br><span class="line">           </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result_set.<span class="built_in">begin</span>(), result_set.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-4-202-快乐数"><a href="#3-4-202-快乐数" class="headerlink" title="3.4 202-快乐数"></a>3.4 202-快乐数</h2><p><a href="https://leetcode.cn/problems/happy-number/description/">202</a></p><p><img src="/img/b.60.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += (num % <span class="number">10</span>) * (num % <span class="number">10</span>);</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; us;</span><br><span class="line">        <span class="type">int</span> tmp = n; <span class="comment">// 使用tmp保存当前的数值</span></span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="number">1</span> &amp;&amp; us.<span class="built_in">find</span>(tmp) == us.<span class="built_in">end</span>()) <span class="comment">// 当tmp变为1或出现循环时停止</span></span><br><span class="line">        &#123;</span><br><span class="line">            us.<span class="built_in">insert</span>(tmp);</span><br><span class="line">            tmp = <span class="built_in">get</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp == <span class="number">1</span>; <span class="comment">// 如果tmp最终等于1，说明是快乐数，返回true，否则返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5-1-两数之和"><a href="#3-5-1-两数之和" class="headerlink" title="3.5 1-两数之和"></a>3.5 1-两数之和</h2><p><a href="https://leetcode.cn/problems/two-sum/description/">1</a><br><img src="/img/b.61.png" alt="在这里插入图片描述"><br><img src="/img/b.62.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; um; <span class="comment">//key为值,value为坐标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = um.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(it != um.<span class="built_in">end</span>())</span><br><span class="line">                <span class="keyword">return</span> &#123;i,it-&gt;second&#125;;</span><br><span class="line"></span><br><span class="line">            um.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(nums[i],i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>T:O(N)  S:O(N)</p></blockquote><hr><h2 id="3-6-454-四数相加II"><a href="#3-6-454-四数相加II" class="headerlink" title="3.6* 454-四数相加II"></a>3.6* 454-四数相加II</h2><p><a href="https://leetcode.cn/problems/4sum-ii/description/">454</a></p><p><img src="/img/b.63.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; um; <span class="comment">//key为值,value为出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num1 : nums1)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> num2 : nums2)</span><br><span class="line">                um[num1+num2]++;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num3 : nums3)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> num4 : nums4)</span><br><span class="line">                <span class="keyword">if</span>(um.<span class="built_in">find</span>(<span class="number">0</span>-(num3+num4)) != um.<span class="built_in">end</span>())</span><br><span class="line">                    count+=um[(<span class="number">0</span>-(num3+num4))];</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="3-7-383-赎金信"><a href="#3-7-383-赎金信" class="headerlink" title="3.7 383-赎金信"></a>3.7 383-赎金信</h2><p><a href="https://leetcode.cn/problems/ransom-note/">383</a></p><p><img src="/img/b.64.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> e : magazine)</span><br><span class="line">            hash[e - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> e : ransomNote)</span><br><span class="line">            <span class="keyword">if</span>(--hash[e-<span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="4-双指针篇"><a href="#4-双指针篇" class="headerlink" title="4. 双指针篇"></a>4. 双指针篇</h1><h2 id="4-1-15-三数之和-双指针"><a href="#4-1-15-三数之和-双指针" class="headerlink" title="4.1 15-三数之和(双指针)"></a>4.1 15-三数之和(双指针)</h2><p><a href="https://leetcode.cn/problems/3sum/description/">15</a></p><p><img src="/img/b.65.png" alt="在这里插入图片描述"></p><blockquote><p>哈希其实过于复杂,实现起来不如双指针</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; vv;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">2</span>; ++i) <span class="comment">//i为固定的数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//为避免重复答案,对固定数据进行判断</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span>; </span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> left = i+<span class="number">1</span>; <span class="comment">//中间数据</span></span><br><span class="line">            <span class="type">int</span> right = size<span class="number">-1</span>; <span class="comment">//末尾数据</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)</span><br><span class="line">                    right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)</span><br><span class="line">                    left++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    vv.<span class="built_in">push_back</span>(&#123;nums[i] , nums[left] , nums[right]&#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//为了避免重复答案,要对下一组数据进行判断</span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>])</span><br><span class="line">                        left++;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right] == nums[right<span class="number">-1</span>])</span><br><span class="line">                        right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="4-2-18-四数之和"><a href="#4-2-18-四数之和" class="headerlink" title="4.2 18-四数之和"></a>4.2 18-四数之和</h2><p><a href="https://leetcode.cn/problems/4sum/solutions/436368/si-shu-zhi-he-by-leetcode-solution/">18</a></p><p><img src="/img/b.66.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;size;++i) <span class="comment">//固定第一个</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i<span class="number">-1</span>] == nums[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>;j&lt;size;++j) <span class="comment">//固定第二个</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j<span class="number">-1</span>] == nums[j]) <span class="comment">//j&gt;i+1,防止 2 2 2 2 情况</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left = j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right = size<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="type">long</span> sum =(<span class="type">long</span> <span class="type">long</span>)nums[i]+nums[j]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum &lt; target)</span><br><span class="line">                        left++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)</span><br><span class="line">                        right--;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(&#123;nums[i],nums[j],nums[left],nums[right]&#125;);</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>])</span><br><span class="line">                            left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right] == nums[right<span class="number">-1</span>])</span><br><span class="line">                            right--;</span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="5-字符串篇"><a href="#5-字符串篇" class="headerlink" title="5. 字符串篇"></a>5. 字符串篇</h1><h2 id="5-1-344-反转字符串"><a href="#5-1-344-反转字符串" class="headerlink" title="5.1 344-反转字符串"></a>5.1 344-反转字符串</h2><p><a href="https://leetcode.cn/problems/reverse-string/description/">344</a></p><p><img src="/img/b.67.png" alt="在这里插入图片描述"></p><blockquote><p>reverse函数也可以</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> left = <span class="number">0</span>,right = size<span class="number">-1</span> ; left &lt; right ; ++left,--right)</span><br><span class="line">            <span class="built_in">swap</span>(s[left],s[right]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-541-反转字符串II"><a href="#5-2-541-反转字符串II" class="headerlink" title="5.2 541-反转字符串II"></a>5.2 541-反转字符串II</h2><p><a href="https://leetcode.cn/problems/reverse-string-ii/description/">541</a></p><p><img src="/img/b.68.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += (<span class="number">2</span> * k)) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + k &lt;= s.<span class="built_in">size</span>()) </span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k );</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-151-反转字符串中的单词"><a href="#5-3-151-反转字符串中的单词" class="headerlink" title="5.3* 151-反转字符串中的单词"></a>5.3* 151-反转字符串中的单词</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">151</a></p><p><img src="/img/b.69.png" alt="在这里插入图片描述"><br><img src="/img/b.70.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s[<span class="number">0</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()); <span class="comment">//去除开头多余空格</span></span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());<span class="comment">//blue is sky the</span></span><br><span class="line">        <span class="keyword">while</span>(s[<span class="number">0</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()); <span class="comment">//去除开头多余空格</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>, size = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ; i &lt; s.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            count++; <span class="comment">//表示当前为第几个字符</span></span><br><span class="line">            size++; <span class="comment">//表示这个单词有几个字符</span></span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+flag, s.<span class="built_in">begin</span>()+flag+size<span class="number">-1</span>);</span><br><span class="line">                flag = count; <span class="comment">//记录下一个单词的起始位置</span></span><br><span class="line">                size = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(s[i+<span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) <span class="comment">//删除中间多余空格</span></span><br><span class="line">                    s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()+i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>()+flag,s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-4-182-动态口令"><a href="#5-4-182-动态口令" class="headerlink" title="5.4 182-动态口令"></a>5.4 182-动态口令</h2><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/description/">182</a></p><p><img src="/img/b.71.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//1 2 3 4 5 6 7 -&gt; 4 5 6 7 1 2 3</span></span><br><span class="line">        <span class="comment">//7 6 5 4 3 2 1 -&gt; 7 6 5 4 1 2 3 -&gt; 4 5 6 7 1 2 3</span></span><br><span class="line">    <span class="function">string <span class="title">dynamicPassword</span><span class="params">(string password, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = password.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> newstart = size - target;</span><br><span class="line">        <span class="built_in">reverse</span>(password.<span class="built_in">begin</span>(),password.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(password.<span class="built_in">begin</span>(),password.<span class="built_in">begin</span>()+newstart);</span><br><span class="line">        <span class="built_in">reverse</span>(password.<span class="built_in">begin</span>()+newstart,password.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-5-459-重复的子字符串"><a href="#5-5-459-重复的子字符串" class="headerlink" title="5.5* 459-重复的子字符串"></a>5.5* 459-重复的子字符串</h2><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/description/">459</a></p><p><img src="/img/b.72.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">string <span class="title">tmp</span><span class="params">(s.begin(),s.end())</span></span>;</span><br><span class="line">        tmp+=s;</span><br><span class="line">        tmp.<span class="built_in">erase</span>(tmp.<span class="built_in">begin</span>());</span><br><span class="line">        tmp.<span class="built_in">erase</span>(tmp.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">//删去头尾</span></span><br><span class="line">        <span class="keyword">if</span>(tmp.<span class="built_in">find</span>(s) == string::npos)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//在tmp内寻找s,找到了就说明是重复组成的</span></span><br><span class="line">        <span class="comment">//abab -&gt;(a)b abab a(b)</span></span><br><span class="line">        <span class="comment">//abcdabcd -&gt; (a)bcd abcdabcd abc(d)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="5-6-28-找出字符串中第一个匹配项的下标-KMP"><a href="#5-6-28-找出字符串中第一个匹配项的下标-KMP" class="headerlink" title="5.6* 28-找出字符串中第一个匹配项的下标(KMP)"></a>5.6* 28-找出字符串中第一个匹配项的下标(KMP)</h2><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28</a></p><p><img src="/img/b.73.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="comment">//aabaabaafa  aabaaf</span></span><br><span class="line">    <span class="comment">//前缀表的作用就是再两个字符串匹配失败时,能回到最近的匹配位置,记录能回到位置下标</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span>* next, <span class="type">const</span> string&amp; s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//-1 0  -1 0  1  -1</span></span><br><span class="line">        <span class="comment">//a  a  b  a  a  f</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        next[<span class="number">0</span>] = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) </span><br><span class="line">        &#123; </span><br><span class="line">             <span class="comment">//能进入就说明前面已经有重复的了</span></span><br><span class="line">            <span class="comment">//进不去说明和前面一样继续重复</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; s[i] != s[j + <span class="number">1</span>])  <span class="comment">// 前后缀不相同了</span></span><br><span class="line">                j = next[j]; <span class="comment">// 向前回退</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j + <span class="number">1</span>])  <span class="comment">// 找到相同的前后缀</span></span><br><span class="line">                j++;</span><br><span class="line"></span><br><span class="line">            next[i] = j; <span class="comment">// 将j（前缀的长度）赋给next[i]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> size_ndl = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> size_hstk = haystack.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> next[size_ndl];</span><br><span class="line">        <span class="built_in">getNext</span>(next, needle);</span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>; <span class="comment">// // 因为next数组里记录的起始位置为-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size_hstk; i++) </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="comment">// 注意i就从0开始</span></span><br><span class="line">            <span class="comment">//当数据和前缀表有重合时且当下不对应</span></span><br><span class="line">            <span class="comment">//while放在if(匹配)前面,防止j一直++匹配成功后又进入循环判断下一个不匹配而重置j</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; haystack[i] != needle[j + <span class="number">1</span>])</span><br><span class="line">                j = next[j]; <span class="comment">// j 寻找之前匹配的位置 //重新加载前缀表</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j + <span class="number">1</span>])  <span class="comment">// 匹配，j和i同时向后移动</span></span><br><span class="line">                j++; <span class="comment">// i的增加在for循环里</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (j == (size_ndl - <span class="number">1</span>) )  <span class="comment">// //当数据和前缀表完全重合</span></span><br><span class="line">                <span class="keyword">return</span> (i - size_ndl + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="6-栈和队列篇"><a href="#6-栈和队列篇" class="headerlink" title="6. 栈和队列篇"></a>6. 栈和队列篇</h1><h2 id="6-1-232-用栈实现队列"><a href="#6-1-232-用栈实现队列" class="headerlink" title="6.1 232-用栈实现队列"></a>6.1 232-用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/description/">232</a></p><p><img src="/img/b.74.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">empty</span>()) <span class="comment">//s2就相当于队列,s1存储数据,反转数据存入s2;</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                s2.<span class="built_in">push</span>(s1.<span class="built_in">top</span>());</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = s2.<span class="built_in">top</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        s2.<span class="built_in">push</span>(tmp);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">empty</span>() &amp;&amp; s2.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="6-2-225-用队列实现栈"><a href="#6-2-225-用队列实现栈" class="headerlink" title="6.2 225-用队列实现栈"></a>6.2 225-用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">225</a></p><p><img src="/img/b.75.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!q1.<span class="built_in">empty</span>())</span><br><span class="line">            q1.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            q2.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123; <span class="comment">//将其中一个队列中size-1个元素全部移入另一个队列,留下的元素pop</span></span><br><span class="line">        <span class="type">int</span> ans;</span><br><span class="line">        <span class="keyword">if</span>(!q1.<span class="built_in">empty</span>()) <span class="comment">//q1不为空,将元素移动到q2</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(q1.<span class="built_in">size</span>() != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">                q1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            ans = q1.<span class="built_in">front</span>();</span><br><span class="line">            q1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(q2.<span class="built_in">size</span>() != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q1.<span class="built_in">push</span>(q2.<span class="built_in">front</span>());</span><br><span class="line">                q2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            ans = q2.<span class="built_in">front</span>();</span><br><span class="line">            q2.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">push</span>(tmp);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q1.<span class="built_in">empty</span>() &amp;&amp; q2.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q1;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="6-3-20-有效的括号"><a href="#6-3-20-有效的括号" class="headerlink" title="6.3 20-有效的括号"></a>6.3 20-有效的括号</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/description/">20</a></p><p><img src="/img/b.76.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//&#123;([])&#125;</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> e : s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e==<span class="string">&#x27;[&#x27;</span> || e==<span class="string">&#x27;(&#x27;</span> || e==<span class="string">&#x27;&#123;&#x27;</span>) <span class="comment">//左符号进入栈中</span></span><br><span class="line">                st.<span class="built_in">push</span>(e);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>())</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e == <span class="string">&#x27;)&#x27;</span> &amp;&amp; st.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span> </span><br><span class="line">                        || e == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; st.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span> </span><br><span class="line">                        || e == <span class="string">&#x27;]&#x27;</span> &amp;&amp;  st.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                    st.<span class="built_in">pop</span>(); <span class="comment">//找到对应的符号后删除左符号</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//如果不符合这个规则,那么就不构成</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>(); <span class="comment">//如果最后为空,则说明全部对应上了,否则即false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="6-4-1047-删除字符串中的所有相邻重复项"><a href="#6-4-1047-删除字符串中的所有相邻重复项" class="headerlink" title="6.4 1047-删除字符串中的所有相邻重复项"></a>6.4 1047-删除字符串中的所有相邻重复项</h2><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/">1047</a></p><p><img src="/img/b.77.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> e : s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || e!=st.<span class="built_in">top</span>())</span><br><span class="line">                st.<span class="built_in">push</span>(e);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将栈中的正确答案转移至string类</span></span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//由于从栈中获取数据,因此答案要反转回来</span></span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="6-5-150-逆波兰表达式求值"><a href="#6-5-150-逆波兰表达式求值" class="headerlink" title="6.5 150-逆波兰表达式求值"></a>6.5 150-逆波兰表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">150</a></p><p><img src="/img/b.78.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(string&amp; e : tokens)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e==<span class="string">&quot;+&quot;</span> || e==<span class="string">&quot;*&quot;</span> || e==<span class="string">&quot;/&quot;</span> || e==<span class="string">&quot;-&quot;</span>)<span class="comment">//如果为符号,则取栈顶两个数字进行运算</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> second = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> first = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">//取栈顶两个数据</span></span><br><span class="line">                <span class="keyword">if</span>(e==<span class="string">&quot;+&quot;</span>)</span><br><span class="line">                    st.<span class="built_in">push</span>(first+second);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e==<span class="string">&quot;-&quot;</span>)</span><br><span class="line">                    st.<span class="built_in">push</span>(first-second);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e==<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                    st.<span class="built_in">push</span>(first*second);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(e==<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                    st.<span class="built_in">push</span>(first/second);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//如果为数字则入栈</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="6-6-239-滑动窗口最大值-双端队列"><a href="#6-6-239-滑动窗口最大值-双端队列" class="headerlink" title="6.6* 239-滑动窗口最大值(双端队列)"></a>6.6* 239-滑动窗口最大值(双端队列)</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/description/">239</a></p><p><img src="/img/b.79.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!dq.<span class="built_in">empty</span>() &amp;&amp; dq.<span class="built_in">back</span>() &lt; num) <span class="comment">//dq中第一个元素始终保证为最大值</span></span><br><span class="line">            dq.<span class="built_in">pop_back</span>(); </span><br><span class="line">        dq.<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dq.<span class="built_in">empty</span>() &amp;&amp; dq.<span class="built_in">front</span>() == num)</span><br><span class="line">            dq.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="comment">//创建第一组滑动窗口</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;k; ++i)</span><br><span class="line">            <span class="built_in">push</span>(nums[i]);</span><br><span class="line">        ans.<span class="built_in">push_back</span>(dq.<span class="built_in">front</span>()); <span class="comment">//放入第一组滑动窗口的最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始处理后面的窗口</span></span><br><span class="line">        <span class="type">int</span> tmp = k;</span><br><span class="line">        <span class="keyword">while</span>(tmp &lt; nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pop</span>(nums[tmp-k]); <span class="comment">//尝试删除dq中最大数字(滑动窗口滑过了这个数字,需要更新,因此删除)</span></span><br><span class="line">            <span class="built_in">push</span>(nums[tmp++]); <span class="comment">//尝试更新</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(dq.<span class="built_in">front</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; dq; <span class="comment">//双端队列</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="6-7-347-前K个高频元素-优先级队列"><a href="#6-7-347-前K个高频元素-优先级队列" class="headerlink" title="6.7* 347-前K个高频元素(优先级队列)"></a>6.7* 347-前K个高频元素(优先级队列)</h2><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">347</a></p><p><img src="/img/b.80.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">SecondCmp</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp; x,<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp; y)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x.second&lt;y.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; um; <span class="comment">//key:元素 value:出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : nums)</span><br><span class="line">            um[e]++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使优先级队列升序排列,c++20适用</span></span><br><span class="line">        <span class="comment">//priority_queue&lt;pair&lt;int,int&gt;,vector&lt;pair&lt;int,int&gt;&gt;,decltype([]</span></span><br><span class="line">        <span class="comment">//(const pair&lt;int,int&gt;&amp; x,const pair&lt;int,int&gt;&amp; y)&#123;</span></span><br><span class="line">        <span class="comment">//    return x.second&lt;y.second;</span></span><br><span class="line">        <span class="comment">//&#125;)&gt; pq;</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,SecondCmp&gt; pq;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : um)</span><br><span class="line">            pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(e.first,e.second));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(pq.<span class="built_in">top</span>().first);</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-数组篇&quot;&gt;&lt;a href=&quot;#1-数组篇&quot; class=&quot;headerlink&quot; title=&quot;1.数组篇&quot;&gt;&lt;/a&gt;1.数组篇&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-1-704-二分查找&quot;&gt;&lt;a href=&quot;#1-1-704-二分查找&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="代码随想录" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
